{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/martinprabhu/Downloads/support-operations-centre/new_app/app/api/proxy/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\nconst API_BASE_URL = \"https://app-api-dev.zentere.com/api/v2\";\nconst CLIENT_ID = \"kLPrcbXlsHYelbpm5HzKg8ZgDE2rVXRhGyJ0GdqH\";\nconst CLIENT_SECRET = \"IbqUkvq1hWTuc6jK7X6xGClTLThshJhfU6nf7uYm\";\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { action, username, password, token, model, fields, domain, limit, offset, order } = body;\n\n    console.log('üîÑ Proxy request:', action);\n\n    // Handle authentication\n    if (action === 'authenticate') {\n      const formData = new URLSearchParams({\n        grant_type: 'password',\n        client_id: CLIENT_ID,\n        username: username || 'martin@demo.com',\n        password: password || 'demo',\n        client_secret: CLIENT_SECRET\n      });\n\n      const response = await fetch(`${API_BASE_URL}/authentication/oauth2/token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: formData.toString(),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Authentication failed:', response.status, errorText);\n        return NextResponse.json(\n          { error: `Authentication failed: ${response.status}` },\n          { status: response.status }\n        );\n      }\n\n      const data = await response.json();\n      console.log('‚úÖ Authentication successful');\n      return NextResponse.json(data);\n    }\n\n    // Handle search_read\n    if (action === 'search_read') {\n      const url = new URL(`${API_BASE_URL}/search_read`);\n      url.searchParams.append('model', model);\n      \n      if (fields) {\n        url.searchParams.append('fields', JSON.stringify(fields));\n      }\n      if (domain) {\n        url.searchParams.append('domain', JSON.stringify(domain));\n      }\n      if (limit) {\n        url.searchParams.append('limit', limit.toString());\n      }\n      if (offset) {\n        url.searchParams.append('offset', offset.toString());\n      }\n      if (order) {\n        url.searchParams.append('order', order);\n      }\n\n      console.log(`üìä Fetching from ${model}, limit: ${limit || 'default'}, domain: ${domain ? JSON.stringify(domain) : 'none'}`);\n\n      const response = await fetch(url.toString(), {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Search failed:', response.status, errorText);\n        return NextResponse.json(\n          { error: `Search failed: ${response.status}` },\n          { status: response.status }\n        );\n      }\n\n      const data = await response.json();\n      console.log(`‚úÖ Returned ${Array.isArray(data) ? data.length : 'N/A'} records`);\n      return NextResponse.json(data);\n    }\n\n    // Handle create\n    if (action === 'create') {\n      const { model, values } = body;\n      const url = new URL(`${API_BASE_URL}/create`);\n      url.searchParams.append('model', model);\n\n      console.log(`üìù Creating record in ${model}`);\n      console.log('üìã Values received:', JSON.stringify(values, null, 2));\n      console.log('üì§ Sending to:', url.toString());\n\n      const response = await fetch(url.toString(), {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(values),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Create failed:', response.status, errorText);\n        console.error('Request was:', { model, values });\n        return NextResponse.json(\n          { error: `Create failed: ${response.status}`, details: errorText },\n          { status: response.status }\n        );\n      }\n\n      const data = await response.json();\n      console.log(`‚úÖ Created record with ID: ${data}`);\n      return NextResponse.json(data);\n    }\n\n    // Handle write (update)\n    if (action === 'write') {\n      const { model, recordId, values } = body;\n      const url = new URL(`${API_BASE_URL}/write`);\n      url.searchParams.append('model', model);\n\n      console.log(`‚úèÔ∏è Updating record ${recordId} in ${model}`);\n\n      const response = await fetch(url.toString(), {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ id: recordId, values }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Update failed:', response.status, errorText);\n        return NextResponse.json(\n          { error: `Update failed: ${response.status}` },\n          { status: response.status }\n        );\n      }\n\n      console.log(`‚úÖ Updated record ${recordId}`);\n      return NextResponse.json({ success: true });\n    }\n\n    // Handle unlink (delete)\n    if (action === 'unlink') {\n      const { model, recordId } = body;\n      const url = new URL(`${API_BASE_URL}/unlink`);\n      url.searchParams.append('model', model);\n\n      console.log(`üóëÔ∏è Deleting record ${recordId} from ${model}`);\n\n      const response = await fetch(url.toString(), {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ id: recordId }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Delete failed:', response.status, errorText);\n        return NextResponse.json(\n          { error: `Delete failed: ${response.status}` },\n          { status: response.status }\n        );\n      }\n\n      console.log(`‚úÖ Deleted record ${recordId}`);\n      return NextResponse.json({ success: true });\n    }\n\n    if (action === 'validate_api_key') {\n      const { provider, apiKey } = body;\n      const url = provider === 'openai' ? 'https://api.openai.com/v1/models' : 'https://openrouter.ai/api/v1/models';\n      const headers = {\n        'Authorization': `Bearer ${apiKey}`,\n      };\n\n      try {\n        const response = await fetch(url, { headers });\n        if (response.ok) {\n          return NextResponse.json({ isValid: true });\n        } else {\n          return NextResponse.json({ isValid: false, error: `API key is invalid. Status: ${response.status}` });\n        }\n      } catch (error) {\n        return NextResponse.json({ isValid: false, error: 'A connection error occurred.' });\n      }\n    }\n\n    if (action === 'chat_completion') {\n      const { provider, model, messages, temperature, max_tokens, apiKey } = body;\n      const url = provider === 'openai' ? 'https://api.openai.com/v1/chat/completions' : 'https://openrouter.ai/api/v1/chat/completions';\n      const headers = {\n        'Authorization': `Bearer ${apiKey}`,\n        'Content-Type': 'application/json',\n      };\n      const payload = {\n        model,\n        messages,\n        temperature,\n        max_tokens,\n      };\n\n      try {\n        const response = await fetch(url, {\n          method: 'POST',\n          headers,\n          body: JSON.stringify(payload),\n        });\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          return NextResponse.json({ error: `Chat completion failed: ${response.status}`, details: errorText }, { status: response.status });\n        }\n\n        const data = await response.json();\n        return NextResponse.json(data);\n      } catch (error) {\n        return NextResponse.json({ error: 'A connection error occurred.' }, { status: 500 });\n      }\n    }\n\n    return NextResponse.json(\n      { error: 'Invalid action' },\n      { status: 400 }\n    );\n  } catch (error) {\n    console.error('‚ùå Proxy error:', error);\n    return NextResponse.json(\n      { \n        error: 'Internal server error', \n        details: error instanceof Error ? error.message : 'Unknown error' \n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}