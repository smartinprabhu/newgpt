{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/martinprabhu/Downloads/support-operations-centre/new_app/src/ai/enhanced-agent-orchestrator.ts"],"sourcesContent":["/**\n * Enhanced Agent Orchestrator with advanced workflow management and intelligence\n */\n\nimport type { Agent, WorkflowStep } from '@/lib/types';\nimport { openaiClient } from '@/lib/api-client';\nimport { statisticalAnalyzer, insightsGenerator } from '@/lib/statistical-analysis';\n\nexport interface EnhancedOrchestratorInput {\n  userMessage: string;\n  sessionId: string;\n  context: {\n    selectedBu?: any;\n    selectedLob?: any;\n    businessUnits?: any[];\n    conversationHistory?: any[];\n    userGoals?: string[];\n    currentPhase?: 'onboarding' | 'exploration' | 'analysis' | 'modeling' | 'insights';\n  };\n}\n\nexport interface EnhancedOrchestratorOutput {\n  response: string;\n  workflow: WorkflowStep[];\n  agentStatus: EnhancedAgent[];\n  insights: BusinessInsight[];\n  recommendations: ActionableRecommendation[];\n  confidence: number;\n  nextPhase?: string;\n  estimatedCompletion?: Date;\n  agentResponses?: AgentResponse[];\n}\n\nexport interface AgentResponse {\n  agentId: string;\n  agentType: string;\n  content: string;\n  confidence: number;\n  uniqueInsights: string[];\n  metrics: Record<string, any>;\n  timestamp: Date;\n}\n\nexport interface EnhancedAgent extends Agent {\n  type: 'onboarding' | 'eda' | 'preprocessing' | 'modeling' | 'validation' | 'forecasting' | 'insights' | 'general';\n  capabilities: string[];\n  specialization: string[];\n  currentLoad: number;\n  quality: number;\n  lastActivity: Date;\n  insights?: any[];\n}\n\nexport interface BusinessInsight {\n  id: string;\n  type: 'trend' | 'anomaly' | 'opportunity' | 'risk' | 'quality' | 'performance';\n  title: string;\n  description: string;\n  confidence: number;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  businessImpact: string;\n  recommendedActions: string[];\n  dataSupport: any;\n}\n\nexport interface ActionableRecommendation {\n  id: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  category: 'data_quality' | 'analysis' | 'modeling' | 'business_action';\n  title: string;\n  description: string;\n  expectedOutcome: string;\n  effort: 'low' | 'medium' | 'high';\n  timeline: string;\n  dependencies: string[];\n}\n\nexport interface WorkflowPhase {\n  name: string;\n  description: string;\n  requiredAgents: string[];\n  estimatedDuration: number;\n  dependencies: string[];\n  completionCriteria: string[];\n  outputs: string[];\n}\n\nexport class EnhancedAgentOrchestrator {\n  private agents: Map<string, EnhancedAgent> = new Map();\n  private workflows: Map<string, WorkflowStep[]> = new Map();\n  private insights: BusinessInsight[] = [];\n  private recommendations: ActionableRecommendation[] = [];\n  private currentPhase: string = 'onboarding';\n  private sessionState: Map<string, any> = new Map();\n  private agentResponses: AgentResponse[] = [];\n\n  // Predefined workflow phases for different scenarios\n  private workflowPhases: Record<string, WorkflowPhase[]> = {\n    complete_analysis: [\n      {\n        name: 'Data Assessment',\n        description: 'Comprehensive data quality and exploratory analysis',\n        requiredAgents: ['onboarding', 'eda'],\n        estimatedDuration: 60000, // 1 minute\n        dependencies: [],\n        completionCriteria: ['data_uploaded', 'quality_assessed', 'patterns_identified'],\n        outputs: ['quality_report', 'statistical_summary', 'pattern_analysis']\n      },\n      {\n        name: 'Data Preparation',\n        description: 'Clean and prepare data for modeling',\n        requiredAgents: ['preprocessing'],\n        estimatedDuration: 45000, // 45 seconds\n        dependencies: ['Data Assessment'],\n        completionCriteria: ['missing_values_handled', 'outliers_treated', 'features_engineered'],\n        outputs: ['clean_dataset', 'feature_summary', 'preprocessing_report']\n      },\n      {\n        name: 'Model Development',\n        description: 'Train and validate forecasting models',\n        requiredAgents: ['modeling', 'validation'],\n        estimatedDuration: 120000, // 2 minutes\n        dependencies: ['Data Preparation'],\n        completionCriteria: ['models_trained', 'performance_validated', 'best_model_selected'],\n        outputs: ['trained_models', 'performance_metrics', 'validation_report']\n      },\n      {\n        name: 'Forecast Generation',\n        description: 'Generate forecasts with uncertainty quantification',\n        requiredAgents: ['forecasting'],\n        estimatedDuration: 30000, // 30 seconds\n        dependencies: ['Model Development'],\n        completionCriteria: ['forecasts_generated', 'confidence_intervals_calculated'],\n        outputs: ['forecast_results', 'uncertainty_analysis', 'scenario_projections']\n      },\n      {\n        name: 'Business Intelligence',\n        description: 'Extract actionable business insights',\n        requiredAgents: ['insights'],\n        estimatedDuration: 45000, // 45 seconds\n        dependencies: ['Forecast Generation'],\n        completionCriteria: ['insights_generated', 'recommendations_created', 'business_impact_assessed'],\n        outputs: ['business_insights', 'action_recommendations', 'impact_analysis']\n      }\n    ],\n    quick_analysis: [\n      {\n        name: 'Rapid Assessment',\n        description: 'Quick data overview and key insights',\n        requiredAgents: ['eda', 'insights'],\n        estimatedDuration: 45000,\n        dependencies: [],\n        completionCriteria: ['overview_complete', 'key_insights_identified'],\n        outputs: ['quick_summary', 'key_insights', 'immediate_recommendations']\n      }\n    ],\n    onboarding_flow: [\n      {\n        name: 'User Onboarding',\n        description: 'Guide user through platform setup and goal definition',\n        requiredAgents: ['onboarding'],\n        estimatedDuration: 30000,\n        dependencies: [],\n        completionCriteria: ['goals_defined', 'data_requirements_clear', 'workflow_planned'],\n        outputs: ['user_goals', 'data_requirements', 'planned_workflow']\n      }\n    ]\n  };\n\n  constructor() {\n    this.initializeAgents();\n  }\n\n  private initializeAgents(): void {\n    const agentConfigs = [\n      {\n        id: 'onboarding-agent',\n        name: 'Onboarding Specialist',\n        type: 'onboarding' as const,\n        capabilities: ['user_guidance', 'workflow_planning', 'requirement_gathering'],\n        specialization: ['business_understanding', 'goal_setting', 'process_design'],\n        status: 'idle' as const,\n        successRate: 0.95,\n        avgCompletionTime: 30000,\n        errorCount: 0,\n        cpuUsage: 0.1,\n        memoryUsage: 0.05,\n        currentLoad: 0,\n        quality: 0.95,\n        lastActivity: new Date(),\n        task: 'Ready for onboarding tasks'\n      },\n      {\n        id: 'eda-agent',\n        name: 'Data Explorer',\n        type: 'eda' as const,\n        capabilities: ['statistical_analysis', 'pattern_recognition', 'data_quality_assessment'],\n        specialization: ['exploratory_analysis', 'visualization', 'statistical_testing'],\n        status: 'idle' as const,\n        successRate: 0.92,\n        avgCompletionTime: 60000,\n        errorCount: 0,\n        cpuUsage: 0.2,\n        memoryUsage: 0.15,\n        currentLoad: 0,\n        quality: 0.92,\n        lastActivity: new Date(),\n        task: 'Ready for data exploration'\n      },\n      {\n        id: 'preprocessing-agent',\n        name: 'Data Engineer',\n        type: 'preprocessing' as const,\n        capabilities: ['data_cleaning', 'feature_engineering', 'transformation'],\n        specialization: ['missing_value_imputation', 'outlier_treatment', 'feature_creation'],\n        status: 'idle' as const,\n        successRate: 0.89,\n        avgCompletionTime: 45000,\n        errorCount: 0,\n        cpuUsage: 0.15,\n        memoryUsage: 0.12,\n        currentLoad: 0,\n        quality: 0.89,\n        lastActivity: new Date(),\n        task: 'Ready for data preprocessing'\n      },\n      {\n        id: 'modeling-agent',\n        name: 'ML Engineer',\n        type: 'modeling' as const,\n        capabilities: ['model_training', 'hyperparameter_optimization', 'ensemble_methods'],\n        specialization: ['forecasting_algorithms', 'model_selection', 'performance_optimization'],\n        status: 'idle' as const,\n        successRate: 0.88,\n        avgCompletionTime: 120000,\n        errorCount: 0,\n        cpuUsage: 0.4,\n        memoryUsage: 0.3,\n        currentLoad: 0,\n        quality: 0.88,\n        lastActivity: new Date(),\n        task: 'Ready for model training'\n      },\n      {\n        id: 'validation-agent',\n        name: 'Quality Analyst',\n        type: 'validation' as const,\n        capabilities: ['model_validation', 'performance_assessment', 'statistical_testing'],\n        specialization: ['cross_validation', 'metric_calculation', 'robustness_testing'],\n        status: 'idle' as const,\n        successRate: 0.94,\n        avgCompletionTime: 30000,\n        errorCount: 0,\n        cpuUsage: 0.2,\n        memoryUsage: 0.1,\n        currentLoad: 0,\n        quality: 0.94,\n        lastActivity: new Date(),\n        task: 'Ready for validation tasks'\n      },\n      {\n        id: 'forecasting-agent',\n        name: 'Forecast Analyst',\n        type: 'forecasting' as const,\n        capabilities: ['time_series_forecasting', 'uncertainty_quantification', 'scenario_analysis'],\n        specialization: ['prediction_intervals', 'forecast_accuracy', 'business_forecasting'],\n        status: 'idle' as const,\n        successRate: 0.90,\n        avgCompletionTime: 30000,\n        errorCount: 0,\n        cpuUsage: 0.25,\n        memoryUsage: 0.15,\n        currentLoad: 0,\n        quality: 0.90,\n        lastActivity: new Date(),\n        task: 'Ready for forecasting'\n      },\n      {\n        id: 'insights-agent',\n        name: 'Business Analyst',\n        type: 'insights' as const,\n        capabilities: ['business_intelligence', 'strategic_analysis', 'recommendation_generation'],\n        specialization: ['market_analysis', 'risk_assessment', 'opportunity_identification'],\n        status: 'idle' as const,\n        successRate: 0.91,\n        avgCompletionTime: 45000,\n        errorCount: 0,\n        cpuUsage: 0.15,\n        memoryUsage: 0.08,\n        currentLoad: 0,\n        quality: 0.91,\n        lastActivity: new Date(),\n        task: 'Ready for business analysis'\n      }\n    ];\n\n    agentConfigs.forEach(config => {\n      this.agents.set(config.id, config);\n    });\n  }\n\n  async orchestrateWorkflow(input: EnhancedOrchestratorInput): Promise<EnhancedOrchestratorOutput> {\n    const { userMessage, sessionId, context } = input;\n    \n    // Analyze user intent and determine optimal workflow\n    const workflowPlan = await this.planOptimalWorkflow(userMessage, context);\n    \n    // Execute workflow with intelligent agent coordination\n    const executionResult = await this.executeWorkflow(workflowPlan, context, sessionId);\n    \n    // Generate comprehensive insights and recommendations\n    const businessAnalysis = await this.generateBusinessAnalysis(executionResult, context);\n    \n    // Calculate overall confidence and next steps\n    const confidence = this.calculateOverallConfidence(executionResult, businessAnalysis);\n    const nextPhase = this.determineNextPhase(workflowPlan.phase, confidence);\n    \n    return {\n      response: executionResult.response,\n      workflow: executionResult.workflow,\n      agentStatus: Array.from(this.agents.values()),\n      insights: businessAnalysis.insights,\n      recommendations: businessAnalysis.recommendations,\n      confidence,\n      nextPhase,\n      estimatedCompletion: this.calculateEstimatedCompletion(workflowPlan.workflow)\n    };\n  }\n\n  private async planOptimalWorkflow(userMessage: string, context: any): Promise<{\n    phase: string;\n    workflow: WorkflowStep[];\n    reasoning: string;\n  }> {\n    const lowerMessage = userMessage.toLowerCase();\n    \n    // Intelligent workflow selection based on context and intent\n    let selectedPhase = 'quick_analysis';\n    let reasoning = 'Default quick analysis workflow';\n    \n    // Onboarding detection\n    if (!context.selectedLob?.hasData && /(start|begin|help|guide|setup)/i.test(lowerMessage)) {\n      selectedPhase = 'onboarding_flow';\n      reasoning = 'User needs onboarding and setup guidance';\n    }\n    // Complete analysis workflow\n    else if (/(complete|full|comprehensive|end.to.end|forecast|predict|train)/i.test(lowerMessage)) {\n      selectedPhase = 'complete_analysis';\n      reasoning = 'User requested comprehensive analysis workflow';\n    }\n    // Quick insights\n    else if (/(quick|summary|overview|insights|analyze)/i.test(lowerMessage)) {\n      selectedPhase = 'quick_analysis';\n      reasoning = 'User requested quick analysis and insights';\n    }\n\n    const phaseConfig = this.workflowPhases[selectedPhase] || this.workflowPhases['quick_analysis'];\n    const workflow = this.generateWorkflowSteps(phaseConfig);\n\n    return { phase: selectedPhase, workflow, reasoning };\n  }\n\n  private generateWorkflowSteps(phases: WorkflowPhase[]): WorkflowStep[] {\n    const steps: WorkflowStep[] = [];\n    let stepId = 1;\n\n    phases.forEach((phase, phaseIndex) => {\n      phase.requiredAgents.forEach((agentType, agentIndex) => {\n        const agent = Array.from(this.agents.values()).find(a => a.type === agentType);\n        const isFirstStepInPhase = agentIndex === 0;\n        const dependencies = isFirstStepInPhase && phaseIndex > 0 \n          ? [`step-${stepId - phase.requiredAgents.length}`] \n          : stepId > 1 ? [`step-${stepId - 1}`] : [];\n\n        steps.push({\n          id: `step-${stepId}`,\n          name: `${phase.name} - ${agent?.name || agentType}`,\n          status: 'pending',\n          dependencies,\n          estimatedTime: this.formatDuration(Math.floor(phase.estimatedDuration / phase.requiredAgents.length)),\n          details: phase.description,\n          agent: agent?.name || agentType\n        });\n\n        stepId++;\n      });\n    });\n\n    return steps;\n  }\n\n  private async executeWorkflow(\n    workflowPlan: { phase: string; workflow: WorkflowStep[]; reasoning: string },\n    context: any,\n    sessionId: string\n  ): Promise<{ response: string; workflow: WorkflowStep[] }> {\n    \n    let aggregatedResponse = `## ${workflowPlan.phase.replace(/_/g, ' ').toUpperCase()} WORKFLOW\\n\\n`;\n    aggregatedResponse += `*${workflowPlan.reasoning}*\\n\\n`;\n\n    // Simulate workflow execution with enhanced agent coordination\n    for (const step of workflowPlan.workflow) {\n      const agent = Array.from(this.agents.values()).find(a => a.name === step.agent);\n      \n      if (agent) {\n        // Update agent status\n        agent.status = 'active';\n        agent.currentLoad = 0.8;\n        agent.lastActivity = new Date();\n        \n        // Execute agent-specific logic\n        const agentResult = await this.executeAgentTask(agent, context, sessionId);\n        \n        // Update step status\n        step.status = 'completed';\n        \n        // Update agent status\n        agent.status = 'idle';\n        agent.currentLoad = 0;\n        agent.successRate = Math.min(0.99, agent.successRate + 0.001); // Gradual improvement\n        \n        // Aggregate response\n        aggregatedResponse += agentResult + '\\n\\n';\n        \n        // Simulate processing time\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n    }\n\n    return {\n      response: aggregatedResponse.trim(),\n      workflow: workflowPlan.workflow\n    };\n  }\n\n  private async executeAgentTask(agent: EnhancedAgent, context: any, sessionId: string): Promise<string> {\n    // Generate agent-specific responses based on type and capabilities\n    switch (agent.type) {\n      case 'onboarding':\n        return this.generateOnboardingResponse(context);\n      case 'eda':\n        return this.generateEDAResponse(context);\n      case 'preprocessing':\n        return this.generatePreprocessingResponse(context);\n      case 'modeling':\n        return this.generateModelingResponse(context);\n      case 'validation':\n        return this.generateValidationResponse(context);\n      case 'forecasting':\n        return this.generateForecastingResponse(context);\n      case 'insights':\n        return this.generateInsightsResponse(context);\n      default:\n        return this.generateGeneralResponse(context);\n    }\n  }\n\n  private generateOnboardingResponse(context: any): string {\n    const hasData = context.selectedLob?.hasData;\n    const hasBU = context.selectedBu;\n    \n    if (!hasBU) {\n      return `### 🚀 Welcome to ForecastFlow BI!\n      \nI'm here to guide you through your business intelligence journey. Let's start by:\n\n**Immediate Next Steps:**\n• Select your Business Unit and Line of Business\n• Upload your historical data (CSV or Excel format)\n• Define your forecasting goals and timeline\n\n**What I can help you achieve:**\n• Comprehensive data analysis and quality assessment\n• Advanced forecasting with multiple algorithms\n• Business insights and strategic recommendations\n• Risk assessment and opportunity identification\n\nReady to begin? Please select your Business Unit first.`;\n    }\n    \n    if (!hasData) {\n      return `### 📊 Business Unit Selected: ${context.selectedBu?.name}\n\nGreat choice! Now let's get your data ready for analysis.\n\n**Data Requirements:**\n• Historical time series data (minimum 30 data points recommended)\n• Include date/time column and target variable\n• Additional features/predictors are welcome\n\n**Supported Formats:** CSV, Excel (.xlsx, .xls)\n\nOnce you upload your data, I'll automatically:\n• Assess data quality and completeness\n• Identify patterns and trends\n• Recommend optimal analysis approach\n• Plan your complete forecasting workflow\n\nUpload your data when ready!`;\n    }\n\n    return `### ✅ Setup Complete!\n\n**Your Configuration:**\n• Business Unit: ${context.selectedBu?.name}\n• Line of Business: ${context.selectedLob?.name}\n• Data Records: ${context.selectedLob?.recordCount?.toLocaleString()}\n\n**Ready for Analysis:**\nI can now help you with comprehensive forecasting and business intelligence. What would you like to explore?\n\n• Run complete analysis workflow\n• Explore data patterns and trends  \n• Generate forecasts for specific periods\n• Identify business opportunities and risks`;\n  }\n\n  private generateEDAResponse(context: any): string {\n    if (!context.selectedLob?.hasData) {\n      return `### 🔬 Exploratory Data Analysis\n\nNo data available for analysis. Please upload your dataset first to begin comprehensive statistical exploration.`;\n    }\n\n    // Simulate advanced EDA with statistical analysis\n    const recordCount = context.selectedLob?.recordCount || 0;\n    const mockStats = {\n      mean: Math.floor(Math.random() * 10000) + 5000,\n      stdDev: Math.floor(Math.random() * 2000) + 500,\n      outliers: Math.floor(Math.random() * 5),\n      trend: ['increasing', 'decreasing', 'stable'][Math.floor(Math.random() * 3)],\n      seasonality: Math.random() > 0.5,\n      quality: Math.floor(Math.random() * 20) + 80\n    };\n\n    return `### 🔬 Comprehensive Data Exploration\n\n**Dataset Overview:**\n• **Records Analyzed:** ${recordCount.toLocaleString()}\n• **Data Quality Score:** ${mockStats.quality}/100\n• **Missing Values:** <2% (Excellent)\n\n**Statistical Summary:**\n• **Mean Value:** ${mockStats.mean.toLocaleString()}\n• **Standard Deviation:** ${mockStats.stdDev.toLocaleString()}\n• **Coefficient of Variation:** ${(mockStats.stdDev/mockStats.mean * 100).toFixed(1)}%\n\n**Pattern Analysis:**\n• **Trend Direction:** ${mockStats.trend} (${Math.floor(Math.random() * 30) + 70}% confidence)\n• **Seasonality Detected:** ${mockStats.seasonality ? 'Yes - Strong seasonal patterns' : 'No clear seasonality'}\n• **Outliers Identified:** ${mockStats.outliers} data points require attention\n\n**Key Insights:**\n${mockStats.trend === 'increasing' ? '📈 Strong growth trend indicates positive business momentum' : \n  mockStats.trend === 'decreasing' ? '📉 Declining trend suggests need for intervention strategies' : \n  '➡️ Stable performance with consistent patterns'}\n\n**Recommendations:**\n• Data quality is ${mockStats.quality >= 90 ? 'excellent' : 'good'} - ready for modeling\n${mockStats.outliers > 0 ? `• Review ${mockStats.outliers} outlier(s) for data entry errors` : ''}\n• ${mockStats.seasonality ? 'Leverage seasonal patterns for forecasting' : 'Focus on trend-based forecasting approaches'}\n\n**Next Steps:** Ready for data preprocessing and model training.`;\n  }\n\n  private generatePreprocessingResponse(context: any): string {\n    return `### 🔧 Data Preprocessing Complete\n\n**Processing Steps Applied:**\n• **Missing Value Treatment:** Forward-fill interpolation for temporal gaps\n• **Outlier Management:** Statistical bounds applied (1.5x IQR method)\n• **Feature Engineering:** Created 7-day and 30-day rolling averages\n• **Data Validation:** All preprocessing checks passed\n\n**Quality Improvements:**\n• **Before:** 85/100 quality score\n• **After:** 94/100 quality score (+9 points improvement)\n\n**Features Created:**\n• Rolling averages (7-day, 30-day windows)\n• Lag features (1-week, 2-week, 4-week)\n• Seasonal indicators (month, quarter)\n• Growth rate calculations\n\n**Dataset Ready:** Optimized for ${['Prophet', 'XGBoost', 'LightGBM'][Math.floor(Math.random() * 3)]} forecasting algorithms\n\n**Next Step:** Proceeding to model training with enhanced feature set.`;\n  }\n\n  private generateModelingResponse(context: any): string {\n    const models = ['Prophet', 'XGBoost', 'LightGBM'];\n    const bestModel = models[Math.floor(Math.random() * models.length)];\n    const mape = (Math.random() * 10 + 5).toFixed(1);\n    const r2 = (0.7 + Math.random() * 0.25).toFixed(3);\n\n    return `### 🤖 Advanced Model Training Complete\n\n**Models Trained & Evaluated:**\n• **Prophet:** MAPE ${(parseFloat(mape) + Math.random() * 3).toFixed(1)}% | R² ${(parseFloat(r2) - 0.05).toFixed(3)}\n• **XGBoost:** MAPE ${mape}% | R² ${r2}\n• **LightGBM:** MAPE ${(parseFloat(mape) + Math.random() * 2).toFixed(1)}% | R² ${(parseFloat(r2) - 0.02).toFixed(3)}\n\n**🏆 Best Performing Model:** ${bestModel}\n• **Cross-Validation MAPE:** ${mape}%\n• **R² Score:** ${r2}\n• **Training Time:** ${Math.floor(Math.random() * 45) + 15} seconds\n• **Hyperparameters:** Optimized through Bayesian search\n\n**Model Capabilities:**\n• **Forecast Horizon:** Up to 90 days\n• **Confidence Intervals:** 80%, 90%, 95% levels\n• **Feature Importance:** Top 5 predictors identified\n• **Seasonality Handling:** Advanced seasonal decomposition\n\n**Performance Assessment:**\n• **Accuracy:** ${mape < '8.0' ? 'Excellent' : mape < '12.0' ? 'Good' : 'Acceptable'} (MAPE < ${mape}%)\n• **Reliability:** High (R² = ${r2})\n• **Business Readiness:** Production-ready with monitoring\n\n**Next Step:** Model validation and forecast generation.`;\n  }\n\n  private generateValidationResponse(context: any): string {\n    const tests = [\n      'Residual Normality Test',\n      'Autocorrelation Analysis', \n      'Heteroscedasticity Test',\n      'Cross-Validation Performance',\n      'Out-of-Sample Accuracy'\n    ];\n    \n    return `### ✅ Comprehensive Model Validation\n\n**Validation Tests Completed:**\n${tests.map(test => `• **${test}:** ✅ Passed`).join('\\n')}\n\n**Performance Metrics:**\n• **Mean Absolute Percentage Error (MAPE):** 8.2%\n• **Root Mean Square Error (RMSE):** 1,247\n• **Mean Absolute Error (MAE):** 982\n• **Mean Absolute Scaled Error (MASE):** 0.76\n\n**Diagnostic Results:**\n• **Residual Analysis:** No systematic patterns detected\n• **Forecast Bias:** Minimal (0.3% average bias)\n• **Prediction Intervals:** Well-calibrated\n• **Robustness Test:** Stable across different time periods\n\n**Business Validation:**\n• **Accuracy Level:** Excellent for business forecasting\n• **Reliability Score:** 94/100\n• **Commercial Readiness:** Approved for production deployment\n\n**Risk Assessment:**\n• **Model Risk:** Low\n• **Data Risk:** Low  \n• **Business Risk:** Minimal with recommended monitoring\n\n**Recommendation:** Model validated and ready for forecast generation.`;\n  }\n\n  private generateForecastingResponse(context: any): string {\n    const currentValue = Math.floor(Math.random() * 50000) + 25000;\n    const forecastChange = (Math.random() * 30 - 10); // -10% to +20%\n    const forecastValue = Math.floor(currentValue * (1 + forecastChange/100));\n\n    return `### 📈 Advanced Forecast Generation Complete\n\n**30-Day Forecast Summary:**\n• **Current Value:** ${currentValue.toLocaleString()}\n• **Forecasted Value:** ${forecastValue.toLocaleString()}\n• **Expected Change:** ${forecastChange > 0 ? '+' : ''}${forecastChange.toFixed(1)}%\n\n**Confidence Intervals (95%):**\n• **Lower Bound:** ${Math.floor(forecastValue * 0.85).toLocaleString()}\n• **Upper Bound:** ${Math.floor(forecastValue * 1.15).toLocaleString()}\n• **Prediction Width:** ±${Math.floor((forecastValue * 0.15)).toLocaleString()}\n\n**Forecast Components:**\n• **Trend Component:** ${forecastChange > 5 ? 'Strong positive' : forecastChange < -5 ? 'Declining' : 'Stable'}\n• **Seasonal Effect:** ${Math.random() > 0.5 ? '12% uplift expected' : '8% seasonal adjustment'}\n• **Cyclical Patterns:** Medium-term cycles incorporated\n\n**Risk Analysis:**\n• **Forecast Confidence:** ${85 + Math.floor(Math.random() * 10)}%\n• **Key Risks:** ${['Market volatility', 'External factors', 'Data changes'][Math.floor(Math.random() * 3)]}\n• **Upside Scenarios:** +${Math.floor(Math.random() * 15) + 10}% under optimistic conditions\n\n**Business Impact:**\n${forecastChange > 10 ? '🎯 Strong growth expected - consider capacity planning' : \n  forecastChange < -5 ? '⚠️ Decline projected - intervention strategies recommended' :\n  '📊 Stable performance expected - maintain current operations'}\n\n**Next Steps:** Generate business insights and strategic recommendations.`;\n  }\n\n  private generateInsightsResponse(context: any): string {\n    const insights = [\n      'Market share expansion opportunity identified',\n      'Seasonal demand patterns optimizable', \n      'Cost efficiency improvements possible',\n      'Revenue stream diversification potential',\n      'Customer retention enhancement opportunity'\n    ];\n    \n    const selectedInsight = insights[Math.floor(Math.random() * insights.length)];\n    const impact = Math.floor(Math.random() * 20) + 10;\n\n    return `### 💡 Strategic Business Intelligence\n\n**Key Business Insight:** ${selectedInsight}\n\n**Strategic Analysis:**\n• **Revenue Impact Potential:** +${impact}% (${Math.floor(Math.random() * 500) + 200}K annually)\n• **Implementation Effort:** ${['Low', 'Medium', 'High'][Math.floor(Math.random() * 3)]}\n• **Timeline to Value:** ${Math.floor(Math.random() * 8) + 4} weeks\n• **Success Probability:** ${Math.floor(Math.random() * 20) + 70}%\n\n**Market Position Analysis:**\n• **Competitive Advantage:** ${['Strong', 'Moderate', 'Developing'][Math.floor(Math.random() * 3)]}\n• **Market Trends Alignment:** ${Math.floor(Math.random() * 30) + 70}% favorable\n• **Risk-Adjusted ROI:** ${(Math.random() * 150 + 50).toFixed(0)}%\n\n**Actionable Recommendations:**\n\n**🎯 Immediate Actions (0-30 days):**\n• Implement enhanced data collection for key metrics\n• Establish performance monitoring dashboards\n• Begin pilot program for identified opportunities\n\n**📈 Short-term Strategy (1-3 months):**\n• Scale successful pilot initiatives\n• Optimize resource allocation based on forecast insights\n• Develop contingency plans for identified risks\n\n**🚀 Long-term Vision (3-12 months):**\n• Strategic market positioning based on trend analysis\n• Advanced analytics infrastructure development\n• Competitive differentiation through data-driven decisions\n\n**Success Metrics:**\n• Target improvement: ${impact}% within ${Math.floor(Math.random() * 3) + 3} months\n• Key Performance Indicators: Revenue growth, efficiency gains, market share\n• ROI Tracking: Monthly performance reviews against baseline\n\n**Risk Mitigation:**\n• Continuous monitoring of key assumptions\n• Scenario planning for alternative outcomes\n• Agile adjustment mechanisms in place\n\n**Next Steps:** Implement recommendations with regular progress reviews.`;\n  }\n\n  private generateGeneralResponse(context: any): string {\n    return `### 🤖 General Business Intelligence Support\n\nI'm here to help you navigate your business intelligence and forecasting needs. Based on your current context, I can assist with:\n\n**Available Capabilities:**\n• Data analysis and exploration\n• Forecasting and predictive analytics  \n• Business insight generation\n• Strategic recommendation development\n\n**Current Status:** ${context.selectedLob?.hasData ? 'Data available for analysis' : 'Waiting for data upload'}\n\nHow can I help you achieve your business objectives?`;\n  }\n\n  private async generateBusinessAnalysis(executionResult: any, context: any): Promise<{\n    insights: BusinessInsight[];\n    recommendations: ActionableRecommendation[];\n  }> {\n    // Generate business insights based on execution results\n    const insights: BusinessInsight[] = [\n      {\n        id: 'trend-analysis-001',\n        type: 'trend',\n        title: 'Strong Growth Trajectory Identified',\n        description: 'Analysis reveals consistent upward trend with 89% confidence level',\n        confidence: 0.89,\n        severity: 'medium',\n        businessImpact: 'Potential 15-20% revenue increase over next quarter',\n        recommendedActions: ['Scale operations', 'Increase inventory', 'Expand marketing'],\n        dataSupport: { trendStrength: 0.89, r2: 0.82 }\n      },\n      {\n        id: 'quality-assessment-001',\n        type: 'quality',\n        title: 'Excellent Data Quality Maintained',\n        description: 'Data quality score of 94/100 enables reliable forecasting',\n        confidence: 0.94,\n        severity: 'low',\n        businessImpact: 'High confidence in forecast accuracy and business decisions',\n        recommendedActions: ['Maintain current data practices', 'Consider automated monitoring'],\n        dataSupport: { qualityScore: 94, completeness: 0.98 }\n      }\n    ];\n\n    const recommendations: ActionableRecommendation[] = [\n      {\n        id: 'rec-001',\n        priority: 'high',\n        category: 'business_action',\n        title: 'Capitalize on Growth Momentum',\n        description: 'Leverage identified growth trend through strategic capacity expansion',\n        expectedOutcome: '15-20% revenue increase within 3 months',\n        effort: 'medium',\n        timeline: '6-8 weeks',\n        dependencies: ['Budget approval', 'Resource allocation']\n      },\n      {\n        id: 'rec-002', \n        priority: 'medium',\n        category: 'analysis',\n        title: 'Implement Advanced Monitoring',\n        description: 'Set up automated monitoring for key performance indicators',\n        expectedOutcome: 'Earlier detection of trend changes and opportunities',\n        effort: 'low',\n        timeline: '2-3 weeks',\n        dependencies: ['Technical setup']\n      }\n    ];\n\n    return { insights, recommendations };\n  }\n\n  private calculateOverallConfidence(executionResult: any, businessAnalysis: any): number {\n    // Calculate weighted confidence based on multiple factors\n    const baseConfidence = 0.8;\n    const insightConfidence = businessAnalysis.insights.reduce((avg: number, insight: BusinessInsight) => \n      avg + insight.confidence, 0) / Math.max(businessAnalysis.insights.length, 1);\n    \n    return Math.min(0.99, (baseConfidence + insightConfidence) / 2);\n  }\n\n  private determineNextPhase(currentPhase: string, confidence: number): string {\n    const phaseProgression = {\n      'onboarding_flow': 'data_exploration',\n      'quick_analysis': confidence > 0.8 ? 'detailed_modeling' : 'data_improvement',\n      'complete_analysis': 'monitoring_optimization'\n    };\n\n    return phaseProgression[currentPhase as keyof typeof phaseProgression] || 'continuous_improvement';\n  }\n\n  private calculateEstimatedCompletion(workflow: WorkflowStep[]): Date {\n    const totalEstimatedMs = workflow.reduce((sum, step) => {\n      const timeStr = step.estimatedTime;\n      const minutes = parseInt(timeStr.replace(/[^0-9]/g, '')) || 1;\n      return sum + (minutes * 60 * 1000);\n    }, 0);\n\n    return new Date(Date.now() + totalEstimatedMs);\n  }\n\n  private formatDuration(milliseconds: number): string {\n    const seconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(seconds / 60);\n    \n    if (minutes > 0) {\n      return `${minutes}m ${seconds % 60}s`;\n    }\n    return `${seconds}s`;\n  }\n\n  // Public methods for external access\n  getAgentStatus(): EnhancedAgent[] {\n    return Array.from(this.agents.values());\n  }\n\n  getSystemMetrics(): any {\n    const agents = Array.from(this.agents.values());\n    return {\n      totalAgents: agents.length,\n      activeAgents: agents.filter(a => a.status === 'active').length,\n      avgQuality: agents.reduce((sum, a) => sum + a.quality, 0) / agents.length,\n      avgSuccessRate: agents.reduce((sum, a) => sum + a.successRate, 0) / agents.length,\n      systemLoad: agents.reduce((sum, a) => sum + a.currentLoad, 0) / agents.length\n    };\n  }\n\n  async healthCheck(): Promise<{ status: string; details: any }> {\n    const metrics = this.getSystemMetrics();\n    const isHealthy = metrics.avgQuality > 0.8 && metrics.avgSuccessRate > 0.85;\n    \n    return {\n      status: isHealthy ? 'healthy' : 'degraded',\n      details: {\n        ...metrics,\n        timestamp: new Date().toISOString(),\n        version: '2.0.0'\n      }\n    };\n  }\n}\n\n// Export singleton instance\nexport const enhancedOrchestrator = new EnhancedAgentOrchestrator();"],"names":[],"mappings":"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","debugId":null}}]
}