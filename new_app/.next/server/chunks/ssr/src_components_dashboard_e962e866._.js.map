{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/martinprabhu/Downloads/support-operations-centre/new_app/src/components/dashboard/app-provider.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport type { BusinessUnit, LineOfBusiness, ChatMessage, WorkflowStep, BUCreationData, LOBCreationData, DateRange, WeeklyData, OutlierData, ForecastData } from '@/lib/types';\nimport { getAPIClient } from '@/lib/api-client';\nimport type { AgentMonitorProps } from '@/lib/types';\n\ntype AppState = {\n  apiKey: string | null;\n  businessUnits: BusinessUnit[];\n  selectedBu: BusinessUnit | null;\n  selectedLob: LineOfBusiness | null;\n  messages: ChatMessage[];\n  workflow: WorkflowStep[];\n  isProcessing: boolean;\n  thinkingSteps: string[];\n  agentMonitor: AgentMonitorProps;\n  dataPanelOpen: boolean;\n  dataPanelMode: 'chart' | 'table' | 'menu';\n  dataPanelTarget: 'units' | 'revenue';\n  dataPanelWidthPct: number; // Range: 20 to 70 percent\n  isOnboarding: boolean;\n  queuedUserPrompt?: string | null;\n  insightsPanelOpen: boolean;\n  dateRange: DateRange;\n  analyzedData: {\n    hasEDA: boolean;\n    hasForecasting: boolean;\n    hasInsights: boolean;\n    hasPreprocessing: boolean;\n    hasCapacityPlanning: boolean;\n    lastAnalysisDate: Date | null;\n    lastAnalysisType: 'eda' | 'forecasting' | 'comparative' | 'whatif' | null;\n    outliers: OutlierData[];\n    forecastData: ForecastData[];\n  };\n  forecastMetrics?: {\n    mape?: number;\n    model?: string;\n    accuracy?: number;\n    rmse?: number;\n    mae?: number;\n    [key: string]: any;\n  };\n  capacityPlanning: {\n    enabled: boolean;\n    status: 'idle' | 'calculating' | 'completed' | 'error';\n    assumptions: {\n      aht: number;\n      occupancy: number;\n      backlog: number;\n      attrition: number;\n      volumeMix: number;\n      inOfficeShrinkage: number;\n      outOfOfficeShrinkage: number;\n    };\n    dateRange: {\n      startDate: string | null;\n      endDate: string | null;\n      autoPopulated: boolean;\n    };\n    results: {\n      weeklyHC: Array<{\n        week: string;\n        volume: number;\n        requiredHC: number;\n        dataType: 'actual' | 'forecasted';\n      }>;\n      summary: {\n        totalHC: number;\n        avgHC: number;\n        minHC: { value: number; week: string };\n        maxHC: { value: number; week: string };\n        historicalAvg: number;\n        forecastedAvg: number;\n      } | null;\n    };\n    errors: string[];\n  };\n  conversationContext: {\n    topics: string[]; // for example, ['data_exploration', 'forecasting', 'modeling']\n    currentPhase: 'onboarding' | 'exploration' | 'analysis' | 'modeling' | 'forecasting' | 'insights';\n    completedTasks: string[];\n    userIntent: string; // Description of what user wants to achieve\n  };\n  userActivity: {\n    hasSelectedBU: boolean;\n    hasSelectedLOB: boolean;\n    hasUploadedData: boolean;\n    hasPerformedEDA: boolean;\n    hasPreprocessed: boolean;\n    hasTrainedModels: boolean;\n    hasGeneratedForecast: boolean;\n    hasViewedInsights: boolean;\n    hasCalculatedCapacity: boolean;\n    lastAction: string;\n    lastAgentType?: string;\n    colorTheme?: string;\n  };\n};\n\ntype Action =\n  | { type: 'SET_API_KEY'; payload: string }\n  | { type: 'SET_SELECTED_BU'; payload: BusinessUnit | null }\n  | { type: 'SET_SELECTED_LOB'; payload: LineOfBusiness | null }\n  | { type: 'ADD_MESSAGE'; payload: ChatMessage }\n  | { type: 'REMOVE_MESSAGE'; payload: string }\n  | { type: 'UPDATE_LAST_MESSAGE'; payload: Partial<ChatMessage> }\n  | { type: 'STREAM_UPDATE_LAST_MESSAGE'; payload: { contentChunk: string } }\n  | { type: 'SET_PROCESSING'; payload: boolean }\n  | { type: 'SET_THINKING_STEPS'; payload: string[] }\n  | { type: 'ADD_THINKING_STEP'; payload: string }\n  | { type: 'CLEAR_THINKING_STEPS' }\n  | { type: 'UPDATE_WORKFLOW_STEP'; payload: Partial<WorkflowStep> & { id: string } }\n  | { type: 'SET_WORKFLOW'; payload: WorkflowStep[] }\n  | { type: 'RESET_WORKFLOW' }\n  | { type: 'SET_AGENT_MONITOR_OPEN'; payload: boolean }\n  | { type: 'ADD_BU'; payload: BUCreationData }\n  | { type: 'ADD_LOB'; payload: LOBCreationData }\n  | { type: 'UPLOAD_DATA', payload: { lobId: string, file: File } }\n  | { type: 'UPDATE_LOB_FORECAST'; payload: { lobId: string, forecastData: WeeklyData[], forecastMetrics: any } }\n  | { type: 'UPDATE_LOB_WITH_FORECAST_DATA'; payload: { lobId: string, forecastData: WeeklyData[], forecastMetrics: any } }\n  | { type: 'TRACK_ACTIVITY'; payload: Partial<AppState['userActivity']> }\n  | { type: 'TOGGLE_VISUALIZATION', payload: { messageId: string } }\n  | { type: 'SET_DATA_PANEL_OPEN'; payload: boolean }\n  | { type: 'SET_DATA_PANEL_MODE'; payload: 'chart' | 'table' | 'menu' }\n  | { type: 'SET_DATA_PANEL_TARGET'; payload: 'units' | 'revenue' }\n  | { type: 'SET_DATA_PANEL_WIDTH'; payload: number }\n  | { type: 'SET_INSIGHTS_PANEL_OPEN'; payload: boolean }\n  | { type: 'SET_DATE_RANGE'; payload: DateRange }\n  | { type: 'UPDATE_ANALYZED_DATA'; payload: Partial<AppState['analyzedData']> }\n  | { type: 'SET_ANALYZED_DATA'; payload: Partial<AppState['analyzedData']> }\n  | { type: 'RESET_ANALYZED_DATA' }\n  | { type: 'SET_FORECAST_METRICS'; payload: { mape?: number; model?: string; accuracy?: number; rmse?: number; mae?: number; [key: string]: any } }\n  | { type: 'END_ONBOARDING' }\n  | { type: 'QUEUE_USER_PROMPT'; payload: string }\n  | { type: 'CLEAR_QUEUED_PROMPT' }\n  | { type: 'GENERATE_REPORT'; payload: { messageId: string; reportData: any; agentType: string; timestamp: string } }\n  | {\n    type: 'UPDATE_CONVERSATION_CONTEXT'; payload: {\n      topics?: string[];\n      currentPhase?: string;\n      completedTasks?: string[];\n      userIntent?: string;\n    }\n  }\n  | { type: 'SET_BUSINESS_UNITS'; payload: BusinessUnit[] }\n  | { type: 'SET_CAPACITY_ASSUMPTIONS'; payload: AppState['capacityPlanning']['assumptions'] }\n  | { type: 'SET_CAPACITY_DATE_RANGE'; payload: { startDate: string; endDate: string } }\n  | { type: 'UPDATE_CAPACITY_RESULTS'; payload: AppState['capacityPlanning']['results'] }\n  | { type: 'SET_CAPACITY_STATUS'; payload: 'idle' | 'calculating' | 'completed' | 'error' }\n  | { type: 'SET_CAPACITY_ERRORS'; payload: string[] }\n  | { type: 'ENABLE_CAPACITY_PLANNING' }\n  | { type: 'SET_COLOR_THEME'; payload: string };\n\n\nconst initialState: AppState = {\n  apiKey: null,\n  businessUnits: [],\n  selectedBu: null,\n  selectedLob: null,\n  messages: [\n    {\n      id: '1',\n      role: 'assistant',\n      content: \"Hello! I'm your BI forecasting assistant. Select a Business Unit and Line of Business to get started.\",\n      suggestions: ['Create Business Unit', 'Create Line of Business', 'View existing BU/LOBs', 'Help me get started']\n    },\n  ],\n  workflow: [],\n  isProcessing: false,\n  thinkingSteps: [],\n  agentMonitor: {\n    isOpen: false,\n  },\n  dataPanelOpen: false,\n  dataPanelMode: 'chart',\n  dataPanelTarget: 'units',\n  dataPanelWidthPct: 40,\n  isOnboarding: true,\n  queuedUserPrompt: null,\n  insightsPanelOpen: false,\n  dateRange: {\n    start: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000), // 90 days ago\n    end: new Date(),\n    preset: 'last_90_days'\n  },\n  analyzedData: {\n    hasEDA: false,\n    hasForecasting: false,\n    hasInsights: false,\n    hasPreprocessing: false,\n    hasCapacityPlanning: false,\n    lastAnalysisDate: null,\n    lastAnalysisType: null,\n    outliers: [],\n    forecastData: []\n  },\n  capacityPlanning: {\n    enabled: false,\n    status: 'idle',\n    assumptions: {\n      aht: 50.0,\n      occupancy: 75.0,\n      backlog: 25.0,\n      attrition: 0.7,\n      volumeMix: 30.0,\n      inOfficeShrinkage: 10.0,\n      outOfOfficeShrinkage: 20.0\n    },\n    dateRange: {\n      startDate: null,\n      endDate: null,\n      autoPopulated: false\n    },\n    results: {\n      weeklyHC: [],\n      summary: null\n    },\n    errors: []\n  },\n  conversationContext: {\n    topics: [],\n    currentPhase: 'onboarding',\n    completedTasks: [],\n    userIntent: ''\n  },\n  userActivity: {\n    hasSelectedBU: false,\n    hasSelectedLOB: false,\n    hasUploadedData: false,\n    hasPerformedEDA: false,\n    hasPreprocessed: false,\n    hasTrainedModels: false,\n    hasGeneratedForecast: false,\n    hasViewedInsights: false,\n    hasCalculatedCapacity: false,\n    lastAction: 'initial',\n    lastAgentType: undefined,\n    colorTheme: 'default'\n  }\n};\n\nfunction appReducer(state: AppState, action: Action): AppState {\n  switch (action.type) {\n    case 'SET_API_KEY':\n      return { ...state, apiKey: action.payload };\n    case 'SET_SELECTED_BU':\n      // Don't clear workflow when selecting BU - let it continue if active\n      return { \n        ...state, \n        selectedBu: action.payload, \n        selectedLob: action.payload?.lobs[0] || null,\n        userActivity: {\n          ...state.userActivity,\n          hasSelectedBU: !!action.payload,\n          hasSelectedLOB: !!(action.payload?.lobs[0]),\n          lastAction: 'select_bu'\n        }\n      };\n    case 'SET_SELECTED_LOB':\n      // Don't clear workflow when selecting LOB - let it continue if active\n      return {\n        ...state,\n        selectedLob: action.payload,\n        // Keep workflow and processing state\n        // Reset analyzed data for new LOB\n        analyzedData: {\n          hasEDA: false,\n          hasForecasting: false,\n          hasInsights: false,\n          hasPreprocessing: false,\n          hasCapacityPlanning: false,\n          lastAnalysisDate: null,\n          lastAnalysisType: null,\n          outliers: [],\n          forecastData: []\n        },\n        userActivity: {\n          ...state.userActivity,\n          hasSelectedLOB: !!action.payload,\n          hasUploadedData: action.payload?.hasData || false,\n          // Reset analysis flags when switching LOB\n          hasPerformedEDA: false,\n          hasPreprocessed: false,\n          hasTrainedModels: false,\n          hasGeneratedForecast: false,\n          hasViewedInsights: false,\n          hasCalculatedCapacity: false,\n          lastAction: 'select_lob'\n        }\n      };\n    case 'ADD_MESSAGE': {\n      const messages = state.messages.filter(m => !m.isTyping || action.payload.isTyping);\n      return { ...state, messages: [...messages, action.payload] };\n    }\n    case 'REMOVE_MESSAGE':\n      return { \n        ...state, \n        messages: state.messages.filter(m => m.id !== action.payload) \n      };\n    case 'UPDATE_LAST_MESSAGE':\n      const updatedMessages = [...state.messages];\n      const lastMessageIndex = updatedMessages.length - 1;\n      if (lastMessageIndex >= 0) {\n        updatedMessages[lastMessageIndex] = { ...updatedMessages[lastMessageIndex], ...action.payload };\n      }\n      return { ...state, messages: updatedMessages };\n    case 'STREAM_UPDATE_LAST_MESSAGE': {\n      const updatedMessages = [...state.messages];\n      const lastMessageIndex = updatedMessages.length - 1;\n      if (lastMessageIndex >= 0) {\n        const lastMessage = updatedMessages[lastMessageIndex];\n        updatedMessages[lastMessageIndex] = {\n          ...lastMessage,\n          content: lastMessage.content + action.payload.contentChunk,\n        };\n      }\n      return { ...state, messages: updatedMessages };\n    }\n    case 'SET_PROCESSING':\n      return { ...state, isProcessing: action.payload };\n    case 'SET_THINKING_STEPS':\n      return { ...state, thinkingSteps: action.payload };\n    case 'ADD_THINKING_STEP':\n      return { ...state, thinkingSteps: [...state.thinkingSteps, action.payload] };\n    case 'CLEAR_THINKING_STEPS':\n      return { ...state, thinkingSteps: [] };\n    case 'UPDATE_WORKFLOW_STEP':\n      const newWorkflow = state.workflow.map(step =>\n        step.id === action.payload.id ? { ...step, ...action.payload } : step\n      );\n      const isStillProcessing = newWorkflow.some(step => step.status === 'active' || step.status === 'pending');\n      const allCompleted = newWorkflow.every(step => step.status === 'completed');\n      return {\n        ...state,\n        workflow: newWorkflow,\n        isProcessing: allCompleted ? false : isStillProcessing,\n      };\n    case 'SET_WORKFLOW':\n      return { ...state, workflow: action.payload, isProcessing: true };\n    case 'RESET_WORKFLOW':\n      return { ...state, workflow: [], isProcessing: false };\n    case 'SET_AGENT_MONITOR_OPEN':\n      return { ...state, agentMonitor: { ...state.agentMonitor, isOpen: action.payload } };\n    case 'SET_DATA_PANEL_OPEN':\n      return { ...state, dataPanelOpen: action.payload };\n    case 'SET_DATA_PANEL_MODE':\n      return { ...state, dataPanelMode: action.payload };\n    case 'SET_DATA_PANEL_TARGET':\n      return { ...state, dataPanelTarget: action.payload };\n    case 'SET_DATA_PANEL_WIDTH': {\n      const w = Math.min(70, Math.max(20, Math.round(action.payload)));\n      return { ...state, dataPanelWidthPct: w };\n    }\n    case 'SET_INSIGHTS_PANEL_OPEN':\n      return { ...state, insightsPanelOpen: action.payload };\n    case 'SET_DATE_RANGE':\n      return { ...state, dateRange: action.payload };\n    case 'UPDATE_ANALYZED_DATA':\n      return {\n        ...state,\n        analyzedData: {\n          ...state.analyzedData,\n          ...action.payload,\n          lastAnalysisDate: new Date()\n        }\n      };\n    case 'SET_ANALYZED_DATA':\n      return {\n        ...state,\n        analyzedData: {\n          ...state.analyzedData,\n          ...action.payload,\n          lastAnalysisDate: new Date()\n        }\n      };\n    case 'RESET_ANALYZED_DATA':\n      return {\n        ...state,\n        analyzedData: {\n          hasEDA: false,\n          hasForecasting: false,\n          hasInsights: false,\n          hasPreprocessing: false,\n          hasCapacityPlanning: false,\n          lastAnalysisDate: null,\n          lastAnalysisType: null,\n          outliers: [],\n          forecastData: []\n        },\n        forecastMetrics: undefined\n      };\n    case 'SET_FORECAST_METRICS':\n      return {\n        ...state,\n        forecastMetrics: action.payload\n      };\n    case 'END_ONBOARDING':\n      return { ...state, isOnboarding: false };\n    case 'QUEUE_USER_PROMPT':\n      return { ...state, queuedUserPrompt: action.payload };\n    case 'CLEAR_QUEUED_PROMPT':\n      return { ...state, queuedUserPrompt: null };\n    case 'ADD_BU': {\n      const now = new Date();\n      const newBu: BusinessUnit = {\n        id: `bu-${crypto.randomUUID()}`,\n        name: action.payload.name,\n        description: action.payload.description,\n        code: action.payload.code,\n        startDate: action.payload.startDate,\n        displayName: action.payload.displayName,\n        color: getRandomColor(),\n        lobs: [],\n        createdDate: now,\n        updatedDate: now,\n        status: 'active',\n      };\n\n      // Add professional success message\n      const successMessage: ChatMessage = {\n        id: crypto.randomUUID(),\n        role: 'assistant',\n        content: `✅ **Business Unit \"${action.payload.name}\" created successfully!**\\n\\nYour new Business Unit is now ready for use. You can start adding Lines of Business to organize your forecasting data.`,\n        suggestions: [\n          'Add Line of Business',\n          'Upload Data',\n          'View All Business Units'\n        ]\n      };\n\n      return {\n        ...state,\n        businessUnits: [...state.businessUnits, newBu],\n        messages: [...state.messages, successMessage]\n      };\n    }\n    case 'ADD_LOB': {\n      const now = new Date();\n      const newLob: LineOfBusiness = {\n        id: `lob-${crypto.randomUUID()}`,\n        name: action.payload.name,\n        description: action.payload.description,\n        code: action.payload.code,\n        businessUnitId: action.payload.businessUnitId,\n        startDate: action.payload.startDate,\n        hasData: false,\n        dataUploaded: null,\n        recordCount: 0,\n        createdDate: now,\n        updatedDate: now,\n        status: 'active',\n      };\n\n      const parentBU = state.businessUnits.find(bu => bu.id === action.payload.businessUnitId);\n\n      // Add professional success message\n      const successMessage: ChatMessage = {\n        id: crypto.randomUUID(),\n        role: 'assistant',\n        content: `✅ **Line of Business \"${action.payload.name}\" created successfully!**\\n\\nYour new LOB has been added to ${parentBU?.name || 'the selected Business Unit'}. You can now upload data to start forecasting.`,\n        suggestions: [\n          'Upload Data for this LOB',\n          'Create Another LOB',\n          'View LOB Details'\n        ]\n      };\n\n      return {\n        ...state,\n        businessUnits: state.businessUnits.map(bu =>\n          bu.id === action.payload.businessUnitId\n            ? { ...bu, lobs: [...bu.lobs, newLob], updatedDate: now }\n            : bu\n        ),\n        messages: [...state.messages, successMessage]\n      };\n    }\n    case 'UPLOAD_DATA': {\n      // TODO: Parse actual file data and send to backend\n      // For now, mark as uploaded and let backend handle the data\n      const businessUnitsWithData = state.businessUnits.map(bu => ({\n        ...bu,\n        lobs: bu.lobs.map(lob =>\n          lob.id === action.payload.lobId\n            ? {\n              ...lob,\n              hasData: true,\n              file: action.payload.file,\n              recordCount: 0, // Will be set after backend processing\n              dataUploaded: new Date(),\n              dataQuality: {\n                completeness: 0, // Will be calculated from actual data\n                outliers: 0, // Will be detected from actual data\n                seasonality: 'unknown',\n                trend: 'unknown'\n              }\n            }\n            : lob\n        )\n      }));\n      const updatedLob = businessUnitsWithData.flatMap(bu => bu.lobs).find(lob => lob.id === action.payload.lobId);\n      const newMessages: ChatMessage[] = [...state.messages];\n      if (updatedLob) {\n        newMessages.push({\n          id: crypto.randomUUID(),\n          role: 'assistant',\n          content: `I've uploaded \"${action.payload.file.name}\" and analyzed the data for the ${updatedLob.name} LOB. It contains ${updatedLob.recordCount} records.`,\n          suggestions: ['Explore data quality', 'Analyze patterns and trends', 'Check for seasonality', 'Run forecast analysis']\n        });\n      }\n      return { \n        ...state, \n        businessUnits: businessUnitsWithData, \n        messages: newMessages,\n        userActivity: {\n          ...state.userActivity,\n          hasUploadedData: true,\n          lastAction: 'upload_data'\n        }\n      };\n    }\n    case 'UPDATE_LOB_FORECAST': {\n      console.log('📊 UPDATE_LOB_FORECAST action received:', {\n        lobId: action.payload.lobId,\n        forecastDataLength: action.payload.forecastData?.length,\n        forecastMetrics: action.payload.forecastMetrics\n      });\n      \n      const updatedBusinessUnits = state.businessUnits.map(bu => ({\n        ...bu,\n        lobs: bu.lobs.map(lob =>\n          lob.id === action.payload.lobId\n            ? {\n                ...lob,\n                timeSeriesData: action.payload.forecastData,\n                forecastMetrics: action.payload.forecastMetrics\n              }\n            : lob\n        )\n      }));\n      \n      const updatedSelectedLob = state.selectedLob?.id === action.payload.lobId\n        ? {\n            ...state.selectedLob,\n            timeSeriesData: action.payload.forecastData,\n            forecastMetrics: action.payload.forecastMetrics\n          }\n        : state.selectedLob;\n      \n      console.log('✅ Updated selectedLob with forecast metrics:', updatedSelectedLob?.forecastMetrics);\n      \n      // Auto-enable capacity planning if forecast successful\n      const forecastData = action.payload.forecastData;\n      const hasForecastData = forecastData && forecastData.length > 0;\n      \n      let capacityPlanningUpdate = state.capacityPlanning;\n      \n      if (hasForecastData) {\n        console.log('🔓 Auto-enabling capacity planning after forecast...');\n        \n        // Calculate auto-populated date range\n        const historicalData = forecastData.filter(d => !d.Forecast || d.Forecast === 0);\n        const forecastedData = forecastData.filter(d => d.Forecast && d.Forecast > 0);\n        \n        let startDate: string | null = null;\n        let endDate: string | null = null;\n        \n        if (historicalData.length > 0) {\n          // Get last 5 weeks of historical data\n          const sortedHistorical = [...historicalData].sort((a, b) => \n            new Date(a.Date).getTime() - new Date(b.Date).getTime()\n          );\n          const lastHistoricalIndex = sortedHistorical.length - 1;\n          const startIndex = Math.max(0, lastHistoricalIndex - 4); // Last 5 weeks (index 0-based)\n          startDate = new Date(sortedHistorical[startIndex].Date).toISOString().split('T')[0];\n        }\n        \n        if (forecastedData.length > 0) {\n          // Get last forecasted week\n          const sortedForecast = [...forecastedData].sort((a, b) => \n            new Date(a.Date).getTime() - new Date(b.Date).getTime()\n          );\n          endDate = new Date(sortedForecast[sortedForecast.length - 1].Date).toISOString().split('T')[0];\n        }\n        \n        capacityPlanningUpdate = {\n          ...state.capacityPlanning,\n          enabled: true,\n          dateRange: {\n            startDate,\n            endDate,\n            autoPopulated: true\n          }\n        };\n        \n        console.log('✅ Capacity planning enabled:', capacityPlanningUpdate);\n      }\n      \n      return {\n        ...state,\n        businessUnits: updatedBusinessUnits,\n        selectedLob: updatedSelectedLob,\n        capacityPlanning: capacityPlanningUpdate\n      };\n    }\n    case 'UPDATE_LOB_WITH_FORECAST_DATA': {\n      console.log('📊 UPDATE_LOB_WITH_FORECAST_DATA action received:', {\n        lobId: action.payload.lobId,\n        forecastDataLength: action.payload.forecastData?.length,\n        forecastMetrics: action.payload.forecastMetrics\n      });\n      \n      const updatedBusinessUnits = state.businessUnits.map(bu => ({\n        ...bu,\n        lobs: bu.lobs.map(lob =>\n          lob.id === action.payload.lobId\n            ? {\n                ...lob,\n                timeSeriesData: action.payload.forecastData,\n                forecastMetrics: action.payload.forecastMetrics\n              }\n            : lob\n        )\n      }));\n      \n      const updatedSelectedLob = state.selectedLob?.id === action.payload.lobId\n        ? {\n            ...state.selectedLob,\n            timeSeriesData: action.payload.forecastData,\n            forecastMetrics: action.payload.forecastMetrics\n          }\n        : state.selectedLob;\n      \n      console.log('✅ Updated selectedLob with forecast metrics:', updatedSelectedLob?.forecastMetrics);\n      \n      // Auto-enable capacity planning if forecast successful\n      const forecastData = action.payload.forecastData;\n      const hasForecastData = forecastData && forecastData.length > 0;\n      \n      let capacityPlanningUpdate = state.capacityPlanning;\n      \n      if (hasForecastData) {\n        // Calculate auto-populated date range\n        const historicalData = forecastData.filter(d => !d.Forecast || d.Forecast === 0);\n        const forecastedData = forecastData.filter(d => d.Forecast && d.Forecast > 0);\n        \n        let startDate: string | null = null;\n        let endDate: string | null = null;\n        \n        if (historicalData.length > 0) {\n          // Get last 5 weeks of historical data\n          const sortedHistorical = [...historicalData].sort((a, b) => \n            new Date(a.Date).getTime() - new Date(b.Date).getTime()\n          );\n          const lastHistoricalIndex = sortedHistorical.length - 1;\n          const startIndex = Math.max(0, lastHistoricalIndex - 4); // Last 5 weeks (index 0-based)\n          startDate = new Date(sortedHistorical[startIndex].Date).toISOString().split('T')[0];\n        }\n        \n        if (forecastedData.length > 0) {\n          // Get last forecasted week\n          const sortedForecast = [...forecastedData].sort((a, b) => \n            new Date(a.Date).getTime() - new Date(b.Date).getTime()\n          );\n          endDate = new Date(sortedForecast[sortedForecast.length - 1].Date).toISOString().split('T')[0];\n        }\n        \n        capacityPlanningUpdate = {\n          ...state.capacityPlanning,\n          enabled: true,\n          dateRange: {\n            startDate,\n            endDate,\n            autoPopulated: true\n          }\n        };\n      }\n      \n      return {\n        ...state,\n        businessUnits: updatedBusinessUnits,\n        selectedLob: updatedSelectedLob,\n        analyzedData: {\n          ...state.analyzedData,\n          hasForecasting: true,\n          forecastData: action.payload.forecastData.filter(d => d.Forecast && d.Forecast > 0),\n          lastAnalysisDate: new Date(),\n          lastAnalysisType: 'forecasting'\n        },\n        userActivity: {\n          ...state.userActivity,\n          hasGeneratedForecast: true,\n          lastAction: 'generate_forecast'\n        },\n        capacityPlanning: capacityPlanningUpdate\n      };\n    }\n    case 'TOGGLE_VISUALIZATION': {\n      return {\n        ...state,\n        messages: state.messages.map(msg => {\n          if (msg.id === action.payload.messageId && msg.visualization) {\n            return { ...msg, visualization: { ...msg.visualization, isShowing: !msg.visualization.isShowing } };\n          }\n          return msg;\n        })\n      };\n    }\n    case 'GENERATE_REPORT': {\n      // Placeholder for report generation logic\n      // For now, log the report generation activity\n      console.log('Generating report for message:', action.payload.messageId);\n      // Could add logic to save report, update state, etc.\n      return state;\n    }\n    case 'TRACK_ACTIVITY': {\n      return {\n        ...state,\n        userActivity: {\n          ...state.userActivity,\n          ...action.payload\n        }\n      };\n    }\n    case 'UPDATE_CONVERSATION_CONTEXT':\n      return {\n        ...state,\n        conversationContext: {\n          ...state.conversationContext,\n          ...action.payload\n        }\n      };\n\n    case 'SET_BUSINESS_UNITS':\n      return { ...state, businessUnits: action.payload };\n\n    case 'SET_CAPACITY_ASSUMPTIONS':\n      return {\n        ...state,\n        capacityPlanning: {\n          ...state.capacityPlanning,\n          assumptions: action.payload,\n          // Clear errors related to assumptions\n          errors: state.capacityPlanning.errors.filter(e => \n            !e.includes('AHT') && \n            !e.includes('Occupancy') && \n            !e.includes('Backlog') && \n            !e.includes('Volume Mix') && \n            !e.includes('Shrinkage') && \n            !e.includes('Attrition')\n          )\n        }\n      };\n\n    case 'SET_CAPACITY_DATE_RANGE':\n      return {\n        ...state,\n        capacityPlanning: {\n          ...state.capacityPlanning,\n          dateRange: {\n            startDate: action.payload.startDate,\n            endDate: action.payload.endDate,\n            autoPopulated: false\n          }\n        }\n      };\n\n    case 'UPDATE_CAPACITY_RESULTS':\n      return {\n        ...state,\n        capacityPlanning: {\n          ...state.capacityPlanning,\n          results: action.payload,\n          status: 'completed',\n          errors: []\n        },\n        analyzedData: {\n          ...state.analyzedData,\n          hasCapacityPlanning: true\n        },\n        userActivity: {\n          ...state.userActivity,\n          hasCalculatedCapacity: true\n        }\n      };\n\n    case 'SET_CAPACITY_STATUS':\n      return {\n        ...state,\n        capacityPlanning: {\n          ...state.capacityPlanning,\n          status: action.payload\n        }\n      };\n\n    case 'SET_CAPACITY_ERRORS':\n      return {\n        ...state,\n        capacityPlanning: {\n          ...state.capacityPlanning,\n          errors: action.payload,\n          status: 'error'\n        }\n      };\n\n    case 'ENABLE_CAPACITY_PLANNING': {\n      // Calculate auto-populated date range from current state\n      const historicalData = state.selectedLob?.timeSeriesData?.filter(d => !d.Forecast || d.Forecast === 0) || [];\n      const forecastedData = state.selectedLob?.timeSeriesData?.filter(d => d.Forecast && d.Forecast > 0) || [];\n      \n      let startDate: string | null = null;\n      let endDate: string | null = null;\n      \n      if (historicalData.length > 0) {\n        // Get last 5 weeks of historical data\n        const sortedHistorical = [...historicalData].sort((a, b) => \n          new Date(a.Date).getTime() - new Date(b.Date).getTime()\n        );\n        const lastHistoricalIndex = sortedHistorical.length - 1;\n        const startIndex = Math.max(0, lastHistoricalIndex - 4); // Last 5 weeks\n        startDate = new Date(sortedHistorical[startIndex].Date).toISOString().split('T')[0];\n      }\n      \n      if (forecastedData.length > 0) {\n        // Get last forecasted week\n        const sortedForecast = [...forecastedData].sort((a, b) => \n          new Date(a.Date).getTime() - new Date(b.Date).getTime()\n        );\n        endDate = new Date(sortedForecast[sortedForecast.length - 1].Date).toISOString().split('T')[0];\n      }\n      \n      return {\n        ...state,\n        capacityPlanning: {\n          ...state.capacityPlanning,\n          enabled: true,\n          status: 'idle',\n          dateRange: {\n            startDate,\n            endDate,\n            autoPopulated: true\n          }\n        }\n      };\n    }\n    case 'SET_COLOR_THEME':\n      return {\n        ...state,\n        userActivity: {\n          ...state.userActivity,\n          colorTheme: action.payload\n        }\n      };\n    default:\n      return state;\n  }\n}\n\ntype AppContextType = {\n  state: AppState;\n  dispatch: React.Dispatch<Action>;\n};\n\nconst AppContext = createContext<AppContextType | undefined>(undefined);\n\nexport function AppProvider({ children }: { children: React.ReactNode }) {\n  const [state, dispatch] = useReducer(appReducer, initialState);\n  const [hasLoadedData, setHasLoadedData] = React.useState(false);\n\n  // Load business units from backend on mount\n  useEffect(() => {\n    const loadBusinessUnits = async () => {\n      // Check if authenticated\n      const isAuthenticated = typeof window !== 'undefined'\n        ? localStorage.getItem('isAuthenticated') === 'true'\n        : false;\n\n      // Don't reload if we already have data or if forecast data exists\n      const hasForecastData = state.businessUnits.some(bu => \n        bu.lobs.some(lob => lob.forecastMetrics || (lob.timeSeriesData && lob.timeSeriesData.some(d => d.Forecast && d.Forecast > 0)))\n      );\n\n      if (!isAuthenticated || hasLoadedData || hasForecastData) {\n        return;\n      }\n\n      try {\n        dispatch({ type: 'SET_PROCESSING', payload: true });\n\n        // Show loading message\n        dispatch({\n          type: 'ADD_MESSAGE',\n          payload: {\n            id: 'loading-bu-lob',\n            role: 'assistant',\n            content: '🔄 Loading your Business Units and Lines of Business from the backend...',\n            isTyping: true,\n          },\n        });\n\n        const apiClient = getAPIClient();\n\n        // Get credentials from localStorage or use defaults\n        const username = typeof window !== 'undefined'\n          ? localStorage.getItem('zentere_username') || 'martin@demo.com'\n          : 'martin@demo.com';\n        const password = typeof window !== 'undefined'\n          ? localStorage.getItem('zentere_password') || 'demo'\n          : 'demo';\n\n        console.log('🔐 Authenticating with:', username);\n\n        // Authenticate\n        await apiClient.authenticate(username, password);\n\n        console.log('✅ Authentication successful, fetching data...');\n\n        // Fetch business units with LOBs and their data\n        const businessUnits = await apiClient.getBusinessUnitsWithLOBs();\n\n        console.log('📊 Loaded BUs:', businessUnits.length, businessUnits);\n        console.log('📊 First BU structure:', businessUnits[0]);\n        console.log('📊 First BU LOBs:', businessUnits[0]?.lobs);\n\n        dispatch({ type: 'SET_BUSINESS_UNITS', payload: businessUnits });\n        setHasLoadedData(true);\n\n        console.log('✅ State updated with business units');\n\n        // Update the loading message with success\n        const totalLobs = businessUnits.reduce((sum, bu) => sum + bu.lobs.length, 0);\n        const lobsWithData = businessUnits.reduce(\n          (sum, bu) => sum + bu.lobs.filter(lob => lob.hasData).length,\n          0\n        );\n\n        dispatch({\n          type: 'UPDATE_LAST_MESSAGE',\n          payload: {\n            content: `✅ **Successfully loaded from backend!**\\n\\n📊 **Summary:**\\n• ${businessUnits.length} Business Units\\n• ${totalLobs} Lines of Business\\n• ${lobsWithData} LOBs with data\\n\\nSelect a Business Unit and Line of Business to get started with analysis.`,\n            isTyping: false,\n            suggestions: ['View all Business Units', 'Create new Business Unit', 'Upload data to LOB'],\n          },\n        });\n      } catch (error) {\n        console.error('❌ Failed to load business units:', error);\n\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n        const isNetworkError = errorMessage.includes('Network error') || errorMessage.includes('fetch');\n\n        dispatch({\n          type: 'UPDATE_LAST_MESSAGE',\n          payload: {\n            content: `❌ **Failed to load data from backend**\\n\\n**Error:** ${errorMessage}\\n\\n${isNetworkError ? '**Possible causes:**\\n• API server is not accessible\\n• CORS is blocking the request\\n• Network connection issue\\n\\n**Solutions:**\\n• Check if the API is running at https://app-api-dev.zentere.com\\n• Try using a VPN or different network\\n• Contact your administrator to enable CORS\\n• Use demo data for testing' : 'Please check your credentials and try again.'}\\n\\n**Note:** You can continue using the app with demo data by creating Business Units manually.`,\n            isTyping: false,\n            suggestions: ['Create Business Unit', 'Create Line of Business', 'Contact Support'],\n          },\n        });\n      } finally {\n        dispatch({ type: 'SET_PROCESSING', payload: false });\n      }\n    };\n\n    loadBusinessUnits();\n  }, []); // Run once on mount\n\n  return (\n    <AppContext.Provider value={{ state, dispatch }}>\n      {children}\n    </AppContext.Provider>\n  );\n}\n\nexport function useApp() {\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 824, "column": 0}, "map": {"version":3,"sources":["file:///Users/martinprabhu/Downloads/support-operations-centre/new_app/src/components/dashboard/theme-toggle.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { Sun, Moon, Monitor } from 'lucide-react';\nimport { useTheme } from '@/components/theme-context';\n\nexport const ThemeToggle = () => {\n    const [mounted, setMounted] = useState(false);\n    const { themeMode, setThemeMode, isDarkTheme } = useTheme();\n\n    useEffect(() => {\n        setMounted(true);\n    }, []);\n\n    const toggleTheme = () => {\n        if (themeMode === 'system') {\n            setThemeMode(isDarkTheme ? 'light' : 'dark');\n        } else {\n            setThemeMode(themeMode === 'light' ? 'dark' : 'light');\n        }\n    };\n\n    const getIcon = () => {\n        if (themeMode === 'system') {\n            return <Monitor className=\"w-5 h-5\" />;\n        }\n        return isDarkTheme ? <Sun className=\"w-5 h-5\" /> : <Moon className=\"w-5 h-5\" />;\n    };\n\n    // Don't render anything until mounted to avoid hydration mismatch\n    if (!mounted) {\n        return (\n            <button className=\"p-2 rounded-lg bg-white/10 hover:bg-white/20 transition-colors\">\n                <Sun className=\"w-5 h-5\" />\n            </button>\n        );\n    }\n\n    return (\n        <button\n            onClick={toggleTheme}\n            className=\"p-2 rounded-lg bg-white/10 hover:bg-white/20 transition-colors\"\n            title={`Current: ${themeMode} (${isDarkTheme ? 'dark' : 'light'})`}\n        >\n            {getIcon()}\n        </button>\n    );\n};"],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AAAA;AACA;AAJA;;;;;AAMO,MAAM,cAAc;IACvB,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,EAAE,SAAS,EAAE,YAAY,EAAE,WAAW,EAAE,GAAG,CAAA,GAAA,sIAAA,CAAA,WAAQ,AAAD;IAExD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,WAAW;IACf,GAAG,EAAE;IAEL,MAAM,cAAc;QAChB,IAAI,cAAc,UAAU;YACxB,aAAa,cAAc,UAAU;QACzC,OAAO;YACH,aAAa,cAAc,UAAU,SAAS;QAClD;IACJ;IAEA,MAAM,UAAU;QACZ,IAAI,cAAc,UAAU;YACxB,qBAAO,8OAAC,wMAAA,CAAA,UAAO;gBAAC,WAAU;;;;;;QAC9B;QACA,OAAO,4BAAc,8OAAC,gMAAA,CAAA,MAAG;YAAC,WAAU;;;;;iCAAe,8OAAC,kMAAA,CAAA,OAAI;YAAC,WAAU;;;;;;IACvE;IAEA,kEAAkE;IAClE,IAAI,CAAC,SAAS;QACV,qBACI,8OAAC;YAAO,WAAU;sBACd,cAAA,8OAAC,gMAAA,CAAA,MAAG;gBAAC,WAAU;;;;;;;;;;;IAG3B;IAEA,qBACI,8OAAC;QACG,SAAS;QACT,WAAU;QACV,OAAO,CAAC,SAAS,EAAE,UAAU,EAAE,EAAE,cAAc,SAAS,QAAQ,CAAC,CAAC;kBAEjE;;;;;;AAGb","debugId":null}},
    {"offset": {"line": 909, "column": 0}, "map": {"version":3,"sources":["file:///Users/martinprabhu/Downloads/support-operations-centre/new_app/src/components/dashboard/report-viewer.tsx"],"sourcesContent":["\n'use client';\n\nimport React, { useRef } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Download } from 'lucide-react';\nimport jsPDF from 'jspdf';\nimport html2canvas from 'html2canvas';\n\ninterface ReportViewerProps {\n  isOpen: boolean;\n  onOpenChange: (isOpen: boolean) => void;\n  markdownContent: string;\n  isRealData: boolean;\n}\n\n// Basic markdown to HTML converter\nfunction markdownToHtml(markdown: string): string {\n    return markdown\n        .replace(/^# (.*$)/gmi, '<h1 class=\"text-2xl font-bold mb-4 mt-6\">$1</h1>')\n        .replace(/^## (.*$)/gmi, '<h2 class=\"text-xl font-semibold mb-3 mt-5 border-b pb-2\">$1</h2>')\n        .replace(/^### (.*$)/gmi, '<h3 class=\"text-lg font-medium mb-2 mt-4\">$1</h3>')\n        .replace(/\\*\\*(.*)\\*\\*/g, '<strong>$1</strong>')\n        .replace(/\\*(.*)\\*/g, '<em>$1</em>')\n        .replace(/^- (.*$)/gmi, '<li class=\"ml-4 list-disc\">$1</li>')\n        .replace(/`([^`]+)`/g, '<code class=\"bg-muted text-foreground px-1 py-0.5 rounded text-sm\">$1</code>')\n        .replace(/(\\r\\n|\\n){2,}/g, '</p><p>')\n        .replace(/^(?!<h[1-3]>|<li>|<p>)/, '<p>')\n        .replace(/<\\/p>$/, '')\n        .replace(/\\n/g, '<br/>');\n}\n\n\nexport default function ReportViewer({ isOpen, onOpenChange, markdownContent, isRealData }: ReportViewerProps) {\n  const reportContentRef = useRef<HTMLDivElement>(null);\n\n  const handleExportToPdf = () => {\n    const input = reportContentRef.current;\n    if (input) {\n        html2canvas(input, { \n            scale: 2,\n            useCORS: true, \n            backgroundColor: window.getComputedStyle(document.body).backgroundColor === \"rgb(10, 10, 20)\" ? '#0A0A14' : '#FFFFFF'\n        }).then((canvas) => {\n            const imgData = canvas.toDataURL('image/png');\n            const pdf = new jsPDF('p', 'mm', 'a4');\n            const pdfWidth = pdf.internal.pageSize.getWidth();\n            const pdfHeight = pdf.internal.pageSize.getHeight();\n            const canvasWidth = canvas.width;\n            const canvasHeight = canvas.height;\n            const ratio = canvasWidth / pdfWidth;\n            const imgHeight = canvasHeight / ratio;\n            \n            let heightLeft = imgHeight;\n            let position = 0;\n\n            pdf.addImage(imgData, 'PNG', 0, position, pdfWidth, imgHeight);\n            heightLeft -= pdfHeight;\n\n            while (heightLeft > 0) {\n                position = heightLeft - imgHeight;\n                pdf.addPage();\n                pdf.addImage(imgData, 'PNG', 0, position, pdfWidth, imgHeight);\n                heightLeft -= pdfHeight;\n            }\n            pdf.save('report.pdf');\n        });\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-3xl h-[90vh] flex flex-col\">\n        <DialogHeader>\n          <DialogTitle>Generated Analysis Report</DialogTitle>\n        </DialogHeader>\n        <div className=\"flex-1 min-h-0 bg-background\">\n          <ScrollArea className=\"h-full rounded-md border\">\n            {!isRealData ? (\n              <div className=\"p-6 text-destructive text-center\">\n                <strong>Report Unavailable</strong>\n                <div>\n                  This report cannot be displayed because it was not generated from a validated backend workflow.\n                </div>\n              </div>\n            ) : (\n              <div ref={reportContentRef} className=\"p-6 prose prose-sm max-w-none dark:prose-invert bg-background text-foreground\">\n                <div dangerouslySetInnerHTML={{ __html: markdownToHtml(markdownContent) }} />\n              </div>\n            )}\n          </ScrollArea>\n        </div>\n        <DialogFooter>\n          <Button onClick={handleExportToPdf} disabled={!isRealData}>\n            <Download className=\"mr-2 h-4 w-4\" />\n            Export to PDF\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;;;;;;;;AAiBA,mCAAmC;AACnC,SAAS,eAAe,QAAgB;IACpC,OAAO,SACF,OAAO,CAAC,eAAe,oDACvB,OAAO,CAAC,gBAAgB,qEACxB,OAAO,CAAC,iBAAiB,qDACzB,OAAO,CAAC,iBAAiB,uBACzB,OAAO,CAAC,aAAa,eACrB,OAAO,CAAC,eAAe,sCACvB,OAAO,CAAC,cAAc,gFACtB,OAAO,CAAC,kBAAkB,WAC1B,OAAO,CAAC,0BAA0B,OAClC,OAAO,CAAC,UAAU,IAClB,OAAO,CAAC,OAAO;AACxB;AAGe,SAAS,aAAa,EAAE,MAAM,EAAE,YAAY,EAAE,eAAe,EAAE,UAAU,EAAqB;IAC3G,MAAM,mBAAmB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAkB;IAEhD,MAAM,oBAAoB;QACxB,MAAM,QAAQ,iBAAiB,OAAO;QACtC,IAAI,OAAO;YACP,CAAA,GAAA,yJAAA,CAAA,UAAW,AAAD,EAAE,OAAO;gBACf,OAAO;gBACP,SAAS;gBACT,iBAAiB,OAAO,gBAAgB,CAAC,SAAS,IAAI,EAAE,eAAe,KAAK,oBAAoB,YAAY;YAChH,GAAG,IAAI,CAAC,CAAC;gBACL,MAAM,UAAU,OAAO,SAAS,CAAC;gBACjC,MAAM,MAAM,IAAI,mJAAA,CAAA,UAAK,CAAC,KAAK,MAAM;gBACjC,MAAM,WAAW,IAAI,QAAQ,CAAC,QAAQ,CAAC,QAAQ;gBAC/C,MAAM,YAAY,IAAI,QAAQ,CAAC,QAAQ,CAAC,SAAS;gBACjD,MAAM,cAAc,OAAO,KAAK;gBAChC,MAAM,eAAe,OAAO,MAAM;gBAClC,MAAM,QAAQ,cAAc;gBAC5B,MAAM,YAAY,eAAe;gBAEjC,IAAI,aAAa;gBACjB,IAAI,WAAW;gBAEf,IAAI,QAAQ,CAAC,SAAS,OAAO,GAAG,UAAU,UAAU;gBACpD,cAAc;gBAEd,MAAO,aAAa,EAAG;oBACnB,WAAW,aAAa;oBACxB,IAAI,OAAO;oBACX,IAAI,QAAQ,CAAC,SAAS,OAAO,GAAG,UAAU,UAAU;oBACpD,cAAc;gBAClB;gBACA,IAAI,IAAI,CAAC;YACb;QACJ;IACF;IAEA,qBACE,8OAAC,kIAAA,CAAA,SAAM;QAAC,MAAM;QAAQ,cAAc;kBAClC,cAAA,8OAAC,kIAAA,CAAA,gBAAa;YAAC,WAAU;;8BACvB,8OAAC,kIAAA,CAAA,eAAY;8BACX,cAAA,8OAAC,kIAAA,CAAA,cAAW;kCAAC;;;;;;;;;;;8BAEf,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC,0IAAA,CAAA,aAAU;wBAAC,WAAU;kCACnB,CAAC,2BACA,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;8CAAO;;;;;;8CACR,8OAAC;8CAAI;;;;;;;;;;;iDAKP,8OAAC;4BAAI,KAAK;4BAAkB,WAAU;sCACpC,cAAA,8OAAC;gCAAI,yBAAyB;oCAAE,QAAQ,eAAe;gCAAiB;;;;;;;;;;;;;;;;;;;;;8BAKhF,8OAAC,kIAAA,CAAA,eAAY;8BACX,cAAA,8OAAC,kIAAA,CAAA,SAAM;wBAAC,SAAS;wBAAmB,UAAU,CAAC;;0CAC7C,8OAAC,0MAAA,CAAA,WAAQ;gCAAC,WAAU;;;;;;4BAAiB;;;;;;;;;;;;;;;;;;;;;;;AAOjD","debugId":null}},
    {"offset": {"line": 1079, "column": 0}, "map": {"version":3,"sources":["file:///Users/martinprabhu/Downloads/support-operations-centre/new_app/src/components/dashboard/column-mapping-dialog.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Calendar, Target, TrendingUp, CheckCircle, AlertTriangle } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface ColumnMappingDialogProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  fileName: string;\n  columns: string[];\n  dataPreview: any[];\n  onConfirm: (mapping: ColumnMapping) => void;\n  onCancel: () => void;\n}\n\ninterface ColumnMapping {\n  dateColumn: string;\n  targetColumn: string;\n  regressorColumns: string[];\n}\n\nexport default function ColumnMappingDialog({\n  isOpen,\n  onOpenChange,\n  fileName,\n  columns,\n  dataPreview,\n  onConfirm,\n  onCancel\n}: ColumnMappingDialogProps) {\n  const [mapping, setMapping] = useState<ColumnMapping>({\n    dateColumn: '',\n    targetColumn: '',\n    regressorColumns: []\n  });\n  const [errors, setErrors] = useState<string[]>([]);\n\n  // Auto-detect columns on data change\n  useEffect(() => {\n    if (columns.length > 0) {\n      const autoMapping = autoDetectColumns(columns);\n      setMapping(autoMapping);\n    }\n  }, [columns]);\n\n  const autoDetectColumns = (cols: string[]): ColumnMapping => {\n    const datePatterns = /^(date|time|timestamp|period|day|month|year|dt)$/i;\n    const targetPatterns = /^(target|value|sales|revenue|amount|quantity|demand|cases|units)$/i;\n    const regressorPatterns = /^(orders|marketing|promotion|holiday|external|exogenous|regressor)$/i;\n\n    const dateColumn = cols.find(col => datePatterns.test(col)) || '';\n    const targetColumn = cols.find(col => targetPatterns.test(col)) || '';\n    const regressorColumns = cols.filter(col => \n      regressorPatterns.test(col) || \n      (col.toLowerCase().includes('order') && col !== targetColumn)\n    );\n\n    return {\n      dateColumn,\n      targetColumn,\n      regressorColumns\n    };\n  };\n\n  const validateMapping = (): string[] => {\n    const validationErrors: string[] = [];\n\n    if (!mapping.dateColumn) {\n      validationErrors.push('Date column is required');\n    }\n\n    if (!mapping.targetColumn) {\n      validationErrors.push('Target column is required');\n    }\n\n    if (mapping.dateColumn === mapping.targetColumn) {\n      validationErrors.push('Date and Target columns cannot be the same');\n    }\n\n    if (mapping.regressorColumns.includes(mapping.dateColumn)) {\n      validationErrors.push('Date column cannot be used as a regressor');\n    }\n\n    if (mapping.regressorColumns.includes(mapping.targetColumn)) {\n      validationErrors.push('Target column cannot be used as a regressor');\n    }\n\n    return validationErrors;\n  };\n\n  const handleConfirm = () => {\n    const validationErrors = validateMapping();\n    if (validationErrors.length > 0) {\n      setErrors(validationErrors);\n      return;\n    }\n\n    onConfirm(mapping);\n  };\n\n  const handleRegressorToggle = (column: string) => {\n    setMapping(prev => ({\n      ...prev,\n      regressorColumns: prev.regressorColumns.includes(column)\n        ? prev.regressorColumns.filter(col => col !== column)\n        : [...prev.regressorColumns, column]\n    }));\n  };\n\n  const getColumnIcon = (columnType: 'date' | 'target' | 'regressor') => {\n    switch (columnType) {\n      case 'date': return <Calendar className=\"h-4 w-4\" />;\n      case 'target': return <Target className=\"h-4 w-4\" />;\n      case 'regressor': return <TrendingUp className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getColumnColor = (columnType: 'date' | 'target' | 'regressor') => {\n    switch (columnType) {\n      case 'date': return 'text-blue-600 bg-blue-50 border-blue-200';\n      case 'target': return 'text-green-600 bg-green-50 border-green-200';\n      case 'regressor': return 'text-purple-600 bg-purple-50 border-purple-200';\n    }\n  };\n\n  const availableColumns = columns.filter(col => \n    col !== mapping.dateColumn && col !== mapping.targetColumn\n  );\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] flex flex-col\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <CheckCircle className=\"h-5 w-5 text-green-500\" />\n            Map Data Columns - {fileName}\n          </DialogTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Help me understand your data by mapping columns to their purposes. I've made some suggestions based on column names.\n          </p>\n        </DialogHeader>\n\n        <div className=\"flex-1 overflow-hidden space-y-4\">\n          {/* Column Mapping Section */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {/* Date Column */}\n            <Card className=\"border-blue-200\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm flex items-center gap-2 text-blue-600\">\n                  <Calendar className=\"h-4 w-4\" />\n                  Date Column (Required)\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Select \n                  value={mapping.dateColumn} \n                  onValueChange={(value) => setMapping(prev => ({ ...prev, dateColumn: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select date column\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {columns.map(col => (\n                      <SelectItem key={col} value={col}>{col}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  Column containing dates/timestamps\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Target Column */}\n            <Card className=\"border-green-200\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm flex items-center gap-2 text-green-600\">\n                  <Target className=\"h-4 w-4\" />\n                  Target Column (Required)\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Select \n                  value={mapping.targetColumn} \n                  onValueChange={(value) => setMapping(prev => ({ ...prev, targetColumn: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select target column\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {columns.map(col => (\n                      <SelectItem key={col} value={col}>{col}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  The value you want to forecast\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Regressor Columns */}\n            <Card className=\"border-purple-200\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm flex items-center gap-2 text-purple-600\">\n                  <TrendingUp className=\"h-4 w-4\" />\n                  Regressor Columns (Optional)\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2 max-h-32 overflow-y-auto\">\n                  {availableColumns.map(col => (\n                    <div key={col} className=\"flex items-center space-x-2\">\n                      <input\n                        type=\"checkbox\"\n                        id={`regressor-${col}`}\n                        checked={mapping.regressorColumns.includes(col)}\n                        onChange={() => handleRegressorToggle(col)}\n                        className=\"rounded border-gray-300\"\n                      />\n                      <Label htmlFor={`regressor-${col}`} className=\"text-sm cursor-pointer\">\n                        {col}\n                      </Label>\n                    </div>\n                  ))}\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  Variables that might influence the target\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Validation Errors */}\n          {errors.length > 0 && (\n            <Alert variant=\"destructive\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>\n                <ul className=\"list-disc list-inside space-y-1\">\n                  {errors.map((error, index) => (\n                    <li key={index}>{error}</li>\n                  ))}\n                </ul>\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {/* Data Preview */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Data Preview with Column Mapping</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ScrollArea className=\"h-48 w-full\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      {columns.map(col => {\n                        let columnType: 'date' | 'target' | 'regressor' | null = null;\n                        if (col === mapping.dateColumn) columnType = 'date';\n                        else if (col === mapping.targetColumn) columnType = 'target';\n                        else if (mapping.regressorColumns.includes(col)) columnType = 'regressor';\n\n                        return (\n                          <TableHead key={col} className=\"text-xs\">\n                            <div className=\"flex flex-col items-center gap-1\">\n                              <span className=\"font-medium\">{col}</span>\n                              {columnType && (\n                                <Badge \n                                  variant=\"outline\" \n                                  className={cn(\"text-xs px-1 py-0\", getColumnColor(columnType))}\n                                >\n                                  <span className=\"flex items-center gap-1\">\n                                    {getColumnIcon(columnType)}\n                                    {columnType}\n                                  </span>\n                                </Badge>\n                              )}\n                            </div>\n                          </TableHead>\n                        );\n                      })}\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {dataPreview.slice(0, 5).map((row, index) => (\n                      <TableRow key={index}>\n                        {columns.map(col => (\n                          <TableCell key={col} className=\"text-xs font-mono\">\n                            {row[col]?.toString() || '-'}\n                          </TableCell>\n                        ))}\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n\n          {/* Summary */}\n          <Card className=\"bg-muted/50\">\n            <CardContent className=\"pt-4\">\n              <div className=\"text-sm space-y-2\">\n                <p><strong>Summary:</strong></p>\n                <ul className=\"space-y-1 text-muted-foreground\">\n                  <li>• <strong>Date Column:</strong> {mapping.dateColumn || 'Not selected'}</li>\n                  <li>• <strong>Target Column:</strong> {mapping.targetColumn || 'Not selected'}</li>\n                  <li>• <strong>Regressor Columns:</strong> {mapping.regressorColumns.length > 0 ? mapping.regressorColumns.join(', ') : 'None selected'}</li>\n                  <li>• <strong>Total Rows:</strong> {dataPreview.length}</li>\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={onCancel}>\n            Cancel\n          </Button>\n          <Button onClick={handleConfirm} disabled={!mapping.dateColumn || !mapping.targetColumn}>\n            Confirm Mapping & Upload\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1859, "column": 0}, "map": {"version":3,"sources":["file:///Users/martinprabhu/Downloads/support-operations-centre/new_app/src/components/dashboard/header.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuLabel,\n    DropdownMenuSeparator,\n    DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Settings, User, Bot, BarChart, FileText, Printer, UploadCloud, Key, TrendingUp, LogOut, Palette } from 'lucide-react';\nimport Link from 'next/link';\nimport { ThemeToggle } from './theme-toggle';\nimport placeholderImages from '@/lib/placeholder-images.json';\nimport { useApp } from './app-provider';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';\nimport EnhancedAgentMonitor from './enhanced-agent-monitor';\nimport ReportViewer from './report-viewer';\nimport BuLobSelector from './bu-lob-selector';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport APISettingsDialog from './api-settings-dialog';\n\n\n\n\nconst SettingsDropdown = ({ onGenerateReport, isReportGenerating }: { onGenerateReport: () => void, isReportGenerating: boolean }) => {\n    const { state, dispatch } = useApp();\n    const [showAPISettings, setShowAPISettings] = useState(false);\n\n    const showAgentMonitor = () => {\n        dispatch({ type: 'SET_AGENT_MONITOR_OPEN', payload: true });\n    };\n\n    const handlePrint = () => {\n        window.print();\n    };\n\n    // API key management handled in APISettingsDialog\n\n    return (\n        <>\n            <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                    <button className=\"p-2 rounded-lg bg-white/10 hover:bg-white/20\">\n                        <Settings className=\"w-5 h-5\" />\n                    </button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-64\" align=\"end\">\n                    <DropdownMenuLabel>System Settings</DropdownMenuLabel>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onSelect={() => setShowAPISettings(true)}>\n                        <Key className=\"mr-2 h-4 w-4\" />\n                        <span>API Settings</span>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onSelect={showAgentMonitor}>\n                        <BarChart className=\"mr-2 h-4 w-4\" />\n                        <span>Show Agent Monitor Panel</span>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onSelect={onGenerateReport} disabled={isReportGenerating}>\n                        <FileText className=\"mr-2 h-4 w-4\" />\n                        <span>{isReportGenerating ? 'Generating Report...' : 'Generate Report'}</span>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onSelect={handlePrint}>\n                        <Printer className=\"mr-2 h-4 w-4\" />\n                        <span>Print/Export Dashboard</span>\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <div className=\"px-2 py-1.5 text-xs text-muted-foreground\">\n                        <p>OpenAI Status: <span className=\"text-green-600\">Connected</span></p>\n                        <p>Model: GPT-4</p>\n                        <p>Requests Today: 47/1000</p>\n                    </div>\n                </DropdownMenuContent>\n            </DropdownMenu>\n            <APISettingsDialog open={showAPISettings} onOpenChange={setShowAPISettings} />\n            <Dialog open={state.agentMonitor.isOpen} onOpenChange={(isOpen) => dispatch({ type: 'SET_AGENT_MONITOR_OPEN', payload: isOpen })}>\n                <DialogContent className=\"max-w-4xl h-[80vh] flex flex-col\">\n                    <DialogHeader>\n                        <DialogTitle>Agent Activity Monitor</DialogTitle>\n                    </DialogHeader>\n                    <EnhancedAgentMonitor className=\"flex-1 min-h-0\" />\n                </DialogContent>\n            </Dialog>\n        </>\n    );\n};\n\ninterface HeaderProps {\n  onLogout?: () => void;\n}\n\nexport default function Header({ onLogout }: HeaderProps) {\n    const userAvatar = placeholderImages.placeholderImages.find(p => p.id === 'user-avatar');\n    const { state, dispatch } = useApp();\n    const [isReportGenerating, setIsReportGenerating] = useState(false);\n    const [reportMarkdown, setReportMarkdown] = useState<string | null>(null);\n    const [isReportViewerOpen, setIsReportViewerOpen] = useState(false);\n    const [showLogoutConfirm, setShowLogoutConfirm] = useState(false);\n\n\n    const showAgentMonitor = () => {\n        dispatch({ type: 'SET_AGENT_MONITOR_OPEN', payload: true });\n    };\n\n    const handleGenerateReport = async () => {\n        setIsReportGenerating(true);\n        try {\n            const { selectedBu, selectedLob, messages } = state;\n            const context = `\n            Business Unit: ${selectedBu?.name}\n            Line of Business: ${selectedLob?.name}\n            Data Summary: ${selectedLob?.recordCount} records, completeness ${selectedLob?.dataQuality?.completeness}%, ${selectedLob?.dataQuality?.outliers} outliers.\n        `;\n            const history = JSON.stringify(messages.map(m => ({ role: m.role, content: m.content })));\n\n            const res = await fetch('/api/generate-report', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ conversationHistory: history, analysisContext: context })\n            });\n\n            if (!res.ok) {\n                throw new Error(`HTTP ${res.status}`);\n            }\n            const result = await res.json();\n            setReportMarkdown(result.reportMarkdown);\n            setIsReportViewerOpen(true);\n        } catch (error) {\n            console.error('Failed to generate report:', error);\n        } finally {\n            setIsReportGenerating(false);\n        }\n    };\n\n\n    return (\n        <header className=\"h-16 bg-gradient-to-r from-primary via-primary/90 to-primary/80 text-primary-foreground flex items-center justify-between px-6 shrink-0 print:hidden shadow-lg backdrop-blur-sm border-b border-white/10\">\n            <div className=\"flex items-center space-x-4\">\n                <h1 className=\"text-xl font-bold\">Assistant </h1>\n                {!state.isOnboarding && (\n                    <>\n                        <span className=\"text-sm opacity-80 hidden md:inline\">|</span>\n                        <BuLobSelector />\n                    </>\n                )}\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n                {/* Add ThemeToggle button for light/dark theme switching */}\n                <ThemeToggle />\n                <button\n                    onClick={showAgentMonitor}\n                    className=\"p-2 rounded-lg bg-white/10 hover:bg-white/20\"\n                    title=\"Show Agent Monitor\"\n                >\n                    <Bot className=\"w-5 h-5\" />\n                </button>\n\n\n                <button\n                    onClick={() => {\n                        // If no LOB selected, do nothing\n                        if (!state.selectedLob) return;\n                        const input = document.getElementById('header-upload-input') as HTMLInputElement | null;\n                        input?.click();\n                    }}\n                    className=\"p-2 rounded-lg bg-white/10 hover:bg-white/20 disabled:opacity-50\"\n                    title={state.selectedLob ? `Attach CSV/Excel to ${state.selectedLob.name}` : 'Select a BU/LOB first'}\n                    disabled={!state.selectedLob}\n                >\n                    <UploadCloud className=\"w-5 h-5\" />\n                </button>\n                <input\n                    id=\"header-upload-input\"\n                    type=\"file\"\n                    className=\"hidden\"\n                    accept=\".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\"\n                    onChange={(e) => {\n                        const file = e.target.files?.[0];\n                        if (file && state.selectedLob) {\n                            dispatch({ type: 'UPLOAD_DATA', payload: { lobId: state.selectedLob.id, file } });\n                            // reset value so the same file can be selected twice if needed\n                            e.currentTarget.value = '';\n                        }\n                    }}\n                />\n\n                <SettingsDropdown onGenerateReport={handleGenerateReport} isReportGenerating={isReportGenerating} />\n\n                <div className=\"w-3 h-3 bg-green-400 rounded-full\" title=\"System Online\"></div>\n\n                <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" className=\"relative h-10 w-10 rounded-full p-0\">\n                            <Avatar className=\"h-10 w-10\">\n                                {userAvatar && <AvatarImage src={userAvatar.imageUrl} alt=\"User Avatar\" data-ai-hint={userAvatar.imageHint} />}\n                                <AvatarFallback>\n                                    <User />\n                                </AvatarFallback>\n                            </Avatar>\n                        </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                        <DropdownMenuLabel className=\"font-normal\">\n                            <div className=\"flex flex-col space-y-1\">\n                                <p className=\"text-sm font-medium leading-none\">\n                                    {typeof window !== 'undefined' && localStorage.getItem('zentere_username')?.split('@')[0]?.split('.').map(n => n.charAt(0).toUpperCase() + n.slice(1)).join(' ') || 'User'}\n                                </p>\n                                <p className=\"text-xs leading-none text-muted-foreground\">\n                                    {typeof window !== 'undefined' && localStorage.getItem('zentere_username') || 'user@example.com'}\n                                </p>\n                            </div>\n                        </DropdownMenuLabel>\n                        <DropdownMenuSeparator />\n                        <DropdownMenuItem>\n                            <Settings className=\"mr-2 h-4 w-4\" />\n                            <span>Settings</span>\n                        </DropdownMenuItem>\n                        <DropdownMenuSeparator />\n                        <DropdownMenuItem \n                            onSelect={() => setShowLogoutConfirm(true)}\n                            className=\"text-red-600 focus:text-red-600 focus:bg-red-50\"\n                        >\n                            <LogOut className=\"mr-2 h-4 w-4\" />\n                            <span>Log out</span>\n                        </DropdownMenuItem>\n                    </DropdownMenuContent>\n                </DropdownMenu>\n            </div>\n            {reportMarkdown && (\n                <ReportViewer\n                    isOpen={isReportViewerOpen}\n                    onOpenChange={setIsReportViewerOpen}\n                    markdownContent={reportMarkdown}\n                    isRealData={false} // TODO: Set to true only if report is from validated backend workflow\n                />\n            )}\n\n            {/* Logout Confirmation Dialog */}\n            <Dialog open={showLogoutConfirm} onOpenChange={setShowLogoutConfirm}>\n                <DialogContent className=\"sm:max-w-md\">\n                    <DialogHeader>\n                        <DialogTitle className=\"flex items-center gap-2\">\n                            <LogOut className=\"h-5 w-5 text-red-500\" />\n                            Confirm Logout\n                        </DialogTitle>\n                    </DialogHeader>\n                    <div className=\"py-4\">\n                        <p className=\"text-muted-foreground\">\n                            Are you sure you want to log out? You'll need to sign in again to access the dashboard.\n                        </p>\n                    </div>\n                    <div className=\"flex justify-end gap-3\">\n                        <Button \n                            variant=\"outline\" \n                            onClick={() => setShowLogoutConfirm(false)}\n                        >\n                            Cancel\n                        </Button>\n                        <Button \n                            variant=\"destructive\"\n                            onClick={() => {\n                                setShowLogoutConfirm(false);\n                                if (onLogout) {\n                                    setTimeout(() => {\n                                        onLogout();\n                                    }, 200);\n                                }\n                            }}\n                            className=\"bg-red-600 hover:bg-red-700\"\n                        >\n                            <LogOut className=\"h-4 w-4 mr-2\" />\n                            Log out\n                        </Button>\n                    </div>\n                </DialogContent>\n            </Dialog>\n        </header>\n    );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAxBA;;;;;;;;;;;;;;;AA6BA,MAAM,mBAAmB,CAAC,EAAE,gBAAgB,EAAE,kBAAkB,EAAiE;IAC7H,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,kJAAA,CAAA,SAAM,AAAD;IACjC,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEvD,MAAM,mBAAmB;QACrB,SAAS;YAAE,MAAM;YAA0B,SAAS;QAAK;IAC7D;IAEA,MAAM,cAAc;QAChB,OAAO,KAAK;IAChB;IAEA,kDAAkD;IAElD,qBACI;;0BACI,8OAAC,4IAAA,CAAA,eAAY;;kCACT,8OAAC,4IAAA,CAAA,sBAAmB;wBAAC,OAAO;kCACxB,cAAA,8OAAC;4BAAO,WAAU;sCACd,cAAA,8OAAC,0MAAA,CAAA,WAAQ;gCAAC,WAAU;;;;;;;;;;;;;;;;kCAG5B,8OAAC,4IAAA,CAAA,sBAAmB;wBAAC,WAAU;wBAAO,OAAM;;0CACxC,8OAAC,4IAAA,CAAA,oBAAiB;0CAAC;;;;;;0CACnB,8OAAC,4IAAA,CAAA,wBAAqB;;;;;0CACtB,8OAAC,4IAAA,CAAA,mBAAgB;gCAAC,UAAU,IAAM,mBAAmB;;kDACjD,8OAAC,gMAAA,CAAA,MAAG;wCAAC,WAAU;;;;;;kDACf,8OAAC;kDAAK;;;;;;;;;;;;0CAEV,8OAAC,4IAAA,CAAA,mBAAgB;gCAAC,UAAU;;kDACxB,8OAAC,6OAAA,CAAA,WAAQ;wCAAC,WAAU;;;;;;kDACpB,8OAAC;kDAAK;;;;;;;;;;;;0CAEV,8OAAC,4IAAA,CAAA,mBAAgB;gCAAC,UAAU;gCAAkB,UAAU;;kDACpD,8OAAC,8MAAA,CAAA,WAAQ;wCAAC,WAAU;;;;;;kDACpB,8OAAC;kDAAM,qBAAqB,yBAAyB;;;;;;;;;;;;0CAEzD,8OAAC,4IAAA,CAAA,mBAAgB;gCAAC,UAAU;;kDACxB,8OAAC,wMAAA,CAAA,UAAO;wCAAC,WAAU;;;;;;kDACnB,8OAAC;kDAAK;;;;;;;;;;;;0CAEV,8OAAC,4IAAA,CAAA,wBAAqB;;;;;0CACtB,8OAAC;gCAAI,WAAU;;kDACX,8OAAC;;4CAAE;0DAAe,8OAAC;gDAAK,WAAU;0DAAiB;;;;;;;;;;;;kDACnD,8OAAC;kDAAE;;;;;;kDACH,8OAAC;kDAAE;;;;;;;;;;;;;;;;;;;;;;;;0BAIf,8OAAC,4JAAA,CAAA,UAAiB;gBAAC,MAAM;gBAAiB,cAAc;;;;;;0BACxD,8OAAC,kIAAA,CAAA,SAAM;gBAAC,MAAM,MAAM,YAAY,CAAC,MAAM;gBAAE,cAAc,CAAC,SAAW,SAAS;wBAAE,MAAM;wBAA0B,SAAS;oBAAO;0BAC1H,cAAA,8OAAC,kIAAA,CAAA,gBAAa;oBAAC,WAAU;;sCACrB,8OAAC,kIAAA,CAAA,eAAY;sCACT,cAAA,8OAAC,kIAAA,CAAA,cAAW;0CAAC;;;;;;;;;;;sCAEjB,8OAAC,+JAAA,CAAA,UAAoB;4BAAC,WAAU;;;;;;;;;;;;;;;;;;;AAKpD;AAMe,SAAS,OAAO,EAAE,QAAQ,EAAe;IACpD,MAAM,aAAa,2GAAA,CAAA,UAAiB,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;IAC1E,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,kJAAA,CAAA,SAAM,AAAD;IACjC,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7D,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IACpE,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7D,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAG3D,MAAM,mBAAmB;QACrB,SAAS;YAAE,MAAM;YAA0B,SAAS;QAAK;IAC7D;IAEA,MAAM,uBAAuB;QACzB,sBAAsB;QACtB,IAAI;YACA,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,QAAQ,EAAE,GAAG;YAC9C,MAAM,UAAU,CAAC;2BACF,EAAE,YAAY,KAAK;8BAChB,EAAE,aAAa,KAAK;0BACxB,EAAE,aAAa,YAAY,uBAAuB,EAAE,aAAa,aAAa,aAAa,GAAG,EAAE,aAAa,aAAa,SAAS;QACrJ,CAAC;YACG,MAAM,UAAU,KAAK,SAAS,CAAC,SAAS,GAAG,CAAC,CAAA,IAAK,CAAC;oBAAE,MAAM,EAAE,IAAI;oBAAE,SAAS,EAAE,OAAO;gBAAC,CAAC;YAEtF,MAAM,MAAM,MAAM,MAAM,wBAAwB;gBAC5C,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9C,MAAM,KAAK,SAAS,CAAC;oBAAE,qBAAqB;oBAAS,iBAAiB;gBAAQ;YAClF;YAEA,IAAI,CAAC,IAAI,EAAE,EAAE;gBACT,MAAM,IAAI,MAAM,CAAC,KAAK,EAAE,IAAI,MAAM,EAAE;YACxC;YACA,MAAM,SAAS,MAAM,IAAI,IAAI;YAC7B,kBAAkB,OAAO,cAAc;YACvC,sBAAsB;QAC1B,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,8BAA8B;QAChD,SAAU;YACN,sBAAsB;QAC1B;IACJ;IAGA,qBACI,8OAAC;QAAO,WAAU;;0BACd,8OAAC;gBAAI,WAAU;;kCACX,8OAAC;wBAAG,WAAU;kCAAoB;;;;;;oBACjC,CAAC,MAAM,YAAY,kBAChB;;0CACI,8OAAC;gCAAK,WAAU;0CAAsC;;;;;;0CACtD,8OAAC,wJAAA,CAAA,UAAa;;;;;;;;;;;;;0BAK1B,8OAAC;gBAAI,WAAU;;kCAEX,8OAAC,kJAAA,CAAA,cAAW;;;;;kCACZ,8OAAC;wBACG,SAAS;wBACT,WAAU;wBACV,OAAM;kCAEN,cAAA,8OAAC,gMAAA,CAAA,MAAG;4BAAC,WAAU;;;;;;;;;;;kCAInB,8OAAC;wBACG,SAAS;4BACL,iCAAiC;4BACjC,IAAI,CAAC,MAAM,WAAW,EAAE;4BACxB,MAAM,QAAQ,SAAS,cAAc,CAAC;4BACtC,OAAO;wBACX;wBACA,WAAU;wBACV,OAAO,MAAM,WAAW,GAAG,CAAC,oBAAoB,EAAE,MAAM,WAAW,CAAC,IAAI,EAAE,GAAG;wBAC7E,UAAU,CAAC,MAAM,WAAW;kCAE5B,cAAA,8OAAC,oNAAA,CAAA,cAAW;4BAAC,WAAU;;;;;;;;;;;kCAE3B,8OAAC;wBACG,IAAG;wBACH,MAAK;wBACL,WAAU;wBACV,QAAO;wBACP,UAAU,CAAC;4BACP,MAAM,OAAO,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE;4BAChC,IAAI,QAAQ,MAAM,WAAW,EAAE;gCAC3B,SAAS;oCAAE,MAAM;oCAAe,SAAS;wCAAE,OAAO,MAAM,WAAW,CAAC,EAAE;wCAAE;oCAAK;gCAAE;gCAC/E,+DAA+D;gCAC/D,EAAE,aAAa,CAAC,KAAK,GAAG;4BAC5B;wBACJ;;;;;;kCAGJ,8OAAC;wBAAiB,kBAAkB;wBAAsB,oBAAoB;;;;;;kCAE9E,8OAAC;wBAAI,WAAU;wBAAoC,OAAM;;;;;;kCAEzD,8OAAC,4IAAA,CAAA,eAAY;;0CACT,8OAAC,4IAAA,CAAA,sBAAmB;gCAAC,OAAO;0CACxB,cAAA,8OAAC,kIAAA,CAAA,SAAM;oCAAC,SAAQ;oCAAQ,WAAU;8CAC9B,cAAA,8OAAC,kIAAA,CAAA,SAAM;wCAAC,WAAU;;4CACb,4BAAc,8OAAC,kIAAA,CAAA,cAAW;gDAAC,KAAK,WAAW,QAAQ;gDAAE,KAAI;gDAAc,gBAAc,WAAW,SAAS;;;;;;0DAC1G,8OAAC,kIAAA,CAAA,iBAAc;0DACX,cAAA,8OAAC,kMAAA,CAAA,OAAI;;;;;;;;;;;;;;;;;;;;;;;;;;0CAKrB,8OAAC,4IAAA,CAAA,sBAAmB;gCAAC,WAAU;gCAAO,OAAM;gCAAM,UAAU;;kDACxD,8OAAC,4IAAA,CAAA,oBAAiB;wCAAC,WAAU;kDACzB,cAAA,8OAAC;4CAAI,WAAU;;8DACX,8OAAC;oDAAE,WAAU;8DACR,gBAAkB,eAAe,aAAa,OAAO,CAAC,qBAAqB,MAAM,IAAI,CAAC,EAAE,EAAE,MAAM,KAAK,IAAI,CAAA,IAAK,EAAE,MAAM,CAAC,GAAG,WAAW,KAAK,EAAE,KAAK,CAAC,IAAI,KAAK,QAAQ;;;;;;8DAExK,8OAAC;oDAAE,WAAU;8DACR,gBAAkB,eAAe,aAAa,OAAO,CAAC,uBAAuB;;;;;;;;;;;;;;;;;kDAI1F,8OAAC,4IAAA,CAAA,wBAAqB;;;;;kDACtB,8OAAC,4IAAA,CAAA,mBAAgB;;0DACb,8OAAC,0MAAA,CAAA,WAAQ;gDAAC,WAAU;;;;;;0DACpB,8OAAC;0DAAK;;;;;;;;;;;;kDAEV,8OAAC,4IAAA,CAAA,wBAAqB;;;;;kDACtB,8OAAC,4IAAA,CAAA,mBAAgB;wCACb,UAAU,IAAM,qBAAqB;wCACrC,WAAU;;0DAEV,8OAAC,0MAAA,CAAA,SAAM;gDAAC,WAAU;;;;;;0DAClB,8OAAC;0DAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAKrB,gCACG,8OAAC,mJAAA,CAAA,UAAY;gBACT,QAAQ;gBACR,cAAc;gBACd,iBAAiB;gBACjB,YAAY;;;;;;0BAKpB,8OAAC,kIAAA,CAAA,SAAM;gBAAC,MAAM;gBAAmB,cAAc;0BAC3C,cAAA,8OAAC,kIAAA,CAAA,gBAAa;oBAAC,WAAU;;sCACrB,8OAAC,kIAAA,CAAA,eAAY;sCACT,cAAA,8OAAC,kIAAA,CAAA,cAAW;gCAAC,WAAU;;kDACnB,8OAAC,0MAAA,CAAA,SAAM;wCAAC,WAAU;;;;;;oCAAyB;;;;;;;;;;;;sCAInD,8OAAC;4BAAI,WAAU;sCACX,cAAA,8OAAC;gCAAE,WAAU;0CAAwB;;;;;;;;;;;sCAIzC,8OAAC;4BAAI,WAAU;;8CACX,8OAAC,kIAAA,CAAA,SAAM;oCACH,SAAQ;oCACR,SAAS,IAAM,qBAAqB;8CACvC;;;;;;8CAGD,8OAAC,kIAAA,CAAA,SAAM;oCACH,SAAQ;oCACR,SAAS;wCACL,qBAAqB;wCACrB,IAAI,UAAU;4CACV,WAAW;gDACP;4CACJ,GAAG;wCACP;oCACJ;oCACA,WAAU;;sDAEV,8OAAC,0MAAA,CAAA,SAAM;4CAAC,WAAU;;;;;;wCAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQ/D","debugId":null}},
    {"offset": {"line": 2604, "column": 0}, "map": {"version":3,"sources":["file:///Users/martinprabhu/Downloads/support-operations-centre/new_app/src/components/dashboard/forecast-comparison-chart.tsx"],"sourcesContent":["import React, { useMemo } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Activity, TrendingUp, TrendingDown } from \"lucide-react\";\n\ninterface WeeklyData {\n  Date?: string;\n  ds?: string;\n  date?: string;\n  Value?: number;\n  Orders?: number;\n  Forecast?: number;\n  ForecastLower?: number;\n  ForecastUpper?: number;\n}\n\ninterface ForecastComparisonChartProps {\n  data: WeeklyData[];\n  title?: string;\n  target: \"Value\" | \"Orders\";\n  chartMetrics?: {\n    mape?: number;\n    model?: string;\n    accuracy?: number;\n    [key: string]: any;\n  };\n}\n\nexport default function ForecastComparisonChart({\n  data,\n  title = \"Actual vs Forecast Comparison\",\n  target,\n  chartMetrics,\n}: ForecastComparisonChartProps) {\n  // Generate extended forecast data with dummy weekly values\n  const extendedData = useMemo(() => {\n    const historicalData = data.filter((d) => d.Forecast == null);\n    const existingForecastData = data.filter((d) => d.Forecast != null);\n    \n    // If we already have forecast data, use it as is\n    if (existingForecastData.length > 0) {\n      return data;\n    }\n    \n    // Generate dummy weekly forecast for next 4 weeks\n    if (historicalData.length === 0) return data;\n    \n    const lastDate = new Date(\n      historicalData[historicalData.length - 1].Date || \n      historicalData[historicalData.length - 1].ds || \n      historicalData[historicalData.length - 1].date || \n      new Date()\n    );\n    \n    const lastValue = historicalData[historicalData.length - 1][target] || 0;\n    const avgValue = historicalData.reduce((sum, d) => sum + (d[target] || 0), 0) / historicalData.length;\n    \n    // Calculate trend from last 4 weeks\n    const recentData = historicalData.slice(-4);\n    const trend = recentData.length > 1 \n      ? ((recentData[recentData.length - 1][target] || 0) - (recentData[0][target] || 0)) / recentData.length\n      : 0;\n    \n    const forecastWeeks: WeeklyData[] = [];\n    for (let i = 1; i <= 4; i++) {\n      const forecastDate = new Date(lastDate);\n      forecastDate.setDate(forecastDate.getDate() + (i * 7)); // Weekly intervals\n      \n      // Generate forecast with trend and some variation\n      const baseForecast = lastValue + (trend * i);\n      const variation = avgValue * 0.05; // 5% variation\n      const forecast = baseForecast + (Math.random() - 0.5) * variation;\n      \n      forecastWeeks.push({\n        Date: forecastDate.toISOString().split('T')[0],\n        ds: forecastDate.toISOString().split('T')[0],\n        date: forecastDate.toISOString().split('T')[0],\n        Forecast: Math.max(0, forecast),\n        ForecastLower: Math.max(0, forecast * 0.9),\n        ForecastUpper: forecast * 1.1,\n      });\n    }\n    \n    return [...historicalData, ...forecastWeeks];\n  }, [data, target]);\n\n  // Separate actual and forecast data\n  const historicalData = extendedData.filter((d) => d.Forecast == null);\n  const forecastData = extendedData.filter((d) => d.Forecast != null);\n\n  // Use MAPE from chartMetrics if available, otherwise compute from data\n  const mape = useMemo(() => {\n    if (chartMetrics?.mape != null) {\n      return chartMetrics.mape;\n    }\n    \n    const pairs = extendedData.filter(\n      (d) =>\n        d.Forecast != null &&\n        d[target] != null &&\n        d[target] !== 0\n    );\n    if (pairs.length === 0) return 0;\n    const sum = pairs.reduce((acc, d) => {\n      const actual = Number(d[target]);\n      const forecast = Number(d.Forecast);\n      return acc + Math.abs((actual - forecast) / actual);\n    }, 0);\n    return (sum / pairs.length) * 100;\n  }, [extendedData, target, chartMetrics]);\n\n  // Decide trend direction\n  const trend =\n    historicalData.length > 1\n      ? historicalData[historicalData.length - 1][target]! >\n        historicalData[0][target]!\n        ? \"up\"\n        : \"down\"\n      : \"stable\";\n  \n  // Extract model info from chartMetrics\n  const modelInfo = chartMetrics?.model || \"Auto-selected\";\n  const accuracy = chartMetrics?.accuracy;\n\n  // Generate mini sparkline\n  const generateMiniChart = (values: (number | null | undefined)[]) => {\n    const filtered = values.filter((v) => v != null) as number[];\n    if (filtered.length === 0) return \"\";\n    const max = Math.max(...filtered);\n    const min = Math.min(...filtered);\n    const range = max - min;\n    const chars = \"▁▂▃▄▅▆▇█\";\n    return values\n      .map((v) => {\n        if (v == null) return \" \";\n        const normalized = range > 0 ? (v - min) / range : 0.5;\n        const height = Math.round(normalized * 7);\n        return chars[height] || \"▁\";\n      })\n      .join(\"\");\n  };\n\n  const historicalValues = historicalData.map((d) => d[target] as number | null);\n  const forecastValues = forecastData.map((d) => d.Forecast as number);\n\n  return (\n    <Card className=\"border-l-4 border-l-indigo-500 bg-indigo-50/50 dark:bg-indigo-950/20\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n            <Activity className=\"h-4 w-4 text-indigo-500\" />\n            {title}\n          </CardTitle>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"outline\" className=\"text-xs\">\n              MAPE: {mape.toFixed(1)}%\n            </Badge>\n            {accuracy != null && (\n              <Badge variant=\"outline\" className=\"text-xs bg-green-50\">\n                Accuracy: {accuracy.toFixed(1)}%\n              </Badge>\n            )}\n            {trend === \"up\" ? (\n              <TrendingUp className=\"h-4 w-4 text-green-500\" />\n            ) : trend === \"down\" ? (\n              <TrendingDown className=\"h-4 w-4 text-red-500\" />\n            ) : (\n              <span className=\"text-xs text-gray-500\">Stable</span>\n            )}\n          </div>\n        </div>\n        {modelInfo && (\n          <div className=\"text-xs text-muted-foreground mt-1\">\n            Model: {modelInfo}\n          </div>\n        )}\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Historical Data */}\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium text-blue-600\">\n              Historical {target}\n            </span>\n            <span className=\"text-xs text-muted-foreground\">\n              {historicalData.length} data points\n            </span>\n          </div>\n          <div className=\"bg-background/50 rounded p-3 font-mono text-sm\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <span className=\"text-blue-600\">Actual:</span>\n              <span className=\"text-lg\">{generateMiniChart(historicalValues)}</span>\n            </div>\n            <div className=\"text-xs text-muted-foreground\">\n              Range:{\" \"}\n              {historicalValues.filter((v) => v != null).length\n                ? `${Math.min(\n                  ...(historicalValues.filter((v) => v != null) as number[])\n                ).toFixed(1)} - ${Math.max(\n                  ...(historicalValues.filter((v) => v != null) as number[])\n                ).toFixed(1)}`\n                : \"N/A\"}\n            </div>\n          </div>\n        </div>\n\n        {/* Forecast Data */}\n        {forecastData.length > 0 && (\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium text-green-600\">\n                Forecast {target}\n              </span>\n              <span className=\"text-xs text-muted-foreground\">\n                {forecastData.length} predictions\n              </span>\n            </div>\n            <div className=\"bg-background/50 rounded p-3 font-mono text-sm\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <span className=\"text-green-600\">Forecast:</span>\n                <span className=\"text-lg\">{generateMiniChart(forecastValues)}</span>\n              </div>\n              <div className=\"text-xs text-muted-foreground\">\n                Range:{\" \"}\n                {Math.min(...forecastValues).toFixed(1)} -{\" \"}\n                {Math.max(...forecastValues).toFixed(1)}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Recent Comparisons */}\n        {/* {actualVsForecast.length > 0 && (\n          <div className=\"space-y-2\">\n            <span className=\"text-sm font-medium\">Recent Comparisons</span>\n            <div className=\"bg-background/50 rounded p-3\">\n              <div className=\"space-y-1 text-xs font-mono\">\n                <div className=\"grid grid-cols-4 gap-2 font-semibold text-muted-foreground\">\n                  <span>Date</span>\n                  <span>Actual</span>\n                  <span>Forecast</span>\n                  <span>Error</span>\n                </div>\n                {actualVsForecast.slice(-5).map((d, i) => {\n                  const actual = d[target];\n                  const forecast = d.Forecast;\n                  const hasActual = actual != null && actual !== 0;\n                  const error = hasActual\n                    ? ((actual - forecast!) / actual) * 100\n                    : null;\n                  const dateVal = new Date(\n                    d.Date || d.ds || d.date || \"\"\n                  ).toLocaleDateString();\n                  return (\n                    <div key={i} className=\"grid grid-cols-4 gap-2\">\n                      <span>{dateVal}</span>\n                      <span>\n                        {actual != null ? Number(actual).toFixed(1) : \"—\"}\n                      </span>\n                      <span>\n                        {forecast != null ? Number(forecast).toFixed(1) : \"—\"}\n                      </span>\n                      <span\n                        className={\n                          error != null && error > 0\n                            ? \"text-green-600\"\n                            : \"text-red-600\"\n                        }\n                      >\n                        {error != null\n                          ? (error > 0 ? \"+\" : \"\") + error.toFixed(1) + \"%\"\n                          : \"N/A\"}\n                      </span>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        )} */}\n\n        {/* Confidence Bounds */}\n        {/* {forecastData.some(\n          (d) => d.ForecastLower && d.ForecastUpper\n        ) && (\n            <div className=\"space-y-2\">\n              <span className=\"text-sm font-medium\">Confidence Bounds</span>\n              <div className=\"bg-background/50 rounded p-3 text-xs\">\n                <div className=\"space-y-1\">\n                  {forecastData\n                    .filter((d) => d.ForecastLower && d.ForecastUpper)\n                    .slice(-3)\n                    .map((d, i) => (\n                      <div key={i} className=\"flex justify-between\">\n                        <span>\n                          {new Date(\n                            d.Date || d.ds || d.date || \"\"\n                          ).toLocaleDateString()}\n                        </span>\n                        <span className=\"font-mono\">\n                          [{d.ForecastLower!.toFixed(1)},{\" \"}\n                          {d.ForecastUpper!.toFixed(1)}]\n                        </span>\n                      </div>\n                    ))}\n                </div>\n              </div>\n            </div>\n          )} */}\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3005, "column": 0}, "map": {"version":3,"sources":["file:///Users/martinprabhu/Downloads/support-operations-centre/new_app/src/components/dashboard/data-visualizer.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useMemo } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { BarChart, LineChart, AlertTriangle } from 'lucide-react';\nimport {\n  ResponsiveContainer,\n  LineChart as RechartsLineChart,\n  BarChart as RechartsBarChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  CartesianGrid,\n  Line,\n  Bar,\n  Scatter,\n  ComposedChart,\n  Area\n} from 'recharts';\nimport type { WeeklyData } from '@/lib/types';\nimport { format } from 'date-fns';\n\ntype ChartType = 'line' | 'bar';\n\ninterface DataVisualizerProps {\n  data: WeeklyData[];\n  target: 'Value' | 'Orders';\n  isRealData: boolean;\n  showOutliers?: boolean; // Only show outliers when user asks about exploration/preprocessing\n}\n\nconst CustomTooltip = ({ active, payload, label }: any) => {\n  if (active && payload && payload.length) {\n    const dataPoint = payload[0].payload;\n\n    // Check if this is a forecast point or actual data point\n    const isForecastPoint = dataPoint.Forecast !== undefined && dataPoint.Forecast > 0;\n\n    return (\n      <div className=\"bg-background border p-2 rounded-lg shadow-lg\">\n        <p className=\"font-bold\">{dataPoint.formattedDate}</p>\n\n        {/* Show Actual data label for historical points */}\n        {!isForecastPoint && dataPoint.Value !== undefined && dataPoint.Value !== null && (\n          <p className=\"text-sm text-primary font-semibold\">Actual: {dataPoint.Value?.toLocaleString()}</p>\n        )}\n\n        {/* Show Orders for actual data points */}\n        {!isForecastPoint && dataPoint.Orders !== undefined && dataPoint.Orders > 0 && (\n          <p className=\"text-sm text-muted-foreground\">Orders: {dataPoint.Orders?.toLocaleString()}</p>\n        )}\n\n        {/* Show Forecast data label for forecast points */}\n        {isForecastPoint && (\n          <p className=\"text-sm text-blue-600 font-semibold\">Forecast: {dataPoint.Forecast?.toLocaleString()}</p>\n        )}\n\n        {/* Show confidence interval for forecast points */}\n        {isForecastPoint && dataPoint.ForecastLower !== undefined && dataPoint.ForecastUpper !== undefined && (\n          <p className=\"text-xs text-muted-foreground\">\n            Range: {dataPoint.ForecastLower?.toLocaleString()} - {dataPoint.ForecastUpper?.toLocaleString()}\n          </p>\n        )}\n\n        {/* Show outlier warning for actual data */}\n        {!isForecastPoint && dataPoint.isCriticalOutlier && (\n          <p className=\"text-sm text-destructive font-semibold\">⚠️ Outlier Detected</p>\n        )}\n      </div>\n    );\n  }\n  return null;\n};\n\nexport default function DataVisualizer({ data, target, isRealData, showOutliers = false }: DataVisualizerProps) {\n  const [chartType, setChartType] = useState<ChartType>('line');\n\n  // Process data: detect CRITICAL outliers only, format dates, separate actual vs forecast\n  const processedData = useMemo(() => {\n    // Calculate CRITICAL outliers using stricter IQR method (3.0 instead of 1.5)\n    const values = data.map(d => d.Value).filter(v => v !== undefined && v !== null);\n    const sorted = [...values].sort((a, b) => a - b);\n    const q1 = sorted[Math.floor(sorted.length * 0.25)];\n    const q3 = sorted[Math.floor(sorted.length * 0.75)];\n    const iqr = q3 - q1;\n    const lowerBound = q1 - 3.0 * iqr; // Critical outliers only (3.0 instead of 1.5)\n    const upperBound = q3 + 3.0 * iqr;\n\n    return data.map(item => {\n      const isForecast = item.Forecast !== undefined && item.Forecast !== null;\n      return {\n        ...item,\n        Value: isForecast ? null : item.Value,\n        Forecast: isForecast ? item.Forecast : null,\n        ForecastUpper: isForecast ? item.ForecastUpper : null,\n        ForecastLower: isForecast ? item.ForecastLower : null,\n        formattedDate: format(new Date(item.Date), 'dd-MM-yyyy'),\n        dateString: format(new Date(item.Date), 'MMM d, yyyy'),\n        isCriticalOutlier: !isForecast && (item.Value < lowerBound || item.Value > upperBound),\n        timestamp: new Date(item.Date).getTime()\n      }\n    }).sort((a, b) => a.timestamp - b.timestamp);\n  }, [data]);\n\n  if (!isRealData) {\n    return (\n      <Card className=\"w-full\">\n        <CardHeader>\n          <CardTitle className=\"text-sm font-medium text-destructive\">\n            Data Visualization Unavailable\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center gap-2 text-destructive\">\n            <AlertTriangle className=\"h-5 w-5\" />\n            <span>\n              Visualization is disabled because the data is not from a validated backend workflow.\n            </span>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const hasForecast = processedData.some(d => d.Forecast !== null && d.Forecast !== undefined);\n  const hasOrders = processedData.some(d => d.Orders && d.Orders > 0);\n\n  // Get CRITICAL outliers only (for red dots) - only in actual data\n  const criticalOutliers = processedData.filter(d => d.isCriticalOutlier && d.Forecast === undefined);\n\n  const dataKey = target === 'Orders' ? 'Orders' : 'Value';\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">\n          {hasForecast ? 'Actual vs Forecast' : 'Historical Data'} - {target}\n        </CardTitle>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant={chartType === 'line' ? 'secondary' : 'ghost'}\n            size=\"sm\"\n            onClick={() => setChartType('line')}\n          >\n            <LineChart className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant={chartType === 'bar' ? 'secondary' : 'ghost'}\n            size=\"sm\"\n            onClick={() => setChartType('bar')}\n          >\n            <BarChart className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-[350px]\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <ComposedChart data={processedData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis\n                dataKey=\"dateString\"\n                tick={{ fontSize: 11 }}\n                angle={-45}\n                textAnchor=\"end\"\n                height={60}\n              />\n              {/* Left Y-axis: Actual values */}\n              <YAxis yAxisId=\"actual\" tick={{ fontSize: 12 }} domain={['auto', 'auto']} label={{ value: 'Actual', angle: -90, position: 'insideLeft', style: { fontSize: 10 } }} />\n              <Tooltip content={<CustomTooltip />} />\n              <Legend />\n\n              {/* Actual Data */}\n              {chartType === 'line' ? (\n                <Line\n                  yAxisId=\"actual\"\n                  type=\"monotone\"\n                  dataKey={dataKey}\n                  stroke=\"hsl(var(--primary))\"\n                  strokeWidth={2}\n                  name=\"Actual\"\n                  dot={{ r: 3 }}\n                  connectNulls={false}\n                />\n              ) : (\n                <Bar\n                  dataKey={dataKey}\n                  fill=\"hsl(var(--primary))\"\n                  name=\"Actual\"\n                />\n              )}\n\n              {/* Forecast Data */}\n              {hasForecast && (\n                <>\n                  {/* Right Y-axis: Forecast values */}\n                  <YAxis yAxisId=\"forecast\" orientation=\"right\" tick={{ fontSize: 12 }} label={{ value: 'Forecast', angle: 90, position: 'insideRight', style: { fontSize: 10 } }} />\n                  <Line\n                    yAxisId=\"forecast\"\n                    type=\"monotone\"\n                    dataKey=\"Forecast\"\n                    stroke=\"#3b82f6\"\n                    strokeWidth={2}\n                    strokeDasharray=\"5 5\"\n                    name=\"Forecast\"\n                    dot={{ r: 3, fill: '#3b82f6' }}\n                    connectNulls={false}\n                  />\n                  {/* Confidence Interval */}\n                  <Area\n                    yAxisId=\"forecast\"\n                    type=\"monotone\"\n                    dataKey=\"ForecastUpper\"\n                    stroke=\"none\"\n                    fill=\"#3b82f6\"\n                    fillOpacity={0.1}\n                    name=\"Upper Bound\"\n                  />\n                  <Area\n                    yAxisId=\"forecast\"\n                    type=\"monotone\"\n                    dataKey=\"ForecastLower\"\n                    stroke=\"none\"\n                    fill=\"#3b82f6\"\n                    fillOpacity={0.1}\n                    name=\"Lower Bound\"\n                  />\n                </>\n              )}\n\n              {/* Orders as Regressor (if available) */}\n              {hasOrders && target === 'Value' && (\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"Orders\"\n                  stroke=\"#10b981\"\n                  strokeWidth={1}\n                  strokeDasharray=\"3 3\"\n                  name=\"Orders (Regressor)\"\n                  dot={false}\n                  yAxisId=\"right\"\n                />\n              )}\n\n              {/* Outliers as Red Dots - Only show when requested (exploration/preprocessing) */}\n              {showOutliers && criticalOutliers.length > 0 && (\n                <Scatter\n                  data={criticalOutliers}\n                  dataKey={dataKey}\n                  fill=\"#ef4444\"\n                  shape=\"circle\"\n                  name=\"Outliers\"\n                />\n              )}\n\n              {hasOrders && target === 'Value' && (\n                <YAxis yAxisId=\"right\" orientation=\"right\" tick={{ fontSize: 12 }} />\n              )}\n            </ComposedChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Legend Info */}\n        <div className=\"mt-2 flex flex-wrap gap-4 text-xs text-muted-foreground\">\n          <div className=\"flex items-center gap-1\">\n            <div className=\"w-3 h-3 rounded-full bg-primary\"></div>\n            <span>Actual Data</span>\n          </div>\n          {hasForecast && (\n            <>\n              <div className=\"flex items-center gap-1\">\n                <div className=\"w-3 h-0.5 bg-blue-500\" style={{ borderTop: '2px dashed' }}></div>\n                <span>Forecast</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <div className=\"w-3 h-3 bg-blue-500 opacity-20\"></div>\n                <span>Confidence Interval</span>\n              </div>\n            </>\n          )}\n          {showOutliers && criticalOutliers.length > 0 && (\n            <div className=\"flex items-center gap-1\">\n              <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n              <span>{criticalOutliers.length} Outlier{criticalOutliers.length > 1 ? 's' : ''}</span>\n            </div>\n          )}\n          {hasOrders && target === 'Value' && (\n            <div className=\"flex items-center gap-1\">\n              <div className=\"w-3 h-0.5 bg-green-500\" style={{ borderTop: '2px dashed' }}></div>\n              <span>Orders (Regressor)</span>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3637, "column": 0}, "map": {"version":3,"sources":["file:///Users/martinprabhu/Downloads/support-operations-centre/new_app/src/components/dashboard/follow-up-questions-dialog.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { AlertCircle, CheckCircle2, Clock, HelpCircle } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport type { AnalysisRequirements, FollowUpQuestion, UserResponse } from '@/lib/follow-up-questions';\n\ninterface FollowUpQuestionsDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  requirements: AnalysisRequirements | null;\n  onSubmit: (responses: UserResponse[]) => void;\n  onSkip: () => void;\n}\n\nexport default function FollowUpQuestionsDialog({\n  open,\n  onOpenChange,\n  requirements,\n  onSubmit,\n  onSkip\n}: FollowUpQuestionsDialogProps) {\n  const [responses, setResponses] = useState<Map<string, any>>(new Map());\n  const [errors, setErrors] = useState<string[]>([]);\n\n  if (!requirements) return null;\n\n  const handleResponseChange = (questionId: string, value: any) => {\n    const newResponses = new Map(responses);\n    newResponses.set(questionId, value);\n    setResponses(newResponses);\n    \n    // Clear errors when user provides input\n    if (errors.length > 0) {\n      setErrors([]);\n    }\n  };\n\n  const handleSubmit = () => {\n    const userResponses: UserResponse[] = Array.from(responses.entries()).map(([questionId, answer]) => ({\n      questionId,\n      answer\n    }));\n\n    // Validate required questions\n    const requiredQuestions = requirements.questions.filter(q => q.required);\n    const missingRequired = requiredQuestions.filter(q => !responses.has(q.id));\n\n    if (missingRequired.length > 0) {\n      setErrors([`Please answer all required questions: ${missingRequired.map(q => q.question).join(', ')}`]);\n      return;\n    }\n\n    onSubmit(userResponses);\n    setResponses(new Map());\n    setErrors([]);\n  };\n\n  const renderQuestion = (question: FollowUpQuestion) => {\n    switch (question.type) {\n      case 'single_choice':\n        return (\n          <RadioGroup\n            value={responses.get(question.id) || ''}\n            onValueChange={(value) => handleResponseChange(question.id, value)}\n          >\n            {question.options?.map((option, index) => (\n              <div key={index} className=\"flex items-center space-x-2\">\n                <RadioGroupItem value={option} id={`${question.id}-${index}`} />\n                <Label \n                  htmlFor={`${question.id}-${index}`}\n                  className=\"flex-1 cursor-pointer text-sm\"\n                >\n                  {option}\n                </Label>\n              </div>\n            ))}\n          </RadioGroup>\n        );\n\n      case 'multiple_choice':\n        const selectedOptions = responses.get(question.id) || [];\n        return (\n          <div className=\"space-y-2\">\n            {question.options?.map((option, index) => (\n              <div key={index} className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={`${question.id}-${index}`}\n                  checked={selectedOptions.includes(option)}\n                  onCheckedChange={(checked) => {\n                    const currentSelection = responses.get(question.id) || [];\n                    let newSelection;\n                    if (checked) {\n                      newSelection = [...currentSelection, option];\n                    } else {\n                      newSelection = currentSelection.filter((item: string) => item !== option);\n                    }\n                    handleResponseChange(question.id, newSelection);\n                  }}\n                />\n                <Label \n                  htmlFor={`${question.id}-${index}`}\n                  className=\"flex-1 cursor-pointer text-sm\"\n                >\n                  {option}\n                </Label>\n              </div>\n            ))}\n          </div>\n        );\n\n      case 'text_input':\n        return (\n          <Textarea\n            value={responses.get(question.id) || ''}\n            onChange={(e) => handleResponseChange(question.id, e.target.value)}\n            placeholder=\"Enter your response...\"\n            className=\"w-full\"\n          />\n        );\n\n      case 'number_input':\n        return (\n          <Input\n            type=\"number\"\n            value={responses.get(question.id) || ''}\n            onChange={(e) => handleResponseChange(question.id, e.target.value)}\n            placeholder=\"Enter a number...\"\n            className=\"w-full\"\n          />\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  const getAnalysisTypeIcon = (type: string) => {\n    switch (type) {\n      case 'forecasting':\n        return '📈';\n      case 'data_exploration':\n        return '🔬';\n      case 'modeling':\n        return '🤖';\n      case 'complete_analysis':\n        return '🎯';\n      case 'business_insights':\n        return '💡';\n      default:\n        return '📊';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-100 text-red-800 border-red-200';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'low':\n        return 'bg-green-100 text-green-800 border-green-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const progress = (responses.size / requirements.questions.length) * 100;\n  const requiredCount = requirements.questions.filter(q => q.required).length;\n  const requiredCompleted = requirements.questions.filter(q => q.required && responses.has(q.id)).length;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-3\">\n            <span className=\"text-2xl\">{getAnalysisTypeIcon(requirements.analysisType)}</span>\n            <div>\n              <div>Customize Your Analysis</div>\n              <div className=\"text-sm text-muted-foreground font-normal\">\n                Help me understand your requirements for better results\n              </div>\n            </div>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Analysis Overview */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div>\n                  <h3 className=\"font-semibold text-lg\">\n                    {requirements.analysisType.replace('_', ' ').charAt(0).toUpperCase() + requirements.analysisType.replace('_', ' ').slice(1)}\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Estimated completion time: {requirements.estimatedTime}\n                  </p>\n                </div>\n                <Badge variant=\"outline\" className={getPriorityColor(requirements.priority)}>\n                  {requirements.priority.charAt(0).toUpperCase() + requirements.priority.slice(1)} Priority\n                </Badge>\n              </div>\n\n              {/* Progress Indicator */}\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span>Progress</span>\n                  <span className=\"text-muted-foreground\">\n                    {responses.size} of {requirements.questions.length} questions answered\n                  </span>\n                </div>\n                <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                  <div \n                    className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                    style={{ width: `${progress}%` }}\n                  />\n                </div>\n                <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                  <CheckCircle2 className=\"h-3 w-3\" />\n                  <span>{requiredCompleted} of {requiredCount} required questions completed</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Error Display */}\n          {errors.length > 0 && (\n            <Card className=\"border-red-200 bg-red-50\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start gap-3\">\n                  <AlertCircle className=\"h-5 w-5 text-red-600 mt-0.5\" />\n                  <div>\n                    <h4 className=\"font-medium text-red-800\">Please complete required fields</h4>\n                    <ul className=\"list-disc list-inside text-sm text-red-700 mt-1\">\n                      {errors.map((error, index) => (\n                        <li key={index}>{error}</li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Questions */}\n          <div className=\"space-y-4\">\n            {requirements.questions.map((question, index) => (\n              <Card key={question.id} className={cn(\n                \"transition-all duration-200\",\n                responses.has(question.id) ? \"border-green-200 bg-green-50/30\" : \"\",\n                question.required && \"border-l-4 border-l-blue-500\"\n              )}>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"flex items-start gap-3\">\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {index + 1}\n                    </Badge>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-start gap-2\">\n                        <span className=\"text-sm font-medium leading-tight\">\n                          {question.question}\n                        </span>\n                        {question.required && (\n                          <Badge variant=\"destructive\" className=\"text-xs\">\n                            Required\n                          </Badge>\n                        )}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground mt-1 capitalize\">\n                        {question.category.replace('_', ' ')} • {question.type.replace('_', ' ')}\n                      </div>\n                    </div>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  {renderQuestion(question)}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Helper Text */}\n          <Card className=\"bg-blue-50 border-blue-200\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-start gap-3\">\n                <HelpCircle className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n                <div className=\"text-sm\">\n                  <h4 className=\"font-medium text-blue-800 mb-1\">Why these questions?</h4>\n                  <p className=\"text-blue-700\">\n                    These questions help me customize the analysis to your specific needs, ensuring more accurate results and relevant insights for your business context.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <DialogFooter className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Clock className=\"h-4 w-4\" />\n            <span>This will help create a {requirements.estimatedTime} analysis</span>\n          </div>\n          <div className=\"flex gap-3\">\n            <Button \n              variant=\"outline\" \n              onClick={onSkip}\n            >\n              Skip & Use Defaults\n            </Button>\n            <Button \n              onClick={handleSubmit}\n              disabled={requiredCompleted < requiredCount}\n              className=\"min-w-[120px]\"\n            >\n              {requiredCompleted < requiredCount \n                ? `${requiredCount - requiredCompleted} required left`\n                : 'Start Analysis'\n              }\n            </Button>\n          </div>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4344, "column": 0}, "map": {"version":3,"sources":["file:///Users/martinprabhu/Downloads/support-operations-centre/new_app/src/components/dashboard/model-training-form.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState } from 'react';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { Brain, TrendingUp, Calendar, Target, Settings2 } from 'lucide-react';\n\nexport interface ModelTrainingConfig {\n  // Model Selection\n  models: string[];\n  \n  // Forecast Horizon\n  forecastHorizon: number;\n  forecastUnit: 'days' | 'weeks' | 'months';\n  \n  // Confidence Levels\n  confidenceLevels: number[];\n  \n  // Regressors & Features\n  includeHolidayEffects: boolean;\n  includeSeasonality: boolean;\n  seasonalityMode: 'additive' | 'multiplicative';\n  \n  // Feature Engineering\n  featureEngineering: {\n    lagFeatures: boolean;\n    rollingAverages: boolean;\n    trendFeatures: boolean;\n  };\n  \n  // Validation\n  validationMethod: 'time_series_cv' | 'holdout';\n  validationSplit: number;\n}\n\ninterface ModelTrainingFormProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSubmit: (config: ModelTrainingConfig) => void;\n  initialConfig?: Partial<ModelTrainingConfig>;\n}\n\nconst AVAILABLE_MODELS = [\n  { id: 'prophet', name: 'Prophet', description: 'Best for seasonal data with holidays' },\n  { id: 'xgboost', name: 'XGBoost', description: 'Machine learning approach, high accuracy' },\n  { id: 'lightgbm', name: 'LightGBM', description: 'Fast and accurate gradient boosting' },\n  { id: 'arima', name: 'ARIMA', description: 'Classical time series method' },\n  { id: 'lstm', name: 'LSTM', description: 'Deep learning for complex patterns' },\n];\n\nexport default function ModelTrainingForm({ open, onOpenChange, onSubmit, initialConfig }: ModelTrainingFormProps) {\n  const [config, setConfig] = useState<ModelTrainingConfig>({\n    models: initialConfig?.models || ['prophet', 'xgboost', 'lightgbm'],\n    forecastHorizon: initialConfig?.forecastHorizon || 30,\n    forecastUnit: initialConfig?.forecastUnit || 'days',\n    confidenceLevels: initialConfig?.confidenceLevels || [80, 90, 95],\n    includeHolidayEffects: initialConfig?.includeHolidayEffects ?? true,\n    includeSeasonality: initialConfig?.includeSeasonality ?? true,\n    seasonalityMode: initialConfig?.seasonalityMode || 'additive',\n    featureEngineering: {\n      lagFeatures: initialConfig?.featureEngineering?.lagFeatures ?? true,\n      rollingAverages: initialConfig?.featureEngineering?.rollingAverages ?? true,\n      trendFeatures: initialConfig?.featureEngineering?.trendFeatures ?? true,\n    },\n    validationMethod: initialConfig?.validationMethod || 'time_series_cv',\n    validationSplit: initialConfig?.validationSplit || 0.2,\n  });\n\n  const handleModelToggle = (modelId: string) => {\n    setConfig(prev => ({\n      ...prev,\n      models: prev.models.includes(modelId)\n        ? prev.models.filter(m => m !== modelId)\n        : [...prev.models, modelId]\n    }));\n  };\n\n  const handleConfidenceLevelToggle = (level: number) => {\n    setConfig(prev => ({\n      ...prev,\n      confidenceLevels: prev.confidenceLevels.includes(level)\n        ? prev.confidenceLevels.filter(l => l !== level)\n        : [...prev.confidenceLevels, level].sort((a, b) => a - b)\n    }));\n  };\n\n  const handleSubmit = () => {\n    if (config.models.length === 0) {\n      alert('Please select at least one model');\n      return;\n    }\n    if (config.confidenceLevels.length === 0) {\n      alert('Please select at least one confidence level');\n      return;\n    }\n    onSubmit(config);\n    onOpenChange(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Brain className=\"h-5 w-5\" />\n            Configure Forecasting Parameters\n          </DialogTitle>\n          <DialogDescription>\n            Customize your forecast settings - choose models, time horizon, confidence levels, and advanced features for accurate predictions\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6 py-4\">\n          {/* Model Selection */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-2\">\n              <Brain className=\"h-4 w-4 text-purple-600\" />\n              <Label className=\"text-base font-semibold\">Forecasting Models</Label>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">Select which ML models to train for your forecast (multiple models will be compared)</p>\n            <div className=\"grid grid-cols-1 gap-2\">\n              {AVAILABLE_MODELS.map(model => (\n                <div\n                  key={model.id}\n                  className={`flex items-start space-x-3 p-3 rounded-lg border cursor-pointer transition-colors ${\n                    config.models.includes(model.id)\n                      ? 'border-purple-500 bg-purple-50/50'\n                      : 'border-gray-200 hover:border-gray-300'\n                  }`}\n                  onClick={() => handleModelToggle(model.id)}\n                >\n                  <Checkbox\n                    checked={config.models.includes(model.id)}\n                    onCheckedChange={() => handleModelToggle(model.id)}\n                  />\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium\">{model.name}</div>\n                    <div className=\"text-sm text-muted-foreground\">{model.description}</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Forecast Horizon */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-2\">\n              <Calendar className=\"h-4 w-4 text-blue-600\" />\n              <Label className=\"text-base font-semibold\">Forecast Time Period</Label>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">How far into the future do you want to forecast?</p>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"horizon\">Number of Periods</Label>\n                <Input\n                  id=\"horizon\"\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"365\"\n                  value={config.forecastHorizon}\n                  onChange={(e) => setConfig(prev => ({ ...prev, forecastHorizon: parseInt(e.target.value) || 30 }))}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"unit\">Unit</Label>\n                <Select\n                  value={config.forecastUnit}\n                  onValueChange={(value: 'days' | 'weeks' | 'months') => \n                    setConfig(prev => ({ ...prev, forecastUnit: value }))\n                  }\n                >\n                  <SelectTrigger id=\"unit\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"days\">Days</SelectItem>\n                    <SelectItem value=\"weeks\">Weeks</SelectItem>\n                    <SelectItem value=\"months\">Months</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Confidence Levels */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-2\">\n              <Target className=\"h-4 w-4 text-green-600\" />\n              <Label className=\"text-base font-semibold\">Prediction Confidence Levels</Label>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">Choose confidence intervals for forecast uncertainty ranges (higher % = wider range)</p>\n            <div className=\"flex gap-3\">\n              {[80, 90, 95, 99].map(level => (\n                <Badge\n                  key={level}\n                  variant={config.confidenceLevels.includes(level) ? \"default\" : \"outline\"}\n                  className=\"cursor-pointer px-4 py-2\"\n                  onClick={() => handleConfidenceLevelToggle(level)}\n                >\n                  {level}%\n                </Badge>\n              ))}\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Regressors & Seasonality */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-4 w-4 text-orange-600\" />\n              <Label className=\"text-base font-semibold\">External Regressors & Patterns</Label>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">Include external factors that may influence your forecast</p>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-3\">\n                <Checkbox\n                  id=\"holiday\"\n                  checked={config.includeHolidayEffects}\n                  onCheckedChange={(checked) => \n                    setConfig(prev => ({ ...prev, includeHolidayEffects: checked as boolean }))\n                  }\n                />\n                <Label htmlFor=\"holiday\" className=\"font-normal cursor-pointer\">\n                  Holiday effects (accounts for holidays impacting your data)\n                </Label>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Checkbox\n                  id=\"seasonality\"\n                  checked={config.includeSeasonality}\n                  onCheckedChange={(checked) => \n                    setConfig(prev => ({ ...prev, includeSeasonality: checked as boolean }))\n                  }\n                />\n                <Label htmlFor=\"seasonality\" className=\"font-normal cursor-pointer\">\n                  Seasonality patterns (weekly, monthly, yearly cycles)\n                </Label>\n              </div>\n              {config.includeSeasonality && (\n                <div className=\"ml-6 space-y-2\">\n                  <Label htmlFor=\"seasonality-mode\" className=\"text-sm\">Seasonality Mode</Label>\n                  <Select\n                    value={config.seasonalityMode}\n                    onValueChange={(value: 'additive' | 'multiplicative') => \n                      setConfig(prev => ({ ...prev, seasonalityMode: value }))\n                    }\n                  >\n                    <SelectTrigger id=\"seasonality-mode\" className=\"w-48\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"additive\">Additive</SelectItem>\n                      <SelectItem value=\"multiplicative\">Multiplicative</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Feature Engineering */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-2\">\n              <Settings2 className=\"h-4 w-4 text-indigo-600\" />\n              <Label className=\"text-base font-semibold\">Advanced Feature Engineering</Label>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">Enhance model accuracy with engineered features from your historical data</p>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-3\">\n                <Checkbox\n                  id=\"lag\"\n                  checked={config.featureEngineering.lagFeatures}\n                  onCheckedChange={(checked) => \n                    setConfig(prev => ({ \n                      ...prev, \n                      featureEngineering: { ...prev.featureEngineering, lagFeatures: checked as boolean }\n                    }))\n                  }\n                />\n                <Label htmlFor=\"lag\" className=\"font-normal cursor-pointer\">\n                  Lag features (use past values as predictors)\n                </Label>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Checkbox\n                  id=\"rolling\"\n                  checked={config.featureEngineering.rollingAverages}\n                  onCheckedChange={(checked) => \n                    setConfig(prev => ({ \n                      ...prev, \n                      featureEngineering: { ...prev.featureEngineering, rollingAverages: checked as boolean }\n                    }))\n                  }\n                />\n                <Label htmlFor=\"rolling\" className=\"font-normal cursor-pointer\">\n                  Rolling averages (smooth short-term fluctuations)\n                </Label>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Checkbox\n                  id=\"trend\"\n                  checked={config.featureEngineering.trendFeatures}\n                  onCheckedChange={(checked) => \n                    setConfig(prev => ({ \n                      ...prev, \n                      featureEngineering: { ...prev.featureEngineering, trendFeatures: checked as boolean }\n                    }))\n                  }\n                />\n                <Label htmlFor=\"trend\" className=\"font-normal cursor-pointer\">\n                  Trend features (capture growth/decline patterns)\n                </Label>\n              </div>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Validation Method */}\n          <div className=\"space-y-3\">\n            <Label className=\"text-base font-semibold\">Model Validation Strategy</Label>\n            <p className=\"text-sm text-muted-foreground\">How should we test forecast accuracy before deployment?</p>\n            <Select\n              value={config.validationMethod}\n              onValueChange={(value: 'time_series_cv' | 'holdout') => \n                setConfig(prev => ({ ...prev, validationMethod: value }))\n              }\n            >\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"time_series_cv\">Time Series Cross-Validation (Recommended - more robust)</SelectItem>\n                <SelectItem value=\"holdout\">Holdout Validation (Faster - single split)</SelectItem>\n              </SelectContent>\n            </Select>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"split\" className=\"text-sm\">Test Data Size: {(config.validationSplit * 100).toFixed(0)}% of historical data</Label>\n              <Input\n                id=\"split\"\n                type=\"range\"\n                min=\"0.1\"\n                max=\"0.3\"\n                step=\"0.05\"\n                value={config.validationSplit}\n                onChange={(e) => setConfig(prev => ({ ...prev, validationSplit: parseFloat(e.target.value) }))}\n              />\n              <p className=\"text-xs text-muted-foreground\">\n                {config.validationSplit <= 0.15 ? 'Small test set - faster but less reliable' : \n                 config.validationSplit >= 0.25 ? 'Large test set - slower but more reliable' :\n                 'Balanced test set - good trade-off'}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n            Cancel\n          </Button>\n          <Button onClick={handleSubmit} disabled={config.models.length === 0}>\n            Generate Forecast\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5331, "column": 0}, "map": {"version":3,"sources":["file:///Users/martinprabhu/Downloads/support-operations-centre/new_app/src/components/dashboard/welcome-hero.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport BuLobSelector from \"./bu-lob-selector\";\nimport { useApp } from \"./app-provider\";\nimport { Sparkles, Paperclip, Send, BarChart3 } from \"lucide-react\";\n\nexport default function WelcomeHero() {\n  const { state, dispatch } = useApp();\n  const [prompt, setPrompt] = useState(\"\");\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  // Adjust height on content change\n  useEffect(() => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = \"auto\";\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n    }\n  }, [prompt]);\n\n  const canContinue = !!state.selectedBu && !!state.selectedLob;\n  \n  const start = () => {\n    if (canContinue) {\n      if (prompt.trim()) {\n        dispatch({ type: \"QUEUE_USER_PROMPT\", payload: prompt.trim() });\n      }\n      dispatch({ type: \"END_ONBOARDING\" });\n    }\n  };\n\n  const handlePromptClick = (promptText: string) => {\n    if (canContinue) {\n      dispatch({ type: \"QUEUE_USER_PROMPT\", payload: promptText });\n      dispatch({ type: \"END_ONBOARDING\" });\n    } else {\n      // If BU/LOB not selected, fill the textarea\n      setPrompt((p) => (p ? `${p} ${promptText}` : promptText));\n    }\n  };\n\n  return (\n    <main className=\"flex-1 overflow-auto\">\n      <div className=\"relative h-full w-full\">\n        <div className=\"absolute inset-0 -z-10 bg-[radial-gradient(ellipse_at_top_left,rgba(99,102,241,0.3),transparent_50%),radial-gradient(ellipse_at_bottom_right,rgba(168,85,247,0.25),transparent_50%),radial-gradient(ellipse_at_center,rgba(59,130,246,0.1),transparent_70%)]\" />\n        <div className=\"absolute inset-0 -z-10 bg-grid-pattern opacity-5\"></div>\n        <div className=\"mx-auto max-w-5xl px-6 py-16 text-center animate-fade-in\">\n          <div className=\"inline-flex items-center gap-2 rounded-full bg-primary/10 px-3 py-1 text-primary text-xs font-medium\">\n            <Sparkles className=\"h-4 w-4\" /> Plan • Chat • Visualize\n          </div>\n          <h1 className=\"mt-4 text-4xl md:text-6xl font-extrabold tracking-tight\">\n            Where your data becomes decisions\n          </h1>\n          <p className=\"mt-4 text-muted-foreground text-base md:text-lg max-w-2xl mx-auto\">\n            Select your Business Unit, tell the assistant what you want, and we’ll plan, analyze, and preview insights on demand.\n          </p>\n\n          {/* Top controls */}\n          <div className=\"mt-8 flex justify-center gap-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"p-2 text-foreground hover:bg-card/80 rounded-md\"\n              title=\"Attach data\"\n            >\n              <Paperclip className=\"h-6 w-6 text-foreground\" />\n            </Button>\n            <BuLobSelector variant=\"secondary\" size=\"sm\" />\n          </div>\n\n          {/* Input */}\n          <div className=\"mt-6 mx-auto max-w-3xl\">\n            <div className=\"rounded-2xl border bg-card/60 backdrop-blur-lg p-4 shadow-lg\">\n              <form onSubmit={(e) => { e.preventDefault(); start(); }} className=\"flex items-start gap-2\">\n                <Textarea\n                  ref={textareaRef}\n                  value={prompt}\n                  onChange={(e) => setPrompt(e.target.value)}\n                  placeholder=\"Describe what you need...\"\n                  className=\"flex-1 bg-background text-foreground placeholder:text-muted-foreground rounded-md px-4 py-3 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 resize-none overflow-hidden\"\n                  style={{ minHeight: \"128px\", height: \"auto\" }}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter' && !e.shiftKey) {\n                      e.preventDefault();\n                      if (canContinue && prompt.trim()) {\n                        start();\n                      }\n                    }\n                  }}\n                />\n                <Button\n                  type=\"submit\"\n                  size=\"icon\"\n                  disabled={!canContinue}\n                  className=\"p-3 bg-primary text-primary-foreground rounded-md hover:bg-primary/90\"\n                >\n                  <Send className=\"h-6 w-6\" />\n                </Button>\n              </form>\n            </div>\n          </div>\n\n          {/* Suggested prompts */}\n          <div className=\"mt-4 flex flex-wrap justify-center gap-2\">\n            {(() => {\n              if (!state.selectedBu || !state.selectedLob) {\n                return [\n                  \"Upload your sales data\",\n                  \"Show me a sample analysis\", \n                  \"What can I do with this app?\",\n                  \"How do I generate a forecast?\",\n                  \"Explore my data\"\n                ];\n              }\n              \n              // Dynamic prompts based on whether data is available\n              if (state.selectedLob?.hasData) {\n                return [\n                  \"Run complete forecasting analysis\",\n                  \"Explore data patterns and trends\",\n                  \"Clean and preprocess the data\",\n                  \"Generate business insights\",\n                  \"Train forecasting models\",\n                  \"What are the key performance indicators?\",\n                  \"Show me data quality assessment\",\n                  \"Generate forecast for next 30 days\"\n                ];\n              } else {\n                return [\n                  \"Get started with data onboarding\",\n                  \"Upload CSV or Excel data file\",\n                  \"Show me what analysis I can do\",\n                  \"Help me set up forecasting\",\n                  \"What data format do you need?\",\n                  \"Guide me through the process\",\n                  \"Show sample data analysis\",\n                  \"How to prepare my data?\"\n                ];\n              }\n            })().map((s) => (\n              <Button key={s} size=\"sm\" variant=\"outline\" onClick={() => handlePromptClick(s)}>\n                {s}\n              </Button>\n            ))}\n          </div>\n\n          {/* Highlights */}\n          <div className=\"mt-10 grid grid-cols-1 md:grid-cols-3 gap-4 text-left\">\n            <div className=\"rounded-xl border p-4 bg-card/50\">\n              <BarChart3 className=\"h-5 w-5 text-primary\" />\n              <h3 className=\"mt-2 font-semibold\">On-demand previews</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Visualize charts, tables, and reports only when needed—your chat stays center stage.\n              </p>\n            </div>\n            <div className=\"rounded-xl border p-4 bg-card/50\">\n              <Sparkles className=\"h-5 w-5 text-primary\" />\n              <h3 className=\"mt-2 font-semibold\">Plan & execute</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                We outline the workflow and execute steps with clear progress and results.\n              </p>\n            </div>\n            <div className=\"rounded-xl border p-4 bg-card/50\">\n              <Sparkles className=\"h-5 w-5 text-primary\" />\n              <h3 className=\"mt-2 font-semibold\">Data-aware chat</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Responses are grounded in your selected BU/LOB with actionable suggestions.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5729, "column": 0}, "map": {"version":3,"sources":["file:///Users/martinprabhu/Downloads/support-operations-centre/new_app/src/components/dashboard/main-content.tsx"],"sourcesContent":["\"use client\";\n\nimport React from \"react\";\nimport { useApp } from \"./app-provider\";\nimport EnhancedDataPanel from \"./enhanced-data-panel\";\nimport EnhancedChatPanel from \"./enhanced-chat-panel\";\nimport EnhancedWorkflowTree from \"./enhanced-workflow-tree\";\nimport WelcomeHero from \"./welcome-hero\";\n\nexport default function MainContent() {\n  const { state, dispatch } = useApp();\n\n  const handleDateRangeChange = (range: any) => {\n    dispatch({ type: 'SET_DATE_RANGE', payload: range });\n  };\n\n  if (state.isOnboarding) {\n    return <WelcomeHero />;\n  }\n\n  // Three-panel layout: Chat + Data + Insights\n  if (state.dataPanelOpen && state.insightsPanelOpen) {\n    const chatPanelPct = 40;\n    const dataPanelPct = 30;\n    const insightsPanelPct = 30;\n\n    return (\n      <main className=\"flex flex-1 overflow-hidden relative\">\n        {/* Three Panel Layout */}\n        <div className=\"flex flex-1 overflow-hidden\">\n          {/* Chat Panel */}\n          <div style={{ width: `${chatPanelPct}%` }} className=\"min-w-[30%]\">\n            <EnhancedChatPanel className=\"flex-1\" />\n          </div>\n          \n          {/* Resize Handle 1 */}\n          <div className=\"w-1 cursor-col-resize bg-border hover:bg-primary/40 transition-colors\" />\n          \n          {/* Data Panel */}\n          <div style={{ width: `${dataPanelPct}%` }} className=\"min-w-[25%]\">\n            <EnhancedDataPanel className=\"w-full h-full\" />\n          </div>\n          \n          {/* Resize Handle 2 */}\n          <div className=\"w-1 cursor-col-resize bg-border hover:bg-primary/40 transition-colors\" />\n          \n          {/* Enhanced Insights Panel */}\n          <div style={{ width: `${insightsPanelPct}%` }} className=\"min-w-[25%]\">\n            <EnhancedDataPanel className=\"w-full h-full\" />\n          </div>\n        </div>\n        \n        {/* Workflow Drawer */}\n        <EnhancedWorkflowTree />\n      </main>\n    );\n  }\n\n  // Two-panel layout: Chat + Data\n  if (state.dataPanelOpen) {\n    const leftPanelPct = state.dataPanelWidthPct;\n    const rightPanelPct = 100 - leftPanelPct;\n\n    const onMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {\n      e.preventDefault();\n      const startX = e.clientX;\n      const startLeft = leftPanelPct;\n      const onMove = (ev: MouseEvent) => {\n        const dx = ev.clientX - startX;\n        const w = document.body.clientWidth || window.innerWidth;\n        const deltaPct = (dx / w) * 100;\n        dispatch({ type: 'SET_DATA_PANEL_WIDTH', payload: startLeft + deltaPct });\n      };\n      const onUp = () => {\n        window.removeEventListener('mousemove', onMove);\n        window.removeEventListener('mouseup', onUp);\n      };\n      window.addEventListener('mousemove', onMove);\n      window.addEventListener('mouseup', onUp);\n    };\n\n    return (\n      <main className=\"flex flex-1 overflow-hidden relative\">\n        {/* Two Panel Layout */}\n        <div className=\"flex flex-1 overflow-hidden\">\n          <div style={{ width: `${leftPanelPct}%` }} className=\"min-w-[30%] max-w-[70%]\" >\n            <EnhancedChatPanel className=\"flex-1\" />\n          </div>\n          <div\n            onMouseDown={onMouseDown}\n            className=\"w-1 cursor-col-resize bg-border hover:bg-primary/40 transition-colors\"\n            title=\"Drag to resize\"\n          />\n          <div style={{ width: `${rightPanelPct}%` }} className=\"flex flex-col overflow-hidden\">\n            <EnhancedDataPanel className=\"w-full h-full\" />\n          </div>\n        </div>\n        \n        {/* Workflow Drawer */}\n        <EnhancedWorkflowTree />\n      </main>\n    );\n  }\n\n  // Two-panel layout: Chat + Insights\n  if (state.insightsPanelOpen) {\n    return (\n      <main className=\"flex flex-1 overflow-hidden relative\">\n        {/* Chat + Insights Layout */}\n        <div className=\"flex flex-1 overflow-hidden\">\n          <div className=\"flex-1 min-w-[50%]\">\n            <EnhancedChatPanel className=\"flex-1\" />\n          </div>\n          <div className=\"w-1 cursor-col-resize bg-border hover:bg-primary/40 transition-colors\" />\n          <div className=\"flex-1 min-w-[50%]\">\n            <EnhancedDataPanel className=\"w-full h-full\" />\n          </div>\n        </div>\n        \n        {/* Workflow Drawer */}\n        <EnhancedWorkflowTree />\n      </main>\n    );\n  }\n\n  // Single panel layout: Chat only\n  return (\n    <main className=\"flex flex-1 overflow-hidden relative\">\n      {/* Single Panel Layout */}\n      <div className=\"w-full flex flex-col overflow-hidden\">\n        <EnhancedChatPanel className=\"flex-1\" />\n      </div>\n      \n      {/* Workflow Drawer */}\n      <EnhancedWorkflowTree />\n    </main>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}