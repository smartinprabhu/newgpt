{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/martinprabhu/Downloads/support-operations-centre/new_app/src/components/dashboard/inline-capacity-planning.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { useApp } from './app-provider';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine } from 'recharts';\nimport { SequentialAgentWorkflow } from '@/lib/sequential-workflow';\n\ninterface InlineCapacityPlanningProps {\n  messageId: string;\n}\n\n// Helper function to convert week format to ISO date\nconst weekToISODate = (weekString: string): string => {\n  if (!weekString || !weekString.includes('-W')) {\n    return weekString; // Already in ISO format\n  }\n  // Format: YYYY-Www\n  const [year, week] = weekString.split('-W');\n  const date = new Date(parseInt(year), 0, 1);\n  const dayOfWeek = date.getDay();\n  const daysToMonday = dayOfWeek === 0 ? 1 : 8 - dayOfWeek;\n  date.setDate(date.getDate() + daysToMonday + (parseInt(week) - 1) * 7);\n  return date.toISOString().split('T')[0];\n};\n\n// Helper function to convert ISO date to week format for input\nconst isoDateToWeek = (isoDate: string): string => {\n  if (!isoDate) return '';\n  const date = new Date(isoDate);\n  const year = date.getFullYear();\n  const firstDayOfYear = new Date(year, 0, 1);\n  const dayOfWeek = firstDayOfYear.getDay();\n  const daysToMonday = dayOfWeek === 0 ? 1 : 8 - dayOfWeek;\n  const firstMonday = new Date(year, 0, 1 + daysToMonday);\n  const weekNumber = Math.ceil(((date.getTime() - firstMonday.getTime()) / 86400000 + 1) / 7);\n  return `${year}-W${String(weekNumber).padStart(2, '0')}`;\n};\n\nexport function InlineCapacityPlanning({ messageId }: InlineCapacityPlanningProps) {\n  const { state, dispatch } = useApp();\n  const [localAssumptions, setLocalAssumptions] = useState(state.capacityPlanning.assumptions);\n  const [isCalculating, setIsCalculating] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [chartType, setChartType] = useState<'line' | 'bar'>('line');\n  const [customDateRange, setCustomDateRange] = useState({\n    startDate: state.capacityPlanning.dateRange.startDate \n      ? isoDateToWeek(state.capacityPlanning.dateRange.startDate)\n      : '',\n    endDate: state.capacityPlanning.dateRange.endDate\n      ? isoDateToWeek(state.capacityPlanning.dateRange.endDate)\n      : ''\n  });\n  const resultsPerPage = 10;\n\n  // Update customDateRange when state changes\n  useEffect(() => {\n    if (state.capacityPlanning.dateRange.startDate && state.capacityPlanning.dateRange.endDate) {\n      setCustomDateRange({\n        startDate: isoDateToWeek(state.capacityPlanning.dateRange.startDate),\n        endDate: isoDateToWeek(state.capacityPlanning.dateRange.endDate)\n      });\n    }\n  }, [state.capacityPlanning.dateRange.startDate, state.capacityPlanning.dateRange.endDate]);\n\n  // Check if capacity planning is enabled\n  if (!state.capacityPlanning.enabled) {\n    return (\n      <Card className=\"w-full border-dashed\">\n        <CardContent className=\"pt-6\">\n          <p className=\"text-sm text-muted-foreground\">\n            Please run a forecast first to enable capacity planning\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Handle assumption change\n  const handleAssumptionChange = (field: keyof typeof localAssumptions, value: string) => {\n    const numValue = parseFloat(value);\n    setLocalAssumptions(prev => ({\n      ...prev,\n      [field]: isNaN(numValue) ? 0 : numValue\n    }));\n  };\n\n  // Handle assumption blur (save to state)\n  const handleAssumptionBlur = () => {\n    dispatch({\n      type: 'SET_CAPACITY_ASSUMPTIONS',\n      payload: localAssumptions\n    });\n  };\n\n  // Handle date range change\n  const handleDateRangeChange = (field: 'startDate' | 'endDate', value: string) => {\n    setCustomDateRange(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    \n    // Convert to ISO date and update global state\n    const isoDate = weekToISODate(value);\n    if (field === 'startDate' && customDateRange.endDate) {\n      const endIsoDate = weekToISODate(customDateRange.endDate);\n      dispatch({\n        type: 'SET_CAPACITY_DATE_RANGE',\n        payload: { startDate: isoDate, endDate: endIsoDate }\n      });\n    } else if (field === 'endDate' && customDateRange.startDate) {\n      const startIsoDate = weekToISODate(customDateRange.startDate);\n      dispatch({\n        type: 'SET_CAPACITY_DATE_RANGE',\n        payload: { startDate: startIsoDate, endDate: isoDate }\n      });\n    }\n  };\n\n  // Calculate HC\n  const handleCalculate = async () => {\n    try {\n      setIsCalculating(true);\n      dispatch({ type: 'SET_CAPACITY_STATUS', payload: 'calculating' });\n\n      const timeSeriesData = state.selectedLob?.timeSeriesData || [];\n      \n      // Convert week format to ISO dates\n      const startDateISO = weekToISODate(customDateRange.startDate);\n      const endDateISO = weekToISODate(customDateRange.endDate);\n      \n      console.log('🔍 Capacity Planning Debug:');\n      console.log('📊 Total data points:', timeSeriesData.length);\n      console.log('📊 Sample data point:', timeSeriesData[0]);\n      console.log('📊 Data properties:', timeSeriesData[0] ? Object.keys(timeSeriesData[0]) : 'No data');\n      console.log('📅 Week range (input):', customDateRange);\n      console.log('📅 Date range (ISO):', { startDateISO, endDateISO });\n\n      if (!customDateRange.startDate || !customDateRange.endDate) {\n        throw new Error('Please select both start and end weeks.');\n      }\n\n      const workflow = new SequentialAgentWorkflow(\n        { selectedBu: state.selectedBu, selectedLob: state.selectedLob },\n        timeSeriesData\n      );\n\n      // Separate actual and forecasted data\n      const actualData = timeSeriesData.filter(d => !d.Forecast || d.Forecast === 0);\n      const forecastedData = timeSeriesData.filter(d => d.Forecast && d.Forecast > 0);\n      \n      console.log('📊 Actual data points:', actualData.length, 'Sample:', actualData[0]);\n      console.log('📈 Forecasted data points:', forecastedData.length, 'Sample:', forecastedData[0]);\n\n      workflow['currentState'].forecastResults = {\n        forecastPoints: forecastedData.map(d => ({\n          date: new Date(d.Date),\n          forecast: d.Forecast,\n          is_future: true\n        }))\n      };\n      workflow['currentState'].processedData = timeSeriesData;\n\n      console.log('🚀 Starting capacity planning calculation...');\n      const results = await workflow.executeCapacityPlanningStep(\n        localAssumptions,\n        {\n          startDate: startDateISO,\n          endDate: endDateISO\n        }\n      );\n\n      console.log('✅ Capacity planning results:', results);\n\n      dispatch({\n        type: 'UPDATE_CAPACITY_RESULTS',\n        payload: results\n      });\n\n    } catch (error) {\n      console.error('❌ Capacity planning calculation failed:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      dispatch({\n        type: 'SET_CAPACITY_ERRORS',\n        payload: [errorMessage]\n      });\n    } finally {\n      setIsCalculating(false);\n    }\n  };\n\n  // Handle recalculate\n  const handleRecalculate = () => {\n    dispatch({ type: 'SET_CAPACITY_STATUS', payload: 'idle' });\n    setCurrentPage(1);\n  };\n\n  // Export to CSV\n  const handleExport = () => {\n    const { weeklyHC } = state.capacityPlanning.results;\n\n    const headers = ['Week', 'Volume', 'Required HC', 'Data Type'];\n    const rows = weeklyHC.map(week => [\n      week.week,\n      week.volume,\n      week.requiredHC,\n      week.dataType === 'actual' ? 'Actual' : 'Forecasted'\n    ]);\n\n    const csvContent = [\n      headers.join(','),\n      ...rows.map(row => row.join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `capacity-planning-${new Date().toISOString().split('T')[0]}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  // Format date for display (Short: Sep 09, 2025)\n  const formatDate = (dateString: string): string => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', { month: 'short', day: '2-digit', year: 'numeric' });\n  };\n\n  // Pagination calculations\n  const totalResults = state.capacityPlanning.results.weeklyHC.length;\n  const totalPages = Math.ceil(totalResults / resultsPerPage);\n  const startIndex = (currentPage - 1) * resultsPerPage;\n  const endIndex = startIndex + resultsPerPage;\n  const currentResults = state.capacityPlanning.results.weeklyHC.slice(startIndex, endIndex);\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg\">Capacity Planning</CardTitle>\n          {state.capacityPlanning.status === 'completed' && (\n            <Badge className=\"bg-green-50 text-green-700 border-green-300\">\n              Calculation Complete\n            </Badge>\n          )}\n          {state.capacityPlanning.status === 'calculating' && (\n            <Badge className=\"bg-blue-50 text-blue-700 border-blue-300\">\n              Calculating...\n            </Badge>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Error Display - Alert banner with bulleted list */}\n        {state.capacityPlanning.errors.length > 0 && (\n          <Alert variant=\"destructive\">\n            <AlertDescription>\n              <div className=\"flex items-start justify-between\">\n                <div>\n                  <p className=\"font-semibold mb-1\">Validation Errors:</p>\n                  <ul className=\"list-disc list-inside space-y-1\">\n                    {state.capacityPlanning.errors.map((error, idx) => (\n                      <li key={idx} className=\"text-sm\">{error}</li>\n                    ))}\n                  </ul>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => dispatch({ type: 'SET_CAPACITY_ERRORS', payload: [] })}\n                >\n                  Dismiss\n                </Button>\n              </div>\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Assumptions Configuration - Compact numeric inputs */}\n        <div>\n          <h4 className=\"text-sm font-semibold mb-2\">Configure Assumptions</h4>\n          <div className=\"grid grid-cols-2 gap-3\">\n            {[\n              { key: 'aht', label: 'AHT (seconds)', unit: 's' },\n              { key: 'occupancy', label: 'Occupancy', unit: '%' },\n              { key: 'backlog', label: 'Backlog', unit: '%' },\n              { key: 'volumeMix', label: 'Volume Mix', unit: '%' },\n              { key: 'inOfficeShrinkage', label: 'In-Office Shrinkage', unit: '%' },\n              { key: 'outOfOfficeShrinkage', label: 'Out-Office Shrinkage', unit: '%' },\n              { key: 'attrition', label: 'Attrition', unit: '%' }\n            ].map(({ key, label, unit }) => (\n              <div key={key} className=\"flex items-center gap-2\">\n                <label className=\"text-xs text-muted-foreground flex-1\">{label}:</label>\n                <Input\n                  type=\"number\"\n                  step=\"0.1\"\n                  value={localAssumptions[key as keyof typeof localAssumptions]}\n                  onChange={(e) => handleAssumptionChange(key as keyof typeof localAssumptions, e.target.value)}\n                  onBlur={handleAssumptionBlur}\n                  disabled={isCalculating}\n                  className=\"w-24 h-8 text-sm\"\n                />\n                <span className=\"text-xs text-muted-foreground w-6\">{unit}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Date Range Picker */}\n        <div>\n          <h4 className=\"text-sm font-semibold mb-2\">Week Range Selection</h4>\n          <div className=\"grid grid-cols-2 gap-3\">\n            <div>\n              <label className=\"text-xs text-muted-foreground block mb-1\">Start Week</label>\n              <Input\n                type=\"week\"\n                value={customDateRange.startDate}\n                onChange={(e) => handleDateRangeChange('startDate', e.target.value)}\n                className=\"text-sm\"\n                disabled={isCalculating}\n              />\n            </div>\n            <div>\n              <label className=\"text-xs text-muted-foreground block mb-1\">End Week</label>\n              <Input\n                type=\"week\"\n                value={customDateRange.endDate}\n                onChange={(e) => handleDateRangeChange('endDate', e.target.value)}\n                className=\"text-sm\"\n                disabled={isCalculating}\n              />\n            </div>\n          </div>\n          {state.capacityPlanning.dateRange.autoPopulated && (\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Auto-populated with last 5 historical weeks + all forecasted weeks\n            </p>\n          )}\n        </div>\n\n        {/* Calculate Button */}\n        {state.capacityPlanning.status !== 'completed' && (\n          <Button\n            onClick={handleCalculate}\n            disabled={isCalculating || state.capacityPlanning.errors.length > 0}\n            className=\"w-full\"\n            size=\"sm\"\n          >\n            {isCalculating ? 'Calculating...' : 'Calculate Required HC'}\n          </Button>\n        )}\n\n        {/* Results Section */}\n        {state.capacityPlanning.status === 'completed' && state.capacityPlanning.results.summary && (\n          <div className=\"space-y-4\">\n            {/* Action Buttons */}\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" size=\"sm\" onClick={handleRecalculate} className=\"flex-1\">\n                Recalculate\n              </Button>\n              <Button size=\"sm\" onClick={handleExport} className=\"flex-1\">\n                Export CSV\n              </Button>\n            </div>\n\n            {/* Data Type Notation */}\n            <div className=\"flex items-center gap-4 text-sm p-3 bg-muted/30 rounded-lg\">\n              <div className=\"font-semibold\">Data Breakdown:</div>\n              <div className=\"flex items-center gap-2\">\n                <Badge className=\"bg-green-50 text-green-700 border-green-300\">\n                  Actual\n                </Badge>\n                <span className=\"text-muted-foreground\">\n                  {state.capacityPlanning.results.weeklyHC.filter(w => w.dataType === 'actual').length} weeks\n                </span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Badge className=\"bg-blue-50 text-blue-700 border-blue-300\">\n                  Forecasted\n                </Badge>\n                <span className=\"text-muted-foreground\">\n                  {state.capacityPlanning.results.weeklyHC.filter(w => w.dataType === 'forecasted').length} weeks\n                </span>\n              </div>\n            </div>\n\n            {/* Summary Statistics - Compact Grid */}\n            <div className=\"grid grid-cols-3 gap-2 p-3 bg-muted/30 rounded-lg\">\n              <div>\n                <div className=\"text-xs text-muted-foreground\">Total HC</div>\n                <div className=\"text-lg font-bold\">{state.capacityPlanning.results.summary.totalHC.toLocaleString()}</div>\n              </div>\n              <div>\n                <div className=\"text-xs text-muted-foreground\">Avg HC</div>\n                <div className=\"text-lg font-bold\">{state.capacityPlanning.results.summary.avgHC.toLocaleString()}</div>\n              </div>\n              <div>\n                <div className=\"text-xs text-muted-foreground\">Min / Max</div>\n                <div className=\"text-sm font-semibold\">\n                  {state.capacityPlanning.results.summary.minHC.value} / {state.capacityPlanning.results.summary.maxHC.value}\n                </div>\n              </div>\n              <div>\n                <div className=\"text-xs text-muted-foreground\">Historical Avg</div>\n                <div className=\"text-sm font-semibold\">{state.capacityPlanning.results.summary.historicalAvg.toLocaleString()}</div>\n              </div>\n              <div>\n                <div className=\"text-xs text-muted-foreground\">Forecasted Avg</div>\n                <div className=\"text-sm font-semibold\">{state.capacityPlanning.results.summary.forecastedAvg.toLocaleString()}</div>\n              </div>\n            </div>\n\n            {/* HC Trend Chart with Toggle */}\n            <div className=\"border rounded-lg p-4\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <h4 className=\"font-semibold text-sm\">Required HC Trend</h4>\n                <div className=\"flex gap-1 border rounded-md p-1\">\n                  <Button\n                    size=\"sm\"\n                    variant={chartType === 'line' ? 'default' : 'ghost'}\n                    onClick={() => setChartType('line')}\n                    className=\"h-7 px-3 text-xs\"\n                  >\n                    Line\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant={chartType === 'bar' ? 'default' : 'ghost'}\n                    onClick={() => setChartType('bar')}\n                    className=\"h-7 px-3 text-xs\"\n                  >\n                    Bar\n                  </Button>\n                </div>\n              </div>\n              \n              <ResponsiveContainer width=\"100%\" height={250}>\n                {chartType === 'line' ? (\n                  <LineChart data={state.capacityPlanning.results.weeklyHC.map(week => ({\n                    week: formatDate(week.week),\n                    weekRaw: week.week,\n                    requiredHC: week.requiredHC,\n                    volume: week.volume,\n                    dataType: week.dataType\n                  }))}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis\n                      dataKey=\"week\"\n                      tick={{ fontSize: 11 }}\n                      angle={-45}\n                      textAnchor=\"end\"\n                      height={70}\n                    />\n                    <YAxis tick={{ fontSize: 11 }} />\n                    <Tooltip\n                      content={({ active, payload }) => {\n                        if (active && payload && payload.length) {\n                          const data = payload[0].payload;\n                          return (\n                            <div className=\"bg-white p-2 border rounded shadow-lg text-xs\">\n                              <p className=\"font-semibold\">{data.week}</p>\n                              <p>\n                                <span className=\"text-muted-foreground\">Required HC:</span>{' '}\n                                <span className=\"font-semibold\">{data.requiredHC}</span>\n                              </p>\n                              <p>\n                                <span className=\"text-muted-foreground\">Volume:</span>{' '}\n                                {data.volume.toLocaleString()}\n                              </p>\n                              <Badge\n                                className={data.dataType === 'actual' ? 'bg-green-50 text-green-700 text-xs mt-1' : 'bg-blue-50 text-blue-700 text-xs mt-1'}\n                              >\n                                {data.dataType === 'actual' ? 'Actual' : 'Forecasted'}\n                              </Badge>\n                            </div>\n                          );\n                        }\n                        return null;\n                      }}\n                    />\n                    <Legend wrapperStyle={{ fontSize: '11px' }} />\n                    {(() => {\n                      const chartData = state.capacityPlanning.results.weeklyHC.map(week => ({\n                        week: formatDate(week.week),\n                        dataType: week.dataType\n                      }));\n                      const splitIndex = chartData.findIndex(d => d.dataType === 'forecasted');\n                      return splitIndex > 0 ? (\n                        <ReferenceLine\n                          x={chartData[splitIndex].week}\n                          stroke=\"#666\"\n                          strokeDasharray=\"3 3\"\n                          label={{ value: 'Forecast Start', position: 'top', fontSize: 10 }}\n                        />\n                      ) : null;\n                    })()}\n                    <Line\n                      type=\"monotone\"\n                      dataKey=\"requiredHC\"\n                      stroke=\"#1976d2\"\n                      strokeWidth={2}\n                      name=\"Required HC\"\n                      dot={{ r: 3 }}\n                    />\n                  </LineChart>\n                ) : (\n                  <BarChart data={state.capacityPlanning.results.weeklyHC.map(week => ({\n                    week: formatDate(week.week),\n                    weekRaw: week.week,\n                    requiredHC: week.requiredHC,\n                    volume: week.volume,\n                    dataType: week.dataType\n                  }))}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis\n                      dataKey=\"week\"\n                      tick={{ fontSize: 11 }}\n                      angle={-45}\n                      textAnchor=\"end\"\n                      height={70}\n                    />\n                    <YAxis tick={{ fontSize: 11 }} />\n                    <Tooltip\n                      content={({ active, payload }) => {\n                        if (active && payload && payload.length) {\n                          const data = payload[0].payload;\n                          return (\n                            <div className=\"bg-white p-2 border rounded shadow-lg text-xs\">\n                              <p className=\"font-semibold\">{data.week}</p>\n                              <p>\n                                <span className=\"text-muted-foreground\">Required HC:</span>{' '}\n                                <span className=\"font-semibold\">{data.requiredHC}</span>\n                              </p>\n                              <p>\n                                <span className=\"text-muted-foreground\">Volume:</span>{' '}\n                                {data.volume.toLocaleString()}\n                              </p>\n                              <Badge\n                                className={data.dataType === 'actual' ? 'bg-green-50 text-green-700 text-xs mt-1' : 'bg-blue-50 text-blue-700 text-xs mt-1'}\n                              >\n                                {data.dataType === 'actual' ? 'Actual' : 'Forecasted'}\n                              </Badge>\n                            </div>\n                          );\n                        }\n                        return null;\n                      }}\n                    />\n                    <Legend wrapperStyle={{ fontSize: '11px' }} />\n                    {(() => {\n                      const chartData = state.capacityPlanning.results.weeklyHC.map(week => ({\n                        week: formatDate(week.week),\n                        dataType: week.dataType\n                      }));\n                      const splitIndex = chartData.findIndex(d => d.dataType === 'forecasted');\n                      return splitIndex > 0 ? (\n                        <ReferenceLine\n                          x={chartData[splitIndex].week}\n                          stroke=\"#666\"\n                          strokeDasharray=\"3 3\"\n                          label={{ value: 'Forecast Start', position: 'top', fontSize: 10 }}\n                        />\n                      ) : null;\n                    })()}\n                    <Bar\n                      dataKey=\"requiredHC\"\n                      fill=\"#1976d2\"\n                      name=\"Required HC\"\n                    />\n                  </BarChart>\n                )}\n              </ResponsiveContainer>\n            </div>\n\n            {/* Results Table with Strong Section Dividers */}\n            <div className=\"border rounded-lg overflow-hidden\">\n              <table className=\"w-full text-sm\">\n                <thead className=\"bg-muted border-b-2 border-border\">\n                  <tr>\n                    <th className=\"px-3 py-2 text-left font-semibold\">Week</th>\n                    <th className=\"px-3 py-2 text-right font-semibold\">Volume</th>\n                    <th className=\"px-3 py-2 text-right font-semibold\">Required HC</th>\n                    <th className=\"px-3 py-2 text-center font-semibold\">Type</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {currentResults.map((week, idx) => (\n                    <tr\n                      key={idx}\n                      className={week.dataType === 'forecasted' ? 'bg-muted/50' : ''}\n                    >\n                      <td className=\"px-3 py-2 border-t\">{formatDate(week.week)}</td>\n                      <td className=\"px-3 py-2 text-right border-t\">{week.volume.toLocaleString()}</td>\n                      <td className=\"px-3 py-2 text-right font-semibold border-t\">{week.requiredHC}</td>\n                      <td className=\"px-3 py-2 text-center border-t\">\n                        <Badge\n                          className={week.dataType === 'actual'\n                            ? 'bg-green-50 text-green-700 border-green-300'\n                            : 'bg-blue-50 text-blue-700 border-blue-300'\n                          }\n                        >\n                          {week.dataType === 'actual' ? 'Actual' : 'Forecasted'}\n                        </Badge>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n\n            {/* Pagination Controls - Numeric page selector */}\n            {totalPages > 1 && (\n              <div className=\"flex items-center justify-between text-sm\">\n                <div className=\"text-muted-foreground\">\n                  Showing {startIndex + 1}-{Math.min(endIndex, totalResults)} of {totalResults} weeks\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(p => Math.max(1, p - 1))}\n                    disabled={currentPage === 1}\n                  >\n                    Previous\n                  </Button>\n                  {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (\n                    <Button\n                      key={page}\n                      variant={currentPage === page ? 'default' : 'outline'}\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(page)}\n                      className=\"w-8 h-8 p-0\"\n                    >\n                      {page}\n                    </Button>\n                  ))}\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}\n                    disabled={currentPage === totalPages}\n                  >\n                    Next\n                  </Button>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}