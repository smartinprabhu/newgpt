{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/martinprabhu/Downloads/support-operations-centre/new_app/src/components/dashboard/enhanced-data-panel.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCaption, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { cn } from \"@/lib/utils\";\nimport { useApp } from \"./app-provider\";\nimport BuLobSelector from \"./bu-lob-selector\";\nimport EnhancedDataVisualizer from \"./enhanced-data-visualizer\";\nimport { statisticalAnalyzer, insightsGenerator, type DataPoint } from \"@/lib/statistical-analysis\";\nimport BIDashboard from './bi-dashboard';\nimport { dynamicInsightsAgent } from \"@/lib/dynamic-insights-agent\";\nimport ForecastComparisonChart from './forecast-comparison-chart';\nimport {\n  TrendingUp, TrendingDown, AlertTriangle, CheckCircle,\n  BarChart3, PieChart, LineChart, Activity, Target,\n  Zap, Brain, Eye, Download, RefreshCw, Filter, Calendar\n} from \"lucide-react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport type { DateRange, DynamicInsight } from \"@/lib/types\";\n\ninterface EnhancedMetrics {\n  value: number;\n  change: number;\n  changeType: 'positive' | 'negative' | 'neutral';\n  confidence: number;\n  trend: 'up' | 'down' | 'stable';\n}\n\ninterface InsightCard {\n  id: string;\n  title: string;\n  description: string;\n  severity: 'info' | 'warning' | 'success' | 'error';\n  actionable: boolean;\n  recommendation?: string;\n}\n\nexport default function EnhancedDataPanel({ className }: { className?: string }) {\n  const { state, dispatch } = useApp();\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [analyticsResults, setAnalyticsResults] = useState<any>(null);\n  const [insightCards, setInsightCards] = useState<InsightCard[]>([]);\n  const [dynamicInsights, setDynamicInsights] = useState<DynamicInsight[]>([]);\n  const [refreshInterval, setRefreshInterval] = useState<NodeJS.Timeout | null>(null);\n  const [selectedDateRange, setSelectedDateRange] = useState<DateRange>(state.dateRange);\n\n  // Enhanced data processing with date filtering\n  const filteredData = useMemo(() => {\n    if (!state.selectedLob?.timeSeriesData) return null;\n\n    let data = state.selectedLob.timeSeriesData;\n\n    // Apply date range filter\n    if (state.dateRange) {\n      data = data.filter(item => {\n        const itemDate = new Date(item.Date);\n        return itemDate >= state.dateRange!.start && itemDate <= state.dateRange!.end;\n      });\n    }\n\n    return data;\n  }, [state.selectedLob?.timeSeriesData, state.dateRange]);\n\n  const enhancedMetrics = useMemo(() => {\n    if (!filteredData || !state.analyzedData.hasEDA) return null;\n\n    const data = filteredData;\n    const currentValue = data[data.length - 1]?.Value || 0;\n    const previousValue = data[data.length - 2]?.Value || 0;\n    const change = ((currentValue - previousValue) / previousValue) * 100;\n\n    const totalValue = data.reduce((sum, item) => sum + item.Value, 0);\n    const totalOrders = data.reduce((sum, item) => sum + item.Orders, 0);\n    const avgValue = totalValue / data.length;\n    const avgOrders = totalOrders / data.length;\n\n    // Calculate trend using linear regression\n    const dataPoints: DataPoint[] = data.map(item => ({\n      date: new Date(item.Date),\n      value: item.Value,\n      orders: item.Orders\n    }));\n\n    const trendAnalysis = statisticalAnalyzer.analyzeTrend(dataPoints);\n\n    return {\n      totalValue: {\n        value: totalValue,\n        change: change,\n        changeType: change > 0 ? 'positive' : change < 0 ? 'negative' : 'neutral' as const,\n        confidence: trendAnalysis.confidence,\n        trend: trendAnalysis.direction === 'increasing' ? 'up' : trendAnalysis.direction === 'decreasing' ? 'down' : 'stable' as const\n      },\n      avgValue: {\n        value: avgValue,\n        change: change * 0.8, // Simplified\n        changeType: change > 0 ? 'positive' : 'negative' as const,\n        confidence: trendAnalysis.confidence * 0.9,\n        trend: trendAnalysis.direction === 'increasing' ? 'up' : 'down' as const\n      },\n      totalOrders: {\n        value: totalOrders,\n        change: change * 0.6, // Simplified correlation\n        changeType: change > 0 ? 'positive' : 'negative' as const,\n        confidence: trendAnalysis.confidence * 0.8,\n        trend: trendAnalysis.direction === 'increasing' ? 'up' : 'down' as const\n      },\n      efficiency: {\n        value: avgValue / (avgOrders || 1), // Value per order\n        change: change * 0.4,\n        changeType: change > 0 ? 'positive' : 'negative' as const,\n        confidence: trendAnalysis.confidence * 0.7,\n        trend: 'stable' as const\n      }\n    };\n  }, [state.selectedLob?.timeSeriesData]);\n\n  // Generate real insights from actual LOB data\n  const generateRealInsights = async () => {\n    if (!state.selectedLob?.timeSeriesData) {\n      setDynamicInsights([]);\n      return;\n    }\n\n    try {\n      const insights: DynamicInsight[] = [];\n      const data = state.selectedLob.timeSeriesData;\n      const forecastMetrics = state.selectedLob.forecastMetrics;\n\n      // Calculate real statistics from data\n      const values = data.map(d => d.Value);\n      const orders = data.map(d => d.Orders);\n      const totalValue = values.reduce((sum, v) => sum + v, 0);\n      const avgValue = totalValue / values.length;\n      const maxValue = Math.max(...values);\n      const minValue = Math.min(...values);\n\n      // Trend analysis\n      const recentValues = values.slice(-7);\n      const previousValues = values.slice(-14, -7);\n      const recentAvg = recentValues.reduce((sum, v) => sum + v, 0) / recentValues.length;\n      const previousAvg = previousValues.reduce((sum, v) => sum + v, 0) / previousValues.length;\n      const trendChange = ((recentAvg - previousAvg) / previousAvg) * 100;\n\n      // Add trend insight\n      if (Math.abs(trendChange) > 5) {\n        insights.push({\n          id: 'trend-analysis',\n          title: trendChange > 0 ? 'Positive Growth Trend' : 'Declining Trend',\n          description: `Recent 7-day average shows ${Math.abs(trendChange).toFixed(1)}% ${trendChange > 0 ? 'increase' : 'decrease'} compared to previous period`,\n          value: `${trendChange > 0 ? '+' : ''}${trendChange.toFixed(1)}%`,\n          trend: trendChange > 0 ? 'up' : 'down',\n          significance: Math.abs(trendChange) > 15 ? 'high' : Math.abs(trendChange) > 10 ? 'medium' : 'low',\n          category: 'trend',\n          actionable: true,\n          recommendation: trendChange > 0 ? 'Consider scaling operations to meet growing demand' : 'Investigate root causes and develop intervention strategies'\n        });\n      }\n\n      // Add forecast insights if available\n      if (forecastMetrics) {\n        insights.push({\n          id: 'model-performance',\n          title: `${forecastMetrics.modelName} Model Trained`,\n          description: `Model achieved ${forecastMetrics.accuracy.toFixed(1)}% accuracy with ${forecastMetrics.mape.toFixed(1)}% MAPE`,\n          value: `${forecastMetrics.accuracy.toFixed(1)}%`,\n          trend: 'up',\n          significance: forecastMetrics.accuracy > 90 ? 'high' : forecastMetrics.accuracy > 80 ? 'medium' : 'low',\n          category: 'forecast',\n          actionable: true,\n          recommendation: forecastMetrics.accuracy > 90 ? 'Model is production-ready for forecasting' : 'Consider additional feature engineering or model tuning'\n        });\n\n        // Add forecast horizon insight\n        insights.push({\n          id: 'forecast-horizon',\n          title: `${forecastMetrics.forecastHorizon}-Day Forecast Available`,\n          description: `Forecast generated with ${forecastMetrics.confidenceLevel}% confidence intervals`,\n          value: `${forecastMetrics.forecastHorizon} days`,\n          significance: 'medium',\n          category: 'forecast',\n          actionable: false\n        });\n      }\n\n      // Data quality insight\n      const hasForecasts = data.some(d => d.Forecast !== undefined);\n      if (hasForecasts) {\n        const forecastPoints = data.filter(d => d.Forecast !== undefined);\n        insights.push({\n          id: 'forecast-data',\n          title: 'Forecast Data Available',\n          description: `${forecastPoints.length} forecast points generated from historical data`,\n          value: `${forecastPoints.length} points`,\n          significance: 'medium',\n          category: 'forecast',\n          actionable: true,\n          recommendation: 'Review forecast accuracy and adjust confidence intervals as needed'\n        });\n      }\n\n      // Distribution insight\n      const stdDev = Math.sqrt(values.reduce((sum, v) => sum + Math.pow(v - avgValue, 2), 0) / values.length);\n      const cv = (stdDev / avgValue) * 100;\n\n      insights.push({\n        id: 'distribution',\n        title: 'Data Distribution Analysis',\n        description: `Coefficient of variation: ${cv.toFixed(1)}%. ${cv < 20 ? 'Low variability' : cv < 40 ? 'Moderate variability' : 'High variability'}`,\n        value: `CV: ${cv.toFixed(1)}%`,\n        significance: cv > 40 ? 'high' : 'low',\n        category: 'quality',\n        actionable: cv > 40,\n        recommendation: cv > 40 ? 'High variability detected. Consider segmentation or additional features' : undefined\n      });\n\n      setDynamicInsights(insights);\n    } catch (error) {\n      console.error('Failed to generate real insights:', error);\n      setDynamicInsights([]);\n    }\n  };\n\n  // Advanced analytics processing using real data\n  const performAdvancedAnalytics = async () => {\n    if (!state.selectedLob?.timeSeriesData) return;\n\n    setIsAnalyzing(true);\n\n    try {\n      const dataPoints: DataPoint[] = state.selectedLob.timeSeriesData.map(item => ({\n        date: new Date(item.Date),\n        value: item.Value,\n        orders: item.Orders\n      }));\n\n      // Comprehensive analysis using real data\n      const statisticalSummary = statisticalAnalyzer.generateSummary(dataPoints);\n      const trendAnalysis = statisticalAnalyzer.analyzeTrend(dataPoints);\n      const seasonalityAnalysis = statisticalAnalyzer.analyzeSeasonality(dataPoints);\n      const qualityReport = insightsGenerator.generateDataQualityReport(dataPoints);\n\n      // Only generate insights based on what has been analyzed in chat\n      const businessInsights = state.analyzedData.hasForecasting\n        ? insightsGenerator.generateForecastInsights(statisticalSummary)\n        : null;\n\n      const results = {\n        statistical: statisticalSummary,\n        trend: trendAnalysis,\n        seasonality: seasonalityAnalysis,\n        quality: qualityReport,\n        business: businessInsights || undefined\n      };\n\n      setAnalyticsResults(results);\n\n      // Generate insight cards from real analysis\n      const cards: InsightCard[] = [];\n\n      // Data quality insights from actual data\n      if (qualityReport.score < 80) {\n        cards.push({\n          id: 'quality-warning',\n          title: 'Data Quality Alert',\n          description: `Data quality score is ${qualityReport.score}/100. ${qualityReport.issues.length} issues detected.`,\n          severity: 'warning',\n          actionable: true,\n          recommendation: qualityReport.recommendations[0]\n        });\n      } else {\n        cards.push({\n          id: 'quality-good',\n          title: 'High Data Quality',\n          description: `Excellent data quality with a score of ${qualityReport.score}/100.`,\n          severity: 'success',\n          actionable: false\n        });\n      }\n\n      // Trend insights from real trend analysis\n      if (trendAnalysis.confidence > 0.7) {\n        cards.push({\n          id: 'trend-insight',\n          title: `${trendAnalysis.direction === 'increasing' ? 'Growth' : 'Decline'} Trend Detected`,\n          description: `Strong ${trendAnalysis.direction} trend with ${(trendAnalysis.confidence * 100).toFixed(0)}% confidence.`,\n          severity: trendAnalysis.direction === 'increasing' ? 'success' : 'warning',\n          actionable: true,\n          recommendation: trendAnalysis.direction === 'increasing' ?\n            'Consider scaling operations to meet growing demand' :\n            'Investigate causes and develop intervention strategies'\n        });\n      }\n\n      // Seasonality insights from real seasonality analysis\n      if (seasonalityAnalysis.hasSeasonality) {\n        cards.push({\n          id: 'seasonality-insight',\n          title: 'Seasonal Pattern Identified',\n          description: `Strong seasonal pattern detected with ${seasonalityAnalysis.dominantPeriods[0]?.period}-period cycle.`,\n          severity: 'info',\n          actionable: true,\n          recommendation: 'Leverage seasonal patterns for inventory and marketing planning'\n        });\n      }\n\n      // Business insights (only if forecasting was done)\n      if (businessInsights) {\n        if (businessInsights.opportunities.length > 0) {\n          cards.push({\n            id: 'business-opportunity',\n            title: 'Business Opportunity',\n            description: businessInsights.opportunities[0],\n            severity: 'success',\n            actionable: true,\n            recommendation: businessInsights.actionableRecommendations[0]\n          });\n        }\n\n        if (businessInsights.riskFactors.length > 0) {\n          cards.push({\n            id: 'business-risk',\n            title: 'Risk Factor Identified',\n            description: businessInsights.riskFactors[0],\n            severity: 'warning',\n            actionable: true,\n            recommendation: businessInsights.actionableRecommendations[1] || 'Monitor closely and develop mitigation strategies'\n          });\n        }\n      }\n\n      // Add forecast metrics card if available\n      if (state.selectedLob.forecastMetrics) {\n        const fm = state.selectedLob.forecastMetrics;\n        cards.push({\n          id: 'forecast-metrics',\n          title: `${fm.modelName} Model Performance`,\n          description: `Accuracy: ${fm.accuracy.toFixed(1)}%, MAPE: ${fm.mape.toFixed(1)}%, R²: ${fm.r2.toFixed(3)}`,\n          severity: fm.accuracy > 90 ? 'success' : fm.accuracy > 80 ? 'info' : 'warning',\n          actionable: true,\n          recommendation: fm.accuracy > 90 ? 'Model is production-ready' : 'Consider model tuning for better accuracy'\n        });\n      }\n\n      setInsightCards(cards);\n\n    } catch (error) {\n      console.error('Advanced analytics error:', error);\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  // Auto-refresh real insights based on actual session changes\n  useEffect(() => {\n    // Always generate real insights based on actual session data\n    generateRealInsights();\n\n    if (state.selectedLob?.hasData && (state.analyzedData.hasEDA || state.analyzedData.hasInsights)) {\n      performAdvancedAnalytics();\n    }\n  }, [state.selectedLob, state.selectedBu, state.businessUnits, state.analyzedData]);\n\n  // Cleanup interval\n  useEffect(() => {\n    return () => {\n      if (refreshInterval) clearInterval(refreshInterval);\n    };\n  }, [refreshInterval]);\n\n  const MetricCard = ({ title, metric, icon: Icon }: {\n    title: string;\n    metric: EnhancedMetrics;\n    icon: React.ComponentType<any>\n  }) => (\n    <Card className=\"relative overflow-hidden\">\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        <Icon className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">\n          {typeof metric.value === 'number' && metric.value > 1000\n            ? metric.value.toLocaleString()\n            : metric.value.toFixed(2)\n          }\n        </div>\n        <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n          <div className={cn(\n            \"flex items-center space-x-1\",\n            metric.changeType === 'positive' && \"text-green-600\",\n            metric.changeType === 'negative' && \"text-red-600\"\n          )}>\n            {metric.trend === 'up' && <TrendingUp className=\"h-3 w-3\" />}\n            {metric.trend === 'down' && <TrendingDown className=\"h-3 w-3\" />}\n            <span>{metric.change > 0 ? '+' : ''}{metric.change.toFixed(1)}%</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {(metric.confidence * 100).toFixed(0)}% confidence\n            </Badge>\n          </div>\n        </div>\n        <Progress\n          value={metric.confidence * 100}\n          className=\"mt-2 h-1\"\n        />\n      </CardContent>\n    </Card>\n  );\n\n  const DynamicInsightCard = ({ insight }: { insight: DynamicInsight }) => {\n    return (\n      <Card className={cn(\n        \"border-l-4 break-inside-avoid\",\n        insight.significance === 'high' && \"border-l-red-500 bg-red-50/50 dark:bg-red-950/20\",\n        insight.significance === 'medium' && \"border-l-yellow-500 bg-yellow-50/50 dark:bg-yellow-950/20\",\n        insight.significance === 'low' && \"border-l-blue-500 bg-blue-50/50 dark:bg-blue-950/20\"\n      )}>\n        <CardHeader className=\"pb-2 px-3 sm:px-4 pt-3 sm:pt-4\">\n          <div className=\"flex items-start sm:items-center justify-between gap-2 flex-wrap\">\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2 flex-1 min-w-0\">\n              <span className=\"flex-shrink-0\">\n                {insight.trend === 'up' && <TrendingUp className=\"h-4 w-4 text-green-500\" />}\n                {insight.trend === 'down' && <TrendingDown className=\"h-4 w-4 text-red-500\" />}\n                {!insight.trend && <Brain className=\"h-4 w-4 text-blue-500\" />}\n              </span>\n              <span className=\"truncate\">{insight.title}</span>\n            </CardTitle>\n            <div className=\"flex items-center gap-1\">\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {insight.category}\n              </Badge>\n              {insight.actionable && (\n                <Badge variant=\"outline\" className=\"text-xs flex-shrink-0\">\n                  <Target className=\"h-3 w-3 mr-1\" />\n                  Actionable\n                </Badge>\n              )}\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"px-3 sm:px-4 pb-3 sm:pb-4\">\n          <p className=\"text-sm text-muted-foreground mb-3 break-words\">{insight.description}</p>\n          <div className=\"flex items-center justify-between mb-3\">\n            <div className=\"text-lg font-semibold text-primary\">\n              {insight.value}\n            </div>\n            <Badge variant={insight.significance === 'high' ? 'destructive' : insight.significance === 'medium' ? 'default' : 'secondary'} className=\"text-xs\">\n              {insight.significance} priority\n            </Badge>\n          </div>\n\n          {insight.recommendation && (\n            <div className=\"text-xs bg-muted/50 rounded p-2 border-l-2 border-primary break-words\">\n              <strong>💡 Recommendation:</strong> {insight.recommendation}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const InsightCardComponent = ({ insight }: { insight: InsightCard }) => (\n    <Card className={cn(\n      \"border-l-4 break-inside-avoid\",\n      insight.severity === 'error' && \"border-l-red-500 bg-red-50/50 dark:bg-red-950/20\",\n      insight.severity === 'warning' && \"border-l-yellow-500 bg-yellow-50/50 dark:bg-yellow-950/20\",\n      insight.severity === 'success' && \"border-l-green-500 bg-green-50/50 dark:bg-green-950/20\",\n      insight.severity === 'info' && \"border-l-blue-500 bg-blue-50/50 dark:bg-blue-950/20\"\n    )}>\n      <CardHeader className=\"pb-2 px-3 sm:px-4 pt-3 sm:pt-4\">\n        <div className=\"flex items-start sm:items-center justify-between gap-2 flex-wrap\">\n          <CardTitle className=\"text-sm font-medium flex items-center gap-2 flex-1 min-w-0\">\n            <span className=\"flex-shrink-0\">\n              {insight.severity === 'error' && <AlertTriangle className=\"h-4 w-4 text-red-500\" />}\n              {insight.severity === 'warning' && <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />}\n              {insight.severity === 'success' && <CheckCircle className=\"h-4 w-4 text-green-500\" />}\n              {insight.severity === 'info' && <Eye className=\"h-4 w-4 text-blue-500\" />}\n            </span>\n            <span className=\"truncate\">{insight.title}</span>\n          </CardTitle>\n          {insight.actionable && (\n            <Badge variant=\"outline\" className=\"text-xs flex-shrink-0\">\n              <Target className=\"h-3 w-3 mr-1\" />\n              Actionable\n            </Badge>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent className=\"px-3 sm:px-4 pb-3 sm:pb-4\">\n        <p className=\"text-sm text-muted-foreground mb-2 break-words\">{insight.description}</p>\n        {insight.recommendation && (\n          <div className=\"text-xs bg-muted/50 rounded p-2 border-l-2 border-primary break-words\">\n            <strong>Recommendation:</strong> {insight.recommendation}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  const vizData = useMemo(() => filteredData, [filteredData]);\n\n  // Show message if no analysis has been done\n  if (!state.selectedLob?.hasData) {\n    return (\n      <Card className={cn(\"flex flex-col rounded-none border-0 md:border-r\", className)}>\n        <CardHeader className=\"p-4 border-b\">\n          <CardTitle className=\"text-lg flex items-center gap-2\">\n            <Brain className=\"h-5 w-5\" />\n            Enhanced Insights Panel\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center text-muted-foreground\">\n            <Brain className=\"mx-auto h-12 w-12 mb-4 opacity-50\" />\n            <p className=\"font-medium\">No Data Available</p>\n            <p className=\"text-sm\">Upload data and run analysis in chat to see insights</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!state.analyzedData.hasEDA && !state.analyzedData.hasInsights && !state.analyzedData.hasForecasting) {\n    return (\n      <Card className={cn(\"flex flex-col rounded-none border-0 md:border-r\", className)}>\n        <CardHeader className=\"p-4 border-b\">\n          <CardTitle className=\"text-lg flex items-center gap-2\">\n            <Brain className=\"h-5 w-5\" />\n            Enhanced Insights Panel\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center text-muted-foreground\">\n            <Activity className=\"mx-auto h-12 w-12 mb-4 opacity-50\" />\n            <p className=\"font-medium\">No Analysis Done Yet</p>\n            <p className=\"text-sm\">Ask me to explore your data or generate insights in the chat</p>\n            <div className=\"mt-4 text-xs space-y-1\">\n              <p><strong>Try asking:</strong></p>\n              <p>• \"Explore my data patterns\"</p>\n              <p>• \"Generate business insights\"</p>\n              <p>• \"Run a forecast analysis\"</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={cn(\"flex flex-col rounded-none border-0 md:border-r\", className)}>\n      <CardHeader className=\"p-4 border-b\">\n        <div className=\"flex items-center justify-between gap-2\">\n          <div className=\"flex items-center gap-2\">\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <Brain className=\"h-5 w-5\" />\n              Enhanced Insights Panel\n            </CardTitle>\n            {isAnalyzing && (\n              <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                <div className=\"h-3 w-3 animate-spin rounded-full border-2 border-current border-t-transparent\" />\n                Analyzing...\n              </div>\n            )}\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={performAdvancedAnalytics}\n              disabled={isAnalyzing || !state.selectedLob?.hasData}\n            >\n              <RefreshCw className={cn(\"h-4 w-4\", isAnalyzing && \"animate-spin\")} />\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => dispatch({ type: 'SET_DATA_PANEL_OPEN', payload: false })}\n            >\n              Hide\n            </Button>\n          </div>\n        </div>\n        <div className=\"flex items-center justify-between gap-2 mt-2\">\n          <BuLobSelector />\n          <div className=\"flex items-center gap-2\">\n            <Button\n              size=\"sm\"\n              variant={state.dataPanelTarget === \"units\" ? \"secondary\" : \"ghost\"}\n              onClick={() => dispatch({ type: 'SET_DATA_PANEL_TARGET', payload: 'units' })}\n            >\n              <Activity className=\"h-3 w-3 mr-1\" />\n              Value\n            </Button>\n            <Button\n              size=\"sm\"\n              variant={state.dataPanelTarget === \"revenue\" ? \"secondary\" : \"ghost\"}\n              onClick={() => dispatch({ type: 'SET_DATA_PANEL_TARGET', payload: 'revenue' })}\n            >\n              <BarChart3 className=\"h-3 w-3 mr-1\" />\n              Orders\n            </Button>\n          </div>\n        </div>\n\n        {/* Date Filter Section */}\n        <div className=\"flex items-center gap-2 mt-2 p-2 bg-muted/50 rounded-md\">\n          <Label className=\"text-sm font-medium flex items-center gap-1\">\n            <Calendar className=\"h-4 w-4\" />\n            Date Range:\n          </Label>\n          <Select\n            value={state.dateRange?.preset || 'last_year'}\n            onValueChange={(preset) => {\n              const now = new Date();\n              let start: Date;\n\n              switch (preset) {\n                case 'last_7_days':\n                  start = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n                  break;\n                case 'last_30_days':\n                  start = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n                  break;\n                case 'last_90_days':\n                  start = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);\n                  break;\n                case 'last_year':\n                  start = new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000);\n                  break;\n                default:\n                  return;\n              }\n\n              const newDateRange = {\n                start,\n                end: now,\n                preset: preset as DateRange['preset']\n              };\n\n              dispatch({ type: 'SET_DATE_RANGE', payload: newDateRange });\n              setSelectedDateRange(newDateRange);\n            }}\n          >\n            <SelectTrigger className=\"w-32\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"last_7_days\">Last 7 days</SelectItem>\n              <SelectItem value=\"last_30_days\">Last 30 days</SelectItem>\n              <SelectItem value=\"last_90_days\">Last 90 days</SelectItem>\n              <SelectItem value=\"last_year\">Last year</SelectItem>\n            </SelectContent>\n          </Select>\n          <Badge variant=\"outline\" className=\"text-xs\">\n            {state.dateRange ?\n              `${state.dateRange.start.toLocaleDateString()} - ${state.dateRange.end.toLocaleDateString()}` :\n              'All data'\n            }\n          </Badge>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"p-0 flex-1 min-h-0\">\n        <Tabs\n          value={state.dataPanelMode}\n          onValueChange={(v) => dispatch({ type: 'SET_DATA_PANEL_MODE', payload: v as any })}\n          className=\"flex flex-col h-full\"\n        >\n          <div className=\"px-2 sm:px-4 pt-3 border-b overflow-x-auto\">\n            <TabsList className=\"grid w-full grid-cols-4 min-w-max\">\n              <TabsTrigger\n                value=\"dashboard\"\n                className=\"text-xs sm:text-sm px-2 sm:px-4\"\n                disabled={!state.analyzedData.hasEDA}\n              >\n                <PieChart className=\"h-3 w-3 sm:mr-1\" />\n                <span className=\"hidden sm:inline\">Dashboard</span>\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"chart\"\n                className=\"text-xs sm:text-sm px-2 sm:px-4\"\n                disabled={!state.analyzedData.hasEDA}\n              >\n                <LineChart className=\"h-3 w-3 sm:mr-1\" />\n                <span className=\"hidden sm:inline\">Charts</span>\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"insights\"\n                className=\"text-xs sm:text-sm px-2 sm:px-4\"\n                disabled={!state.analyzedData.hasInsights && !state.analyzedData.hasForecasting}\n              >\n                <Zap className=\"h-3 w-3 sm:mr-1\" />\n                <span className=\"hidden sm:inline\">Insights</span>\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"table\"\n                className=\"text-xs sm:text-sm px-2 sm:px-4\"\n                disabled={!state.analyzedData.hasEDA}\n              >\n                <Filter className=\"h-3 w-3 sm:mr-1\" />\n                <span className=\"hidden sm:inline\">Data</span>\n              </TabsTrigger>\n            </TabsList>\n          </div>\n\n          <TabsContent value=\"dashboard\" className=\"flex-1 min-h-0 m-0\">\n            <ScrollArea className=\"h-full\">\n              {state.analyzedData.hasEDA ? (\n                <BIDashboard />\n              ) : (\n                <div className=\"p-4\">\n                  <Card className=\"border-l-4 border-l-yellow-500 bg-yellow-50/50 dark:bg-yellow-950/20\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <PieChart className=\"h-4 w-4 text-yellow-500\" />\n                        <h4 className=\"text-sm font-medium\">Dashboard Not Available</h4>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mb-3\">\n                        Dashboard requires data analysis to be completed first. Ask me to explore your data in the chat.\n                      </p>\n                      <div className=\"flex gap-2\">\n                        <Button size=\"sm\" variant=\"default\" className=\"h-7 text-xs\">\n                          Explore Data\n                        </Button>\n                        <Button size=\"sm\" variant=\"outline\" className=\"h-7 text-xs\">\n                          Upload Data\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n            </ScrollArea>\n          </TabsContent>\n\n          <TabsContent value=\"chart\" className=\"flex-1 min-h-0 m-0\">\n            <ScrollArea className=\"h-full\">\n              <div className=\"p-4 space-y-4\">\n                {vizData ? (\n                  <>\n                    {!state.analyzedData.hasEDA && (\n                      <Card className=\"border-l-4 border-l-blue-500 bg-blue-50/50 dark:bg-blue-950/20 mb-4\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <LineChart className=\"h-4 w-4 text-blue-500\" />\n                            <h4 className=\"text-sm font-medium\">Basic Charts Available</h4>\n                          </div>\n                          <p className=\"text-sm text-muted-foreground mb-3\">\n                            Showing basic visualization. Run data analysis for enhanced insights and statistical overlays.\n                          </p>\n                          <div className=\"flex gap-2\">\n                            <Button size=\"sm\" variant=\"default\" className=\"h-7 text-xs\">\n                              Analyze Data\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\" className=\"h-7 text-xs\">\n                              View Patterns\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    )}\n\n                    {/* Forecast vs Actual Comparison */}\n                    {state.analyzedData.hasForecasting && (\n                      <ForecastComparisonChart\n                        data={vizData}\n                        target={state.dataPanelTarget === 'units' ? 'Value' : 'Orders'}\n                        title=\"Actual vs Forecast Analysis\"\n                        chartMetrics={state.forecastMetrics}\n                      />\n                    )}\n\n                    <EnhancedDataVisualizer\n                      data={vizData}\n                      target={state.dataPanelTarget as 'Value' | 'Orders'}\n                      isRealData={true}\n                      statisticalAnalysis={analyticsResults}\n                    />\n                  </>\n                ) : (\n                  <Card className=\"border-l-4 border-l-red-500 bg-red-50/50 dark:bg-red-950/20\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <LineChart className=\"h-4 w-4 text-red-500\" />\n                        <h4 className=\"text-sm font-medium\">No Data for Charts</h4>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mb-3\">\n                        Select a Business Unit and Line of Business with uploaded data to see visualizations.\n                      </p>\n                      <div className=\"flex gap-2\">\n                        <Button size=\"sm\" variant=\"default\" className=\"h-7 text-xs\">\n                          Upload Data\n                        </Button>\n                        <Button size=\"sm\" variant=\"outline\" className=\"h-7 text-xs\">\n                          Create LOB\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            </ScrollArea>\n          </TabsContent>\n\n          <TabsContent value=\"insights\" className=\"flex-1 min-h-0 m-0\">\n            <ScrollArea className=\"h-full\">\n              <div className=\"p-4 space-y-3\">\n                {/* Real AI-Driven Insights - Always Show Based on Actual Session */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 mb-3\">\n                    <Brain className=\"h-4 w-4 text-primary\" />\n                    <h3 className=\"text-sm font-medium\">Session Insights</h3>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      AI-Generated\n                    </Badge>\n                  </div>\n                  {dynamicInsights.length > 0 ? (\n                    dynamicInsights.map(insight => (\n                      <DynamicInsightCard key={insight.id} insight={insight} />\n                    ))\n                  ) : (\n                    <Card className=\"border-l-4 border-l-blue-500 bg-blue-50/50 dark:bg-blue-950/20\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <Brain className=\"h-4 w-4 text-blue-500\" />\n                          <h4 className=\"text-sm font-medium\">Analyzing Session...</h4>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground mb-3\">\n                          I'm analyzing your current session to provide personalized insights.\n                        </p>\n                        <div className=\"flex gap-2\">\n                          <Button size=\"sm\" variant=\"default\" className=\"h-7 text-xs\">\n                            Create Business Unit\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" className=\"h-7 text-xs\">\n                            Learn More\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n                </div>\n\n                {/* Statistical Insights - Only show if data has been analyzed */}\n                {insightCards.length > 0 && state.analyzedData.hasEDA && (\n                  <div className=\"space-y-3 mt-6\">\n                    <div className=\"flex items-center gap-2 mb-3\">\n                      <Zap className=\"h-4 w-4 text-yellow-500\" />\n                      <h3 className=\"text-sm font-medium\">Statistical Analysis</h3>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        Data-Driven\n                      </Badge>\n                    </div>\n                    {insightCards.map(insight => (\n                      <InsightCardComponent key={insight.id} insight={insight} />\n                    ))}\n                  </div>\n                )}\n\n                {/* Refresh Button */}\n                <div className=\"mt-4 pt-4 border-t\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={generateRealInsights}\n                    className=\"w-full\"\n                  >\n                    <RefreshCw className=\"h-3 w-3 mr-1\" />\n                    Refresh Insights\n                  </Button>\n                </div>\n              </div>\n            </ScrollArea>\n          </TabsContent>\n\n          <TabsContent value=\"table\" className=\"flex-1 min-h-0 m-0\">\n            <ScrollArea className=\"h-full\">\n              <div className=\"p-4\">\n                {vizData ? (\n                  <Table>\n                    <TableCaption>\n                      Weekly {state.dataPanelTarget} for {state.selectedLob?.name}\n                      {analyticsResults && ` (Quality Score: ${analyticsResults.quality?.score || 'N/A'}/100)`}\n                    </TableCaption>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Date</TableHead>\n                        <TableHead className=\"text-right\">Value</TableHead>\n                        <TableHead className=\"text-right\">Orders</TableHead>\n                        <TableHead className=\"text-right\">Efficiency</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {vizData.map((row, i) => {\n                        const efficiency = row.Value / (row.Orders || 1);\n                        const isOutlier = analyticsResults?.statistical?.outliers?.indices?.includes(i) || false;\n                        const isForecast = row.isForecast || false;\n                        return (\n                          <TableRow key={i} className={isOutlier ? \"bg-yellow-50/50 dark:bg-yellow-950/20\" : isForecast ? \"bg-blue-50/30 dark:bg-blue-950/20\" : \"\"}>\n                            <TableCell className=\"font-medium\">\n                              {new Date(row.Date).toLocaleDateString()}\n                              {isOutlier && (\n                                <Badge variant=\"outline\" className=\"ml-2 text-xs\">\n                                  Outlier\n                                </Badge>\n                              )}\n                              {isForecast && (\n                                <Badge variant=\"outline\" className=\"ml-2 text-xs bg-blue-100 dark:bg-blue-900\">\n                                  Forecast\n                                </Badge>\n                              )}\n                            </TableCell>\n                            <TableCell className=\"text-right font-mono\">\n                              {row.Value?.toLocaleString() || 'N/A'}\n                            </TableCell>\n                            <TableCell className=\"text-right font-mono\">\n                              {row.Orders?.toLocaleString() || '-'}\n                            </TableCell>\n                            <TableCell className=\"text-right font-mono text-muted-foreground\">\n                              {row.Orders ? efficiency.toFixed(2) : '-'}\n                            </TableCell>\n                          </TableRow>\n                        );\n                      })}\n                    </TableBody>\n                  </Table>\n                ) : (\n                  <div className=\"text-center text-sm text-muted-foreground py-10 px-4 border rounded-md bg-muted/30\">\n                    <Filter className=\"mx-auto h-10 w-10 text-muted-foreground/50 mb-2\" />\n                    <p>Select a Business Unit / LOB with data to see enhanced data table.</p>\n                  </div>\n                )}\n              </div>\n            </ScrollArea>\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}