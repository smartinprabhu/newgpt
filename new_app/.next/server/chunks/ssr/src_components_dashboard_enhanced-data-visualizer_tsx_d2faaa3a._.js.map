{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/martinprabhu/Downloads/support-operations-centre/new_app/src/components/dashboard/enhanced-data-visualizer.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useMemo } from 'react';\nimport { LineChart, Line, AreaChart, Area, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend, ScatterChart, Scatter, ComposedChart, ReferenceLine } from 'recharts';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { TrendingUp, TrendingDown, BarChart3, Activity, Zap, Eye, AlertTriangle } from 'lucide-react';\nimport type { WeeklyData } from '@/lib/types';\nimport { cn } from '@/lib/utils';\n\ninterface EnhancedDataVisualizerProps {\n  data: WeeklyData[];\n  target: 'Value' | 'Orders';\n  isRealData: boolean;\n  statisticalAnalysis?: any;\n}\n\ninterface ChartDataPoint extends WeeklyData {\n  formattedDate: string;\n  trend?: number;\n  forecastUpper?: number;\n  forecastLower?: number;\n  isOutlier?: boolean;\n  movingAverage?: number;\n}\n\nexport default function EnhancedDataVisualizer({ \n  data, \n  target, \n  isRealData,\n  statisticalAnalysis \n}: EnhancedDataVisualizerProps) {\n  \n  // Enhanced data processing with statistical overlays\n  const processedData: ChartDataPoint[] = useMemo(() => {\n    if (!data || data.length === 0) return [];\n\n    const processed = data.map((item, index) => {\n      const date = new Date(item.Date);\n      \n      // Calculate moving average (7-day window)\n      const windowStart = Math.max(0, index - 3);\n      const windowEnd = Math.min(data.length, index + 4);\n      const windowData = data.slice(windowStart, windowEnd);\n      const movingAverage = windowData.reduce((sum, d) => sum + d[target], 0) / windowData.length;\n      \n      // Linear trend line\n      const trend = statisticalAnalysis?.trend?.linearRegression \n        ? statisticalAnalysis.trend.linearRegression.intercept + \n          statisticalAnalysis.trend.linearRegression.slope * index\n        : undefined;\n      \n      // Forecast confidence intervals (simplified)\n      const forecastUpper = trend ? trend * 1.1 : undefined;\n      const forecastLower = trend ? trend * 0.9 : undefined;\n      \n      // Mark outliers\n      const isOutlier = statisticalAnalysis?.statistical?.outliers?.indices?.includes(index) || false;\n      \n      // Create separate fields for actual and forecast to avoid plotting 0 values\n      // ActualValue: only has value for historical data (where Forecast is undefined or 0)\n      // ForecastValue: only has value for forecast data (where Forecast > 0)\n      const isForecastPoint = item.Forecast && item.Forecast > 0;\n      const actualValue = isForecastPoint ? null : item[target];\n      \n      return {\n        ...item,\n        formattedDate: date.toLocaleDateString('en-US', { \n          month: 'short', \n          day: 'numeric' \n        }),\n        trend,\n        forecastUpper,\n        forecastLower,\n        isOutlier,\n        movingAverage,\n        ActualValue: actualValue  // New field: null for forecast points\n      };\n    });\n\n    return processed;\n  }, [data, target, statisticalAnalysis]);\n\n  // Statistical insights for display\n  const insights = useMemo(() => {\n    if (!statisticalAnalysis) return null;\n\n    const stats = statisticalAnalysis.statistical;\n    const trend = statisticalAnalysis.trend;\n    const quality = statisticalAnalysis.quality;\n\n    return {\n      mean: stats?.mean || 0,\n      stdDev: stats?.standardDeviation || 0,\n      trend: trend?.direction || 'stable',\n      trendConfidence: trend?.confidence || 0,\n      r2: trend?.linearRegression?.rSquared || 0,\n      outlierCount: stats?.outliers?.values.length || 0,\n      qualityScore: quality?.score || 0,\n      skewness: stats?.skewness || 0,\n      kurtosis: stats?.kurtosis || 0\n    };\n  }, [statisticalAnalysis]);\n\n  // Custom tooltip with enhanced information\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (!active || !payload || payload.length === 0) return null;\n\n    const data = payload[0]?.payload;\n    if (!data) return null;\n\n    return (\n      <div className=\"bg-background border rounded-lg shadow-lg p-3 space-y-2\">\n        <p className=\"font-medium text-sm\">{label}</p>\n        <div className=\"space-y-1 text-xs\">\n          <div className=\"flex justify-between gap-4\">\n            <span className=\"text-muted-foreground\">Value:</span>\n            <span className=\"font-mono\">{data.Value?.toLocaleString() || 'N/A'}</span>\n          </div>\n          {data.Orders !== undefined && (\n            <div className=\"flex justify-between gap-4\">\n              <span className=\"text-muted-foreground\">Orders:</span>\n              <span className=\"font-mono\">{data.Orders.toLocaleString()}</span>\n            </div>\n          )}\n          {data.Forecast !== undefined && (\n            <div className=\"flex justify-between gap-4\">\n              <span className=\"text-muted-foreground\">Forecast:</span>\n              <span className=\"font-mono text-green-600 dark:text-green-400\">{data.Forecast.toLocaleString()}</span>\n            </div>\n          )}\n          {data.ForecastLower !== undefined && data.ForecastUpper !== undefined && (\n            <div className=\"flex justify-between gap-4\">\n              <span className=\"text-muted-foreground\">Confidence:</span>\n              <span className=\"font-mono text-xs\">{data.ForecastLower.toLocaleString()} - {data.ForecastUpper.toLocaleString()}</span>\n            </div>\n          )}\n          {data.movingAverage && (\n            <div className=\"flex justify-between gap-4\">\n              <span className=\"text-muted-foreground\">7-day Avg:</span>\n              <span className=\"font-mono\">{data.movingAverage.toFixed(0)}</span>\n            </div>\n          )}\n          {data.trend && (\n            <div className=\"flex justify-between gap-4\">\n              <span className=\"text-muted-foreground\">Trend:</span>\n              <span className=\"font-mono\">{data.trend.toFixed(0)}</span>\n            </div>\n          )}\n          {data.isOutlier && (\n            <Badge variant=\"outline\" className=\"text-xs\">\n              <AlertTriangle className=\"h-3 w-3 mr-1\" />\n              Outlier Detected\n            </Badge>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  // Statistical summary component\n  const StatisticalSummary = () => {\n    if (!insights) return null;\n\n    return (\n      <div className=\"grid grid-cols-2 gap-3 mb-4\">\n        <Card className=\"p-3\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <div className=\"text-xs text-muted-foreground\">Mean ± Std Dev</div>\n              <div className=\"font-mono text-sm\">\n                {insights.mean.toFixed(0)} ± {insights.stdDev.toFixed(0)}\n              </div>\n            </div>\n            <Activity className=\"h-4 w-4 text-muted-foreground\" />\n          </div>\n        </Card>\n        \n        <Card className=\"p-3\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <div className=\"text-xs text-muted-foreground\">Trend (R²)</div>\n              <div className=\"font-mono text-sm flex items-center gap-1\">\n                {insights.trend === 'increasing' && <TrendingUp className=\"h-3 w-3 text-green-500\" />}\n                {insights.trend === 'decreasing' && <TrendingDown className=\"h-3 w-3 text-red-500\" />}\n                {insights.r2.toFixed(3)}\n              </div>\n            </div>\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n          </div>\n        </Card>\n        \n        <Card className=\"p-3\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <div className=\"text-xs text-muted-foreground\">Data Quality</div>\n              <div className=\"font-mono text-sm\">\n                {insights.qualityScore}/100\n              </div>\n            </div>\n            <Eye className=\"h-4 w-4 text-muted-foreground\" />\n          </div>\n        </Card>\n        \n        <Card className=\"p-3\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <div className=\"text-xs text-muted-foreground\">Outliers</div>\n              <div className=\"font-mono text-sm flex items-center gap-1\">\n                {insights.outlierCount > 0 && <AlertTriangle className=\"h-3 w-3 text-yellow-500\" />}\n                {insights.outlierCount}\n              </div>\n            </div>\n            <Zap className=\"h-4 w-4 text-muted-foreground\" />\n          </div>\n        </Card>\n      </div>\n    );\n  };\n\n  if (!processedData || processedData.length === 0) {\n    return (\n      <div className=\"text-center text-muted-foreground py-8\">\n        <BarChart3 className=\"mx-auto h-12 w-12 opacity-50 mb-4\" />\n        <p>No data available for visualization</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"font-semibold text-sm\">Enhanced {target} Analysis</h3>\n          <p className=\"text-xs text-muted-foreground\">\n            {processedData.length} data points with statistical overlays\n          </p>\n        </div>\n        {insights && (\n          <Badge variant=\"outline\" className=\"text-xs\">\n            <Zap className=\"h-3 w-3 mr-1\" />\n            AI Insights Enabled\n          </Badge>\n        )}\n      </div>\n\n      <StatisticalSummary />\n\n      <Tabs defaultValue=\"trend\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"trend\" className=\"text-xs\">Trend</TabsTrigger>\n          <TabsTrigger value=\"distribution\" className=\"text-xs\">Distribution</TabsTrigger>\n          <TabsTrigger value=\"correlation\" className=\"text-xs\">Correlation</TabsTrigger>\n          <TabsTrigger value=\"forecast\" className=\"text-xs\">Forecast</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"trend\" className=\"mt-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm flex items-center gap-2\">\n                <TrendingUp className=\"h-4 w-4\" />\n                {processedData.some(d => d.Forecast !== undefined) \n                  ? 'Actual & Forecast Trend' \n                  : 'Trend Analysis with Moving Average'}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <ComposedChart data={processedData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" opacity={0.3} />\n                  <XAxis \n                    dataKey=\"formattedDate\" \n                    fontSize={10}\n                    interval=\"preserveStartEnd\"\n                  />\n                  {/* Y-axis 1 (left): Actual data */}\n                  <YAxis \n                    yAxisId=\"actual\"\n                    fontSize={10} \n                    stroke=\"#8884d8\"\n                    label={{ value: 'Actual', angle: -90, position: 'insideLeft', style: { fontSize: 10, fill: '#8884d8' } }}\n                  />\n                  \n                  {/* Y-axis 2 (right): Forecast data - only show if forecast exists */}\n                  {processedData.some(d => d.Forecast !== undefined) && (\n                    <YAxis \n                      yAxisId=\"forecast\"\n                      orientation=\"right\"\n                      fontSize={10}\n                      stroke=\"#10b981\"\n                      label={{ value: 'Forecast', angle: 90, position: 'insideRight', style: { fontSize: 10, fill: '#10b981' } }}\n                    />\n                  )}\n                  \n                  <Tooltip content={<CustomTooltip />} />\n                  <Legend fontSize={10} />\n                  \n                  {/* Confidence interval area for forecast - uses forecast Y-axis */}\n                  {processedData.some(d => d.ForecastUpper !== undefined) && (\n                    <>\n                      <Area \n                        yAxisId=\"forecast\"\n                        type=\"monotone\"\n                        dataKey=\"ForecastUpper\"\n                        stroke=\"none\"\n                        fill=\"#10b981\"\n                        fillOpacity={0.15}\n                        name=\"Forecast Confidence\"\n                      />\n                      <Area \n                        yAxisId=\"forecast\"\n                        type=\"monotone\"\n                        dataKey=\"ForecastLower\"\n                        stroke=\"none\"\n                        fill=\"#ffffff\"\n                        fillOpacity={1}\n                      />\n                    </>\n                  )}\n                  \n                  {/* Main data line - Actual values on Y-axis 1 (left) */}\n                  <Line \n                    yAxisId=\"actual\"\n                    type=\"monotone\" \n                    dataKey=\"ActualValue\"\n                    stroke=\"#8884d8\" \n                    strokeWidth={2}\n                    dot={(props) => {\n                      const { cx, cy, payload } = props;\n                      if (!payload || !payload.ActualValue) return null;\n                      return (\n                        <circle\n                          cx={cx}\n                          cy={cy}\n                          r={payload?.isOutlier ? 5 : 3}\n                          fill={payload?.isOutlier ? \"#ef4444\" : \"#8884d8\"}\n                          stroke={payload?.isOutlier ? \"#dc2626\" : \"#8884d8\"}\n                          strokeWidth={payload?.isOutlier ? 2 : 1}\n                        />\n                      );\n                    }}\n                    name=\"Actual\"\n                    connectNulls={false}\n                  />\n                  \n                  {/* Forecast line - shown in green on Y-axis 2 (right) */}\n                  {processedData.some(d => d.Forecast !== undefined) && (\n                    <Line \n                      yAxisId=\"forecast\"\n                      type=\"monotone\" \n                      dataKey=\"Forecast\" \n                      stroke=\"#10b981\" \n                      strokeWidth={2}\n                      dot={{ r: 3, fill: \"#10b981\" }}\n                      name=\"Forecast\"\n                      connectNulls={false}\n                    />\n                  )}\n                  \n                  {/* Moving average line - only show if no forecast */}\n                  {!processedData.some(d => d.Forecast !== undefined) && (\n                    <Line \n                      yAxisId=\"actual\"\n                      type=\"monotone\" \n                      dataKey=\"movingAverage\" \n                      stroke=\"#82ca9d\" \n                      strokeWidth={1}\n                      strokeDasharray=\"5 5\"\n                      dot={false}\n                      name=\"7-day Moving Avg\"\n                    />\n                  )}\n                  \n                  {/* Trend line - only show if no forecast */}\n                  {insights && !processedData.some(d => d.Forecast !== undefined) && (\n                    <Line \n                      yAxisId=\"actual\"\n                      type=\"linear\" \n                      dataKey=\"trend\" \n                      stroke=\"#ffc658\" \n                      strokeWidth={1}\n                      dot={false}\n                      name=\"Linear Trend\"\n                    />\n                  )}\n                </ComposedChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"distribution\" className=\"mt-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm flex items-center gap-2\">\n                <BarChart3 className=\"h-4 w-4\" />\n                Distribution Analysis\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={processedData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" opacity={0.3} />\n                  <XAxis \n                    dataKey=\"formattedDate\" \n                    fontSize={10}\n                    interval=\"preserveStartEnd\"\n                  />\n                  <YAxis fontSize={10} />\n                  <Tooltip content={<CustomTooltip />} />\n                  <Legend fontSize={10} />\n                  \n                  <Bar \n                    dataKey={target} \n                    fill=\"#8884d8\"\n                    fillOpacity={0.8}\n                    name={target}\n                  />\n                  \n                  {/* Mean reference line */}\n                  {insights && (\n                    <ReferenceLine \n                      y={insights.mean} \n                      stroke=\"#82ca9d\" \n                      strokeDasharray=\"3 3\"\n                      label={{ value: \"Mean\", position: \"insideTopRight\", fontSize: 10 }}\n                    />\n                  )}\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"correlation\" className=\"mt-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm flex items-center gap-2\">\n                <Activity className=\"h-4 w-4\" />\n                Value vs Orders Correlation\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <ScatterChart data={processedData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" opacity={0.3} />\n                  <XAxis \n                    dataKey=\"Orders\" \n                    name=\"Orders\"\n                    fontSize={10}\n                  />\n                  <YAxis \n                    dataKey=\"Value\" \n                    name=\"Value\"\n                    fontSize={10}\n                  />\n                  <Tooltip \n                    content={<CustomTooltip />}\n                    cursor={{ strokeDasharray: '3 3' }}\n                  />\n                  \n                  <Scatter \n                    dataKey=\"Value\" \n                    fill=\"#8884d8\"\n                    fillOpacity={0.6}\n                  />\n                </ScatterChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"forecast\" className=\"mt-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm flex items-center gap-2\">\n                <Zap className=\"h-4 w-4\" />\n                {processedData.some(d => d.Forecast !== undefined) \n                  ? 'Actual & Forecast with Confidence Intervals' \n                  : 'Forecast with Confidence Intervals'}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <ComposedChart data={processedData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" opacity={0.3} />\n                  <XAxis \n                    dataKey=\"formattedDate\" \n                    fontSize={10}\n                    interval=\"preserveStartEnd\"\n                  />\n                  <YAxis fontSize={10} />\n                  <Tooltip content={<CustomTooltip />} />\n                  <Legend fontSize={10} />\n                  \n                  {/* Confidence interval area - only show if forecast data exists */}\n                  {processedData.some(d => d.ForecastUpper !== undefined) && (\n                    <>\n                      <Area \n                        type=\"monotone\"\n                        dataKey=\"ForecastUpper\"\n                        stroke=\"none\"\n                        fill=\"#10b981\"\n                        fillOpacity={0.1}\n                        name=\"Confidence Interval\"\n                      />\n                      <Area \n                        type=\"monotone\"\n                        dataKey=\"ForecastLower\"\n                        stroke=\"none\"\n                        fill=\"#ffffff\"\n                        fillOpacity={1}\n                      />\n                    </>\n                  )}\n                  \n                  {/* Actual data */}\n                  <Line \n                    type=\"monotone\" \n                    dataKey={target} \n                    stroke=\"#8884d8\" \n                    strokeWidth={2}\n                    dot={{ r: 3 }}\n                    name=\"Actual\"\n                    connectNulls={false}\n                  />\n                  \n                  {/* Forecast data - only show if it exists */}\n                  {processedData.some(d => d.Forecast !== undefined) && (\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"Forecast\" \n                      stroke=\"#10b981\" \n                      strokeWidth={2}\n                      strokeDasharray=\"5 5\"\n                      dot={{ r: 3, fill: \"#10b981\" }}\n                      name=\"Forecast\"\n                      connectNulls={false}\n                    />\n                  )}\n                  \n                  {/* Fallback: Trend projection if no forecast data */}\n                  {!processedData.some(d => d.Forecast !== undefined) && (\n                    <Line \n                      type=\"linear\" \n                      dataKey=\"trend\" \n                      stroke=\"#ff7300\" \n                      strokeWidth={2}\n                      strokeDasharray=\"5 5\"\n                      dot={false}\n                      name=\"Trend Projection\"\n                    />\n                  )}\n                </ComposedChart>\n              </ResponsiveContainer>\n              \n              {insights && (\n                <div className=\"mt-4 text-xs text-muted-foreground space-y-1\">\n                  <div>Trend Confidence: {(insights.trendConfidence * 100).toFixed(1)}%</div>\n                  <div>R² (Goodness of Fit): {insights.r2.toFixed(3)}</div>\n                  {insights.outlierCount > 0 && (\n                    <div className=\"text-yellow-600\">\n                      ⚠️ {insights.outlierCount} outlier(s) detected - may affect forecast accuracy\n                    </div>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}