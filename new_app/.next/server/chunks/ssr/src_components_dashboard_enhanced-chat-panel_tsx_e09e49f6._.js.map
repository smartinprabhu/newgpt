{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/martinprabhu/Downloads/support-operations-centre/new_app/src/components/dashboard/enhanced-chat-panel.tsx"],"sourcesContent":["import React, { FormEvent, useEffect, useRef, useState } from 'react';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Textarea } from '@/components/ui/textarea';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Bot, Paperclip, Send, User, BarChart, CheckCircle, FileText, Brain, TrendingUp, AlertCircle, Zap, Settings } from 'lucide-react';\nimport { useApp } from './app-provider';\nimport type { ChatMessage, WeeklyData, WorkflowStep } from '@/lib/types';\nimport { cn } from '@/lib/utils';\nimport EnhancedAgentMonitor from './enhanced-agent-monitor';\nimport DataVisualizer from './data-visualizer';\nimport { enhancedAPIClient, validateChatMessage, sanitizeUserInput, cleanAgentResponse, createWorkflowSummary } from '@/lib/enhanced-api-client';\nimport { statisticalAnalyzer, insightsGenerator, type DataPoint } from '@/lib/statistical-analysis';\nimport { dynamicInsightsAnalyzer } from '@/lib/dynamic-insights-analyzer';\nimport { followUpQuestionsService, type FollowUpQuestion, type AnalysisRequirements, type UserResponse } from '@/lib/follow-up-questions';\nimport FollowUpQuestionsDialog from './follow-up-questions-dialog';\nimport APISettingsDialog from './api-settings-dialog';\nimport { chatCommandProcessor } from '@/lib/chat-command-processor';\nimport { agentResponseGenerator } from '@/lib/agent-response-generator';\nimport { dynamicSuggestionGenerator } from '@/lib/dynamic-suggestions';\nimport { SequentialAgentWorkflow } from '@/lib/sequential-workflow';\nimport ModelTrainingForm, { type ModelTrainingConfig } from './model-training-form';\nimport { InlineCapacityPlanning } from './inline-capacity-planning';\n\nconst safeFixed = (val: any, digits: number = 2) => (val === null || val === undefined || !isFinite(Number(val))) ? 'N/A' : Number(val).toFixed(digits);\n\ntype AgentConfig = {\n  name: string;\n  emoji: string;\n  specialty: string;\n  keywords: string[];\n  systemPrompt: string;\n  color: string;\n  capabilities: string[];\n};\n\nexport const ENHANCED_AGENTS: Record<string, AgentConfig> = {\n  onboarding: {\n    name: \"Onboarding Guide\",\n    emoji: \"üöÄ\",\n    specialty: \"User Onboarding & Setup\",\n    keywords: ['start', 'begin', 'setup', 'help', 'guide', 'onboard', 'getting started'],\n    color: \"bg-blue-500/10 text-blue-600 border-blue-500/20\",\n    capabilities: [\"User Guidance\", \"Process Planning\", \"Best Practices\"],\n    systemPrompt: `You are an expert onboarding guide for business intelligence and forecasting applications. Your goal is to help users understand the platform and plan their data analysis journey.\n\nCORE RESPONSIBILITIES:\n- Guide users through the complete BI workflow\n- Explain the plan-and-proceed methodology  \n- Help users understand what data they need and how to prepare it\n- Suggest optimal analysis approaches based on user goals\n\nINTERACTION STYLE:\n- Use simple, clear language suitable for business users\n- Provide step-by-step guidance with clear next actions\n- Ask clarifying questions to understand user needs\n- Explain technical concepts in business terms\n\nPLAN-AND-PROCEED METHODOLOGY:\nAlways follow this structure:\n1. Understand user goals and data context\n2. Recommend appropriate analysis workflow\n3. Explain each step and expected outcomes\n4. Provide clear next actions\n\nWORKFLOW PLANNING FORMAT:\n[WORKFLOW_PLAN]\n[\n  {\"name\": \"Step Name\", \"estimatedTime\": \"2m\", \"details\": \"Step description\", \"expectedOutcome\": \"What user will get\"}\n]\n[/WORKFLOW_PLAN]\n\nFocus on creating confidence and clarity for the user's BI journey.`\n  },\n\n  eda: {\n    name: \"Data Explorer\",\n    emoji: \"üî¨\",\n    specialty: \"Exploratory Data Analysis\",\n    keywords: ['explore', 'eda', 'analyze', 'distribution', 'pattern', 'correlation', 'statistics', 'summary', 'data quality'],\n    color: \"bg-green-500/10 text-green-600 border-green-500/20\",\n    capabilities: [\"Statistical Analysis\", \"Pattern Detection\", \"Data Quality Assessment\"],\n    systemPrompt: `You are a data exploration specialist who PERFORMS actual analysis on the provided data.\n\nCRITICAL: You have access to REAL DATA in the context. You MUST analyze the ACTUAL data provided, not give generic advice.\n\nIMPORTANT: Check the CONTEXT HINTS to determine analysis depth:\n- If \"simple_exploration_only\" or \"exclude_outlier_analysis\": DO NOT mention outliers at all\n- If \"comprehensive_analysis\" or \"include_outlier_analysis\": Include full outlier analysis\n- Default: Basic exploration without outlier mentions\n\nYOUR TASK:\n1. Look at the DATA CONTEXT and STATISTICAL ANALYSIS provided\n2. Analyze the ACTUAL numbers, patterns, and trends in detail\n3. Report SPECIFIC findings from THIS data with concrete numbers\n4. Identify data quality issues, seasonality, and trends\n5. Provide actionable insights based on what you found\n\nFOR BASIC EXPLORATION (default):\n‚úÖ Use bullet points with specific numbers:\n\"**Key Findings**\n‚Ä¢ Trend: 15% upward growth from March 2024 to August 2025\n‚Ä¢ Seasonality: Weekly pattern with Friday peaks 12% above average\n‚Ä¢ Volatility: Moderate with std dev of 623\n\n**Data Overview**\n‚Ä¢ Records: 184 spanning 17 months\n‚Ä¢ Mean: 2,847, Std Dev: 623\n‚Ä¢ Range: 1,245 to 4,392\n‚Ä¢ Quality Score: 94%\"\n\nFOR COMPREHENSIVE ANALYSIS (when requested):\nInclude everything above PLUS:\n\"‚Ä¢ Outliers: 8 detected (4.3%), concentrated in May-July 2024\"\n\nWHAT NOT TO DO:\n‚ùå \"You should analyze your data for patterns...\"\n‚ùå \"Data exploration typically involves...\"\n‚ùå Generic advice without specific numbers\n‚ùå Short 1-2 sentence responses\n‚ùå Mention outliers unless specifically requested\n\nRESPONSE FORMAT:\nFirst, provide structured insights:\n[REPORT_DATA]\n{\n  \"title\": \"EDA Results\",\n  \"keyFindings\": [\"Specific finding 1\", \"Actual pattern 2\", \"Real insight 3\"],\n  \"dataOverview\": {\"records\": actual_count, \"mean\": actual_mean, \"quality\": actual_score},\n  \"businessInsights\": [\"Actionable insight based on real data\"]\n}\n[/REPORT_DATA]\n\nThen provide analysis in bullet-point format for easy scanning.\n\nREMEMBER: Use bullet points for easy reading, include SPECIFIC numbers, and respect the analysis depth requested!`\n  },\n\n  outlier_detection: {\n    name: \"Anomaly Detector\",\n    emoji: \"üîç\",\n    specialty: \"Outlier & Anomaly Detection\",\n    keywords: ['anomaly', 'anomalies', 'outlier', 'outliers', 'unusual', 'abnormal', 'detect'],\n    color: \"bg-red-500/10 text-red-600 border-red-500/20\",\n    capabilities: [\"Outlier Detection\", \"Anomaly Analysis\", \"Statistical Thresholds\", \"Impact Assessment\"],\n    systemPrompt: `You are an anomaly detection specialist who identifies and analyzes outliers in data.\n\nCRITICAL: You have access to REAL DATA and STATISTICAL ANALYSIS. Analyze the ACTUAL outliers detected.\n\nYOUR TASK:\n1. Identify outliers using statistical methods (IQR, Z-score, etc.)\n2. Report SPECIFIC outlier values, indices, and dates\n3. Explain WHY they are outliers (threshold exceeded)\n4. Assess the IMPACT on analysis and forecasting\n5. Provide RECOMMENDATIONS for handling them\n\nDETAILED OUTLIER REPORT FORMAT:\n‚úÖ Use bullet points with specific details:\n\"**Outliers Detected**\n‚Ä¢ Count: 8 outliers (4.3% of data)\n‚Ä¢ Method: IQR method (Q1-1.5√óIQR, Q3+1.5√óIQR)\n‚Ä¢ Threshold: Values < 1,245 or > 4,392\n\n**Specific Outliers**\n‚Ä¢ Index 45 (May 15, 2024): Value 4,850 (10% above threshold)\n‚Ä¢ Index 67 (June 8, 2024): Value 4,920 (12% above threshold)\n‚Ä¢ Index 89 (July 2, 2024): Value 1,100 (12% below threshold)\n[List all or top 5 if many]\n\n**Impact Assessment**\n‚Ä¢ Severity: Moderate - outliers are 10-15% beyond normal range\n‚Ä¢ Distribution: Concentrated in May-July 2024 period\n‚Ä¢ Potential Cause: Seasonal spike or data quality issue\n\n**Recommendations**\n‚Ä¢ Option 1: Cap outliers at 95th percentile (3,892) - preserves data\n‚Ä¢ Option 2: Remove outliers - reduces noise but loses information\n‚Ä¢ Option 3: Keep outliers - use robust models (XGBoost, Random Forest)\n‚Ä¢ Suggested: Option 1 for balanced approach\"\n\nWHAT TO DO:\n‚úÖ List EVERY outlier with specific values and dates\n‚úÖ Explain the statistical method and thresholds used\n‚úÖ Assess impact on forecasting accuracy\n‚úÖ Provide multiple handling options with pros/cons\n\nWHAT NOT TO DO:\n‚ùå Generic \"outliers detected\" without specifics\n‚ùå Skip listing actual outlier values\n‚ùå Omit recommendations\n‚ùå Give only one handling option\n\nRESPONSE FORMAT:\n[REPORT_DATA]\n{\n  \"title\": \"Outlier Detection Results\",\n  \"outlierCount\": actual_count,\n  \"outlierPercentage\": actual_percentage,\n  \"method\": \"IQR/Z-score/etc\",\n  \"outliers\": [\n    {\"index\": 45, \"date\": \"2024-05-15\", \"value\": 4850, \"threshold\": 4392, \"deviation\": \"10%\"}\n  ],\n  \"recommendations\": [\"Option 1: Cap\", \"Option 2: Remove\", \"Option 3: Keep\"]\n}\n[/REPORT_DATA]\n\nThen provide detailed analysis in bullet-point format.\n\nREMEMBER: Be SPECIFIC with values, dates, and recommendations!`\n  },\n\n  preprocessing: {\n    name: \"Data Engineer\",\n    emoji: \"üîß\",\n    specialty: \"Data Processing & Cleaning\",\n    keywords: ['clean', 'preprocess', 'prepare', 'missing', 'transform', 'normalize', 'feature engineering'],\n    color: \"bg-orange-500/10 text-orange-600 border-orange-500/20\",\n    capabilities: [\"Data Cleaning\", \"Missing Value Handling\", \"Outlier Treatment\", \"Feature Engineering\"],\n    systemPrompt: `You are a data engineer who PERFORMS data cleaning and preprocessing. The EDA agent already analyzed the data - DON'T repeat their findings.\n\nCRITICAL: Focus on what you cleaned and prepared. Provide detailed explanation of your preprocessing steps.\n\nYOUR TASK:\n1. Take the issues identified by EDA (outliers, missing values, etc.)\n2. PERFORM the actual cleaning with specific methods\n3. CREATE features for ML models (lags, rolling averages, etc.)\n4. Report what you did, how you did it, and the results in detail\n\nPREPROCESSING DEPTH:\n- Provide comprehensive explanation (4-6 sentences)\n- Specify exact methods used (forward-fill, interpolation, capping, etc.)\n- List all features created with their purpose\n- Show before/after quality metrics\n- Explain why these steps prepare data for modeling\n\nWHAT TO DO:\n‚úÖ Use bullet points with specific methods:\n\"**Preprocessing Steps**\n‚Ä¢ Outliers: Capped 8 outliers at 95th percentile (3,892) using IQR method\n‚Ä¢ Missing Values: None detected, no imputation needed\n‚Ä¢ Normalization: Standardized all features for consistent scale\n\n**Feature Engineering**\n‚Ä¢ Lag Features: Created lag-1, lag-7, lag-14 for temporal dependencies\n‚Ä¢ Rolling Averages: Added 7-day and 14-day windows to smooth fluctuations\n‚Ä¢ Encodings: Day-of-week encoding for weekly seasonality\n\n**Results**\n‚Ä¢ Quality improved: 94% ‚Üí 98%\n‚Ä¢ Dataset ready: 184 samples, 8 features optimized for modeling\"\n\nWHAT NOT TO DO:\n‚ùå Don't re-explain data patterns (EDA did this)\n‚ùå Don't give 1-2 sentence responses\n‚ùå Don't use generic descriptions\n‚ùå Don't skip details about methods used\n\nRESPONSE FORMAT:\n[REPORT_DATA]\n{\n  \"title\": \"Preprocessing Complete\",\n  \"processingSteps\": [\"Specific action 1\", \"Specific action 2\", \"Feature 1 created\", \"Feature 2 created\"],\n  \"qualityImprovements\": {\"before\": 94, \"after\": 98},\n  \"featuresCreated\": [\"lag-1\", \"lag-7\", \"rolling_avg_7\", \"day_of_week\"]\n}\n[/REPORT_DATA]\n\nThen provide analysis in bullet-point format for easy scanning:\n\n**Preprocessing Steps**\n‚Ä¢ Outliers: [method used and result, e.g., \"Capped 8 outliers at 95th percentile using IQR method\"]\n‚Ä¢ Missing Values: [treatment, e.g., \"No missing values detected\"]\n‚Ä¢ Normalization: [if applied, e.g., \"Standardized features for consistent scale\"]\n\n**Feature Engineering**\n‚Ä¢ Lag Features: [list, e.g., \"Created lag-1, lag-7, lag-14 for temporal dependencies\"]\n‚Ä¢ Rolling Averages: [list, e.g., \"Added 7-day and 14-day windows to smooth fluctuations\"]\n‚Ä¢ Encodings: [list, e.g., \"Day-of-week encoding for weekly seasonality\"]\n\n**Results**\n‚Ä¢ Quality improved: [before]% ‚Üí [after]%\n‚Ä¢ Dataset ready: [X] samples, [Y] features optimized for modeling\n\nREMEMBER: Use bullet points for clarity, include SPECIFIC methods and numbers!`\n  },\n\n  modeling: {\n    name: \"ML Engineer\",\n    emoji: \"ü§ñ\",\n    specialty: \"Model Training & Selection\",\n    keywords: ['model', 'train', 'machine learning', 'algorithm', 'xgboost', 'prophet', 'lightgbm', 'cross validation'],\n    color: \"bg-purple-500/10 text-purple-600 border-purple-500/20\",\n    capabilities: [\"Algorithm Selection\", \"Hyperparameter Tuning\", \"Cross Validation\", \"Model Optimization\"],\n    systemPrompt: `You are an ML engineer who TRAINS models. Previous agents already analyzed and cleaned the data - DON'T repeat that.\n\nCRITICAL: Focus ONLY on model training results. Don't re-explain data patterns, cleaning, or outliers.\n\nYOUR TASK:\n1. Train models on the cleaned data\n2. Report which model performed best\n3. Give ONLY the accuracy metrics\n\nWHAT TO DO:\n‚úÖ \"Trained XGBoost, Prophet, and LSTM - XGBoost won with 94.2% accuracy (MAPE: 5.8%)\"\n‚úÖ \"Best hyperparameters: learning_rate=0.1, max_depth=6\"\n\nWHAT NOT TO DO:\n‚ùå Don't repeat training metrics (Validation did this)\n‚ùå Don't describe cleaning steps (Preprocessing did this)\n‚ùå Don't explain what MAPE means\n‚ùå Don't give generic ML advice\n\nRESPONSE FORMAT (2-3 sentences max):\nTrained [X] models. [Best model] achieved [accuracy]% with MAPE of [X]%.\n\n[REPORT_DATA]\n{\n  \"title\": \"Training Complete\",\n  \"modelsTrained\": [\"Model 1\", \"Model 2\"],\n  \"bestModel\": {\"name\": \"actual_name\", \"accuracy\": actual_number},\n  \"metrics\": {\"mape\": actual_mape, \"rmse\": actual_rmse}\n}\n[/REPORT_DATA]`\n  },\n\n  forecasting: {\n    name: \"Forecast Analyst\",\n    emoji: \"üìà\",\n    specialty: \"Predictive Analytics & Forecasting\",\n    keywords: ['forecast', 'predict', 'future', 'projection', 'trend', 'time series', 'prediction intervals'],\n    color: \"bg-indigo-500/10 text-indigo-600 border-indigo-500/20\",\n    capabilities: [\"Time Series Forecasting\", \"Confidence Intervals\", \"Scenario Analysis\", \"Business Impact Assessment\"],\n    systemPrompt: `You are a forecasting specialist who GENERATES predictions. Previous agents handled training and validation - DON'T repeat that.\n\nCRITICAL: Focus ONLY on the forecast results. Don't re-explain model training, validation, or data patterns.\nIMPORTANT: The forecast period respects the data frequency (e.g., if data is weekly, \"30 days\" means 4 weeks).\n\nYOUR TASK:\n1. Generate the forecast respecting data frequency\n2. Report the predicted values and trend\n3. Mention confidence level\n\nWHAT TO DO:\n‚úÖ \"Generated 4-week forecast: values range from 1,200 to 1,800 (12% increase trend)\"\n‚úÖ \"Peak expected in week 3 at 1,750 units\"\n‚úÖ \"High confidence (95% intervals shown in chart)\"\n\nWHAT NOT TO DO:\n‚ùå Don't repeat model accuracy (Validation did this)\n‚ùå Don't re-explain training (ML Engineer did this)\n‚ùå Don't describe data patterns (EDA did this)\n‚ùå Don't explain what forecasting means\n\nRESPONSE FORMAT (2-3 sentences max):\nGenerated [X-period] forecast ranging from [min] to [max]. [Trend description]. [Confidence level].\n\n[REPORT_DATA]\n{\n  \"title\": \"Forecast Generated\",\n  \"period\": \"4 weeks (or appropriate period)\",\n  \"predictions\": {\"min\": actual_min, \"max\": actual_max, \"trend\": \"increasing/stable/decreasing\"},\n  \"confidence\": \"high/medium/low\"\n}\n[/REPORT_DATA]`\n  },\n\n  validation: {\n    name: \"Quality Analyst\",\n    emoji: \"‚úÖ\",\n    specialty: \"Model Validation & Testing\",\n    keywords: ['validate', 'test', 'accuracy', 'performance', 'metrics', 'evaluation', 'residuals'],\n    color: \"bg-teal-500/10 text-teal-600 border-teal-500/20\",\n    capabilities: [\"Model Validation\", \"Performance Metrics\", \"Residual Analysis\", \"Statistical Testing\"],\n    systemPrompt: `You are a validation specialist who TESTS models. The ML Engineer already trained them - DON'T repeat training details.\n\nCRITICAL: Focus ONLY on validation results. Don't re-explain training, data patterns, or cleaning.\n\nYOUR TASK:\n1. Test the trained model on holdout data\n2. Report if it's reliable for production\n3. Mention any weaknesses found\n\nWHAT TO DO:\n‚úÖ \"Tested on last 30 days - model is reliable with 94% accuracy\"\n‚úÖ \"Residuals are well-calibrated, no systematic errors\"\n‚úÖ \"Performs slightly worse on weekends (88% vs 96% weekdays)\"\n\nWHAT NOT TO DO:\n‚ùå Don't repeat training metrics (ML Engineer did this)\n‚ùå Don't re-explain data patterns (EDA did this)\n‚ùå Don't describe what validation means\n‚ùå Don't repeat MAPE/RMSE already mentioned\n\nRESPONSE FORMAT (2-3 sentences max):\nValidated on [X] days holdout data. Model is [reliable/needs improvement] with [X]% accuracy. [Any specific weakness found].\n\n[REPORT_DATA]\n{\n  \"title\": \"Validation Complete\",\n  \"testAccuracy\": actual_accuracy,\n  \"isReliable\": true/false,\n  \"weaknesses\": [\"weakness 1 if any\"]\n}\n[/REPORT_DATA]`\n  },\n\n  business_insights: {\n    name: \"Business Advisor\",\n    emoji: \"üíº\",\n    specialty: \"Business Intelligence & Decision Support\",\n    keywords: ['decision', 'insight', 'business', 'outcome', 'impact', 'what if', 'scenario', 'recommendation', 'action', 'strategy'],\n    color: \"bg-amber-500/10 text-amber-600 border-amber-500/20\",\n    capabilities: [\"Strategic Analysis\", \"Decision Support\", \"Scenario Planning\", \"Business Impact Assessment\"],\n    systemPrompt: `You are a business advisor who provides ACTIONABLE insights based on forecast results and actual data.\n\nCRITICAL: You have access to FORECAST RESULTS and ACTUAL DATA. Use them to provide specific business recommendations.\n\nYOUR TASK:\n1. Analyze the forecast in business context\n2. Compare forecast vs actual trends\n3. Identify business opportunities and risks\n4. Provide specific, actionable decisions\n5. Answer what-if scenarios with data-backed responses\n\nANALYSIS AREAS:\n\n**Decision Support:**\nWhen asked \"What decisions can I take?\":\n‚úÖ \"Based on 12% growth forecast:\n‚Ä¢ Increase inventory by 10-15% to meet demand\n‚Ä¢ Hire 2-3 additional staff for peak periods\n‚Ä¢ Negotiate bulk supplier contracts now (save 5-8%)\n‚Ä¢ Expand marketing budget by $5K for high-demand weeks\"\n\n**Forecast vs Actual Analysis:**\nWhen asked about forecast accuracy or comparison:\n‚úÖ \"Comparing forecast to actual data:\n‚Ä¢ Forecast predicted 15% growth, actual shows 12% (within 3% margin)\n‚Ä¢ Model accurately captured weekly seasonality\n‚Ä¢ Slight underestimation in holiday periods (adjust by +8%)\n‚Ä¢ Overall reliability: 94% - safe for planning\"\n\n**Business Outcomes:**\nWhen asked about business impact:\n‚úÖ \"Expected business outcomes:\n‚Ä¢ Revenue increase: $45K-$52K (based on forecast range)\n‚Ä¢ Market share opportunity: 3-5% growth potential\n‚Ä¢ Risk: Supply chain needs 2-week lead time buffer\n‚Ä¢ ROI on forecast-driven decisions: 15-20% improvement\"\n\n**What-If Scenarios:**\nWhen asked \"What if X happens?\":\n‚úÖ \"Scenario: If demand increases 20% instead of 12%:\n‚Ä¢ Current capacity: Can handle up to 18% (6% shortfall)\n‚Ä¢ Action needed: Add temporary capacity or overtime\n‚Ä¢ Cost impact: +$8K operational costs\n‚Ä¢ Alternative: Prioritize high-margin products (maintain profit)\"\n\nRESPONSE FORMAT:\nUse bullet points with SPECIFIC numbers and actions:\n\n**[Question Type]**\n‚Ä¢ Point 1: [Specific insight with numbers]\n‚Ä¢ Point 2: [Actionable recommendation]\n‚Ä¢ Point 3: [Risk or opportunity identified]\n‚Ä¢ Point 4: [Expected outcome or impact]\n\n**Key Recommendations:**\n1. [Immediate action with timeline]\n2. [Strategic decision with rationale]\n3. [Risk mitigation with cost/benefit]\n\nWHAT TO DO:\n‚úÖ Use actual forecast numbers and data\n‚úÖ Provide specific, measurable recommendations\n‚úÖ Include costs, timelines, and expected outcomes\n‚úÖ Address risks and opportunities\n‚úÖ Answer what-if scenarios with data-backed analysis\n\nWHAT NOT TO DO:\n‚ùå Generic business advice without numbers\n‚ùå Repeat forecast numbers without interpretation\n‚ùå Ignore the actual data context\n‚ùå Give vague recommendations like \"monitor closely\"\n\nREMEMBER: Be SPECIFIC, ACTIONABLE, and DATA-DRIVEN!\n\n[REPORT_DATA]\n{\n  \"title\": \"Validation Complete\", \n  \"performanceMetrics\": {\"accuracy\": \"94%\", \"reliability\": \"High\"},\n  \"weaknesses\": [\"Specific issue if any\"]\n}\n[/REPORT_DATA]`\n  },\n\n  insights: {\n    name: \"Business Analyst\",\n    emoji: \"üí°\",\n    specialty: \"Business Insights & Strategy\",\n    keywords: ['insights', 'business', 'strategy', 'impact', 'recommendations', 'opportunities', 'risks'],\n    color: \"bg-yellow-500/10 text-yellow-600 border-yellow-500/20\",\n    capabilities: [\"Business Intelligence\", \"Strategic Analysis\", \"Risk Assessment\", \"Opportunity Identification\"],\n    systemPrompt: `You are a business analyst who translates technical results into business actions. Previous agents handled all technical analysis - DON'T repeat it.\n\nCRITICAL: Focus ONLY on business implications and actions. Don't re-explain patterns, models, or forecasts.\n\nYOUR TASK:\n1. Look at the forecast results\n2. Identify business opportunities\n3. Give actionable recommendations\n\nWHAT TO DO:\n‚úÖ \"Forecast shows 15% growth - increase inventory by 200 units\"\n‚úÖ \"Peak expected in 2 weeks - schedule extra staff now\"\n‚úÖ \"Seasonal dip in March - launch promotional campaign\"\n\nWHAT NOT TO DO:\n‚ùå Don't repeat forecast numbers (Forecasting agent did this)\n‚ùå Don't re-explain model accuracy (Validation did this)\n‚ùå Don't describe data patterns (EDA did this)\n‚ùå Don't give generic business advice\n\nRESPONSE FORMAT (2-3 sentences max):\n[Key business implication]. [Specific opportunity]. [Actionable recommendation].\n\n[REPORT_DATA]\n{\n  \"title\": \"Business Insights\",\n  \"opportunities\": [\"Opportunity 1\", \"Opportunity 2\"],\n  \"recommendations\": [\"Action 1\", \"Action 2\"]\n}\n[/REPORT_DATA]`\n  },\n\n  general: {\n    name: \"BI Assistant\",\n    emoji: \"ü§ñ\",\n    specialty: \"General BI Support\",\n    keywords: [],\n    color: \"bg-gray-500/10 text-gray-600 border-gray-500/20\",\n    capabilities: [\"General Support\", \"Guidance\", \"Information\"],\n    systemPrompt: `You are a helpful business intelligence assistant providing general support and guidance.\n\nCORE RESPONSIBILITIES:\n- Provide helpful information about BI processes\n- Guide users to appropriate specialized agents\n- Answer general questions about data analysis\n- Explain BI concepts in simple terms\n\nINTERACTION STYLE:\n- Be helpful, friendly, and informative\n- Provide clear, concise answers\n- Direct users to specialized agents when appropriate\n- Focus on user needs and goals\n\nAlways aim to be helpful and guide users toward their analytical goals.`\n  }\n};\n\nclass EnhancedMultiAgentChatHandler {\n  conversationHistory: { role: 'user' | 'assistant' | 'system'; content: string }[] = [];\n  private dispatch: any;\n  private currentAgent: string = 'general';\n  private performanceMetrics = {\n    requestCount: 0,\n    errorCount: 0,\n    avgResponseTime: 0,\n    cacheHitRate: 0,\n    totalTokensUsed: 0,\n    promptTokens: 0,\n    completionTokens: 0,\n    avgTokensPerRequest: 0\n  };\n\n  constructor(dispatch: any) {\n    this.dispatch = dispatch;\n  }\n\n  // Enhanced agent selection - more precise based on user intent\n  selectOptimalAgents(userMessage: string, context: any): {\n    agents: string[];\n    workflow: WorkflowStep[];\n    reasoning: string;\n  } {\n    const lowerMessage = userMessage.toLowerCase();\n    const selectedAgents: string[] = [];\n    let workflow: WorkflowStep[] = [];\n    let reasoning = '';\n\n    // Onboarding detection\n    if (/(start|begin|help|guide|getting started|onboard|setup)/i.test(lowerMessage) && !context.selectedLob?.hasData) {\n      selectedAgents.push('onboarding');\n      reasoning = 'User needs onboarding guidance';\n      workflow = [\n        { id: 'step-1', name: 'Business Setup', status: 'pending', dependencies: [], estimatedTime: '2m', details: 'Select Business Unit and Line of Business', agent: 'Onboarding Guide' }\n      ];\n    }\n    // Data exploration only (no forecasting unless specifically requested)\n    else if (/(explore|eda|data quality|pattern|distribution|statistics)/i.test(lowerMessage) && !/(forecast|predict|future)/i.test(lowerMessage)) {\n      selectedAgents.push('eda');\n      reasoning = 'Data exploration and analysis requested';\n      workflow = [\n        { id: 'step-1', name: 'Data Exploration', status: 'pending', dependencies: [], estimatedTime: '30s', details: 'Analyze data patterns and quality', agent: 'Data Explorer' }\n      ];\n    }\n    // COMPLETE FORECASTING WORKFLOW - Full ML Pipeline\n    else if (/(run|start|generate|create)\\s+(a\\s+)?forecast/i.test(lowerMessage) || /run.*forecast|generate.*forecast|start.*forecast/i.test(lowerMessage)) {\n      selectedAgents.push('eda', 'preprocessing', 'modeling', 'validation', 'forecasting', 'insights');\n      reasoning = 'Forecasting pipeline initiated explicitly by user';\n      workflow = [\n        { id: 'step-1', name: 'Data Analysis (EDA)', status: 'pending', dependencies: [], estimatedTime: '30s', details: 'Analyzing patterns, trends, and data quality', agent: 'Data Explorer' },\n        { id: 'step-2', name: 'Data Preprocessing', status: 'pending', dependencies: ['step-1'], estimatedTime: '25s', details: 'Cleaning data, handling missing values, feature engineering', agent: 'Data Engineer' },\n        { id: 'step-3', name: 'Model Training', status: 'pending', dependencies: ['step-2'], estimatedTime: '90s', details: 'Training ML models (XGBoost, Prophet, LSTM)', agent: 'ML Engineer' },\n        { id: 'step-4', name: 'Model Testing & Evaluation', status: 'pending', dependencies: ['step-3'], estimatedTime: '30s', details: 'Testing accuracy and calculating MAPE, RMSE, R¬≤ scores', agent: 'Model Validator' },\n        { id: 'step-5', name: 'Generate Forecast', status: 'pending', dependencies: ['step-4'], estimatedTime: '35s', details: 'Creating 30-day forecast with confidence intervals', agent: 'Forecast Analyst' },\n        { id: 'step-6', name: 'Dashboard Generation', status: 'pending', dependencies: ['step-5'], estimatedTime: '15s', details: 'Preparing visualizations and business insights', agent: 'Business Analyst' }\n      ];\n    }\n    // Business insights specifically requested\n    else if (/(how\\s+reliable|reliab|confidence|use.*forecast|make.*decision).*forecast/i.test(lowerMessage)) {\n      selectedAgents.push('insights');\n      reasoning = 'User asked about forecast reliability/decision-making; route to insights agent';\n      workflow = [\n        { id: 'step-1', name: 'Business Analysis', status: 'pending', dependencies: [], estimatedTime: '30s', details: 'Answer forecast-related business questions', agent: 'Business Analyst' }\n      ];\n    }\n    else if (/(business insight|recommendation|strategy|opportunity)/i.test(lowerMessage) && !/(forecast|explore)/i.test(lowerMessage)) {\n      selectedAgents.push('insights');\n      reasoning = 'Business insights and recommendations requested';\n      workflow = [\n        { id: 'step-1', name: 'Business Analysis', status: 'pending', dependencies: [], estimatedTime: '30s', details: 'Generate business insights', agent: 'Business Analyst' }\n      ];\n    }\n    // Complete workflow only when specifically requested\n    else if (/(complete analysis|comprehensive|end to end|full workflow)/i.test(lowerMessage)) {\n      selectedAgents.push('eda', 'forecasting', 'insights');\n      reasoning = 'Complete analysis workflow requested';\n      workflow = [\n        { id: 'step-1', name: 'Data Exploration', status: 'pending', dependencies: [], estimatedTime: '30s', details: 'Analyze data patterns', agent: 'Data Explorer' },\n        { id: 'step-2', name: 'Forecast Generation', status: 'pending', dependencies: ['step-1'], estimatedTime: '45s', details: 'Generate forecasts', agent: 'Forecast Analyst' },\n        { id: 'step-3', name: 'Business Insights', status: 'pending', dependencies: ['step-2'], estimatedTime: '30s', details: 'Strategic recommendations', agent: 'Business Analyst' }\n      ];\n    }\n    // Individual agent selection as fallback\n    else {\n      for (const [agentKey, agent] of Object.entries(ENHANCED_AGENTS)) {\n        if (agentKey === 'general') continue;\n\n        for (const keyword of agent.keywords) {\n          if (lowerMessage.includes(keyword)) {\n            selectedAgents.push(agentKey);\n            reasoning = `${agent.name} selected for ${keyword}-related query`;\n            workflow = [\n              { id: 'step-1', name: agent.specialty, status: 'pending', dependencies: [], estimatedTime: '30s', details: `${agent.specialty} analysis`, agent: agent.name }\n            ];\n            break;\n          }\n        }\n        if (selectedAgents.length > 0) break;\n      }\n    }\n\n    if (selectedAgents.length === 0) {\n      selectedAgents.push('general');\n      reasoning = 'General assistant for broad query';\n      workflow = [\n        { id: 'step-1', name: 'General Assistance', status: 'pending', dependencies: [], estimatedTime: '10s', details: 'Provide general help', agent: 'BI Assistant' }\n      ];\n    }\n\n    this.dispatch({\n      type: 'ADD_THINKING_STEP',\n      payload: `üß† Agent Selection: ${reasoning}`\n    });\n\n    return { agents: selectedAgents, workflow, reasoning };\n  }\n\n  async generateEnhancedResponse(userMessage: string, context: any) {\n    const startTime = Date.now();\n    this.performanceMetrics.requestCount++;\n\n    // Validate input\n    const validation = validateChatMessage(userMessage);\n    if (!validation.isValid) {\n      throw new Error(validation.error);\n    }\n\n    const sanitizedMessage = sanitizeUserInput(userMessage);\n\n    this.dispatch({ type: 'ADD_THINKING_STEP', payload: 'üîç Analyzing request with enhanced intelligence...' });\n\n    // Analyze user intent and update conversation context\n    const intentAnalysis = dynamicInsightsAnalyzer.analyzeUserIntent(sanitizedMessage);\n    this.dispatch({\n      type: 'UPDATE_CONVERSATION_CONTEXT',\n      payload: {\n        topics: [...new Set([...(context.conversationContext?.topics || []), ...intentAnalysis.topics])],\n        currentPhase: intentAnalysis.phase,\n        userIntent: intentAnalysis.intent\n      }\n    });\n\n    // Select optimal agents and workflow\n    const { agents, workflow, reasoning } = this.selectOptimalAgents(sanitizedMessage, context);\n\n    // ALWAYS set workflow so drawer shows progress\n    this.dispatch({ type: 'SET_WORKFLOW', payload: workflow });\n\n    let finalResponse = '';\n    let finalReportData = null;\n    let finalAgentType = 'general';\n    let aggregatedInsights: any = {};\n    let updatedLobData: any = null; // Track updated LOB data after forecast\n\n    for (let i = 0; i < agents.length; i++) {\n      const agentKey = agents[i];\n      const currentStepId = workflow[i]?.id;\n\n      this.currentAgent = agentKey;\n      finalAgentType = agentKey;\n      const agent = ENHANCED_AGENTS[agentKey];\n\n      // Mark current step as ACTIVE\n      if (currentStepId) {\n        this.dispatch({\n          type: 'UPDATE_WORKFLOW_STEP',\n          payload: { id: currentStepId, status: 'active' }\n        });\n      }\n\n      try {\n        this.dispatch({ type: 'ADD_THINKING_STEP', payload: `${agent.emoji} ${agent.name} analyzing...` });\n\n        // Enhanced context building with statistical analysis (pass user message)\n        const enhancedContext = await this.buildEnhancedContext(context, agentKey, sanitizedMessage);\n        const systemPrompt = this.buildEnhancedSystemPrompt(enhancedContext, agent);\n\n        this.conversationHistory.push({ role: \"user\", content: sanitizedMessage });\n\n        const completion = await enhancedAPIClient.createChatCompletion({\n          model: undefined, // Let the client choose the appropriate model based on provider\n          messages: [\n            { role: \"system\", content: systemPrompt },\n            ...this.conversationHistory.slice(-10) // Keep recent context\n          ],\n          temperature: agentKey === 'insights' ? 0.7 : 0.5,\n          max_tokens: 1200,\n          useCache: true\n        });\n\n        let aiResponse = completion.choices[0].message.content ?? \"\";\n\n        // Clean the response - remove Python code and technical details\n        aiResponse = cleanAgentResponse(aiResponse);\n\n        // Track token usage if available\n        if (completion.usage && !completion.fromCache) {\n          this.performanceMetrics.totalTokensUsed += completion.usage.total_tokens || 0;\n          this.performanceMetrics.promptTokens += completion.usage.prompt_tokens || 0;\n          this.performanceMetrics.completionTokens += completion.usage.completion_tokens || 0;\n          this.performanceMetrics.avgTokensPerRequest =\n            this.performanceMetrics.totalTokensUsed / this.performanceMetrics.requestCount;\n        }\n        this.dispatch({ type: 'ADD_THINKING_STEP', payload: `‚úÖ ${agent.name} analysis complete` });\n\n        // Mark current step as COMPLETED and update analyzed data\n        if (currentStepId) {\n          this.dispatch({\n            type: 'UPDATE_WORKFLOW_STEP',\n            payload: { id: currentStepId, status: 'completed' }\n          });\n\n          // Track what analysis has been completed\n          const analysisUpdate: any = {};\n          if (agentKey === 'eda') {\n            analysisUpdate.hasEDA = true;\n            analysisUpdate.availableCharts = ['trend', 'distribution', 'seasonality'];\n          } else if (agentKey === 'preprocessing') {\n            analysisUpdate.hasPreprocessing = true;\n          } else if (agentKey === 'forecasting') {\n            analysisUpdate.hasForecasting = true;\n            analysisUpdate.availableCharts = [...(analysisUpdate.availableCharts || []), 'forecast', 'confidence'];\n          } else if (agentKey === 'insights') {\n            analysisUpdate.hasInsights = true;\n          }\n\n          if (Object.keys(analysisUpdate).length > 0) {\n            this.dispatch({ type: 'UPDATE_ANALYZED_DATA', payload: analysisUpdate });\n          }\n        }\n\n        // Store agent responses for multi-agent workflows\n        if (agents.length === 1) {\n          finalResponse = aiResponse;\n        } else {\n          // For multi-agent workflows, store full response for expandable view\n          // Make sure to remove any remaining JSON/REPORT_DATA blocks\n          let cleanedResponse = aiResponse.trim();\n\n          // Additional cleaning: remove any JSON-like content that looks like REPORT_DATA\n          cleanedResponse = cleanedResponse.replace(/\\{[\\s\\S]*?\"title\"[\\s\\S]*?\\}/g, '');\n          cleanedResponse = cleanedResponse.replace(/^\\s*[\\{\\}]\\s*$/gm, '');\n          cleanedResponse = cleanedResponse.trim();\n\n          // Extract one-line summary (first meaningful sentence)\n          const lines = cleanedResponse.split('\\n').filter(line => {\n            const trimmed = line.trim();\n            return trimmed &&\n              !trimmed.includes('##') &&\n              !trimmed.includes('[REPORT_DATA]') &&\n              !trimmed.includes('\"title\"') &&\n              !trimmed.startsWith('{') &&\n              !trimmed.startsWith('}');\n          });\n          const oneLiner = lines[0] || `Completed ${agent.specialty}`;\n\n          // Initialize or update aggregatedInsights for this agent\n          if (!aggregatedInsights[agentKey]) {\n            aggregatedInsights[agentKey] = {};\n          }\n          aggregatedInsights[agentKey].summary = oneLiner;\n          aggregatedInsights[agentKey].fullResponse = cleanedResponse;\n          aggregatedInsights[agentKey].agentName = agent.name;\n          aggregatedInsights[agentKey].agentEmoji = agent.emoji;\n        }\n\n        // Parse and aggregate insights from REPORT_DATA\n        const reportMatch = aiResponse.match(/\\[REPORT_DATA\\]([\\s\\S]*?)\\[\\/REPORT_DATA\\]/);\n        if (reportMatch) {\n          try {\n            const reportData = JSON.parse(reportMatch[1].trim());\n            // Merge report data with existing agent data instead of replacing\n            if (!aggregatedInsights[agentKey]) {\n              aggregatedInsights[agentKey] = {};\n            }\n            Object.assign(aggregatedInsights[agentKey], reportData);\n            if (agents.length === 1) {\n              finalReportData = reportData;\n            }\n            this.dispatch({ type: 'ADD_THINKING_STEP', payload: 'üìä Insights extracted and processed' });\n          } catch (e) {\n            console.error('Failed to parse report data:', e);\n          }\n        }\n\n        // If EDA agent, synthesize a deterministic statistical summary from actual data (prevents generic how-to replies)\n        if (agentKey === 'eda' && enhancedContext.statisticalAnalysis) {\n          try {\n            const stats = enhancedContext.statisticalAnalysis.summary;\n            const trend = enhancedContext.statisticalAnalysis.trend;\n            const quality = enhancedContext.statisticalAnalysis.quality;\n            const outliers = enhancedContext.statisticalAnalysis.statistical?.outliers || { indices: [], values: [] };\n\n            const reportData = {\n              title: 'EDA Results',\n              keyFindings: [\n                `Mean: ${Number(stats.mean || stats.descriptive?.mean || 0).toFixed(2)}`,\n                `Std Dev: ${Number(stats.standardDeviation || stats.descriptive?.standardDeviation || 0).toFixed(2)}`,\n                `Trend: ${trend?.direction || 'stable'} (confidence ${(trend?.confidence || 0).toFixed(2)})`\n              ],\n              dataOverview: {\n                records: context.selectedLob?.recordCount || (enhancedContext.dataPoints || []).length,\n                mean: Number(stats.mean || stats.descriptive?.mean || 0),\n                stdDev: Number(stats.standardDeviation || stats.descriptive?.standardDeviation || 0),\n                min: stats.descriptive?.range?.min ?? null,\n                max: stats.descriptive?.range?.max ?? null,\n                quality: quality?.score ?? null\n              },\n              outlierSummary: {\n                count: Array.isArray(outliers.values) ? outliers.values.length : 0,\n                indices: outliers.indices || []\n              },\n              businessInsights: []\n            };\n\n            if (!aggregatedInsights[agentKey]) {\n              aggregatedInsights[agentKey] = {};\n            }\n            aggregatedInsights[agentKey] = {\n              ...aggregatedInsights[agentKey],\n              agentName: agent.name,\n              agentEmoji: agent.emoji,\n              summary: `${reportData.dataOverview.records} records, mean ${reportData.dataOverview.mean.toFixed(2)}, std ${reportData.dataOverview.stdDev.toFixed(2)}`,\n              fullResponse: aiResponse,\n              ...reportData\n            };\n\n            // Ensure finalReportData for single-agent flows\n            if (agents.length === 1) {\n              finalReportData = reportData;\n            }\n\n            this.dispatch({ type: 'ADD_THINKING_STEP', payload: 'üìä Deterministic EDA summary generated' });\n          } catch (e) {\n            console.error('Failed to synthesize EDA report:', e);\n          }\n        }\n\n        // If this is the forecasting agent in a SINGLE-AGENT workflow, generate and attach forecast data\n        // Skip this for multi-agent workflows (6-agent) as they handle forecasting separately\n        const isMultiAgentWorkflow = agents.length > 1;\n\n        if (agentKey === 'forecasting' && context.selectedLob?.timeSeriesData && !isMultiAgentWorkflow) {\n          console.log('üìä Single forecasting agent - generating quick forecast with linear regression');\n\n          const historicalData = context.selectedLob.timeSeriesData;\n          const lastDate = new Date(historicalData[historicalData.length - 1].Date);\n          const forecastPoints: any[] = [];\n\n          // Detect data frequency by checking intervals between consecutive dates\n          let dataFrequencyDays = 1; // default to daily\n          if (historicalData.length >= 2) {\n            const intervals: number[] = [];\n            for (let i = 1; i < Math.min(10, historicalData.length); i++) {\n              const date1 = new Date(historicalData[i - 1].Date);\n              const date2 = new Date(historicalData[i].Date);\n              const diffDays = Math.round((date2.getTime() - date1.getTime()) / (1000 * 60 * 60 * 24));\n              if (diffDays > 0) intervals.push(diffDays);\n            }\n            // Use the most common interval\n            if (intervals.length > 0) {\n              dataFrequencyDays = Math.round(intervals.reduce((a, b) => a + b) / intervals.length);\n            }\n          }\n\n          // Calculate number of forecast periods based on frequency\n          // For 30 days: if weekly (7 days), generate 4 periods; if daily, generate 30 periods\n          const forecastDays = 30; // default forecast horizon\n          const numForecastPeriods = Math.ceil(forecastDays / dataFrequencyDays);\n\n          // Generate forecast using simple linear regression\n          const values = historicalData.map(d => d.Value);\n          const n = values.length;\n          let sumX = 0, sumY = 0, sumXY = 0, sumX2 = 0;\n\n          for (let i = 0; i < n; i++) {\n            sumX += i;\n            sumY += values[i];\n            sumXY += i * values[i];\n            sumX2 += i * i;\n          }\n\n          const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\n          const intercept = (sumY - slope * sumX) / n;\n          const residuals = values.map((v, i) => v - (slope * i + intercept));\n          const stdDev = Math.sqrt(residuals.reduce((sum, r) => sum + r * r, 0) / (n - 2));\n\n          // Generate forecast points respecting data frequency\n          for (let i = 1; i <= numForecastPeriods; i++) {\n            const forecastDate = new Date(lastDate);\n            forecastDate.setDate(forecastDate.getDate() + (i * dataFrequencyDays));\n\n            const forecast = slope * (n + i - 1) + intercept;\n            const ci = 1.96 * stdDev * Math.sqrt(1 + 1 / n);\n\n            forecastPoints.push({\n              Date: forecastDate,\n              Value: 0,\n              Orders: 0,\n              Forecast: Math.max(0, forecast),\n              ForecastLower: Math.max(0, forecast - ci),\n              ForecastUpper: Math.max(0, forecast + ci),\n              CreatedDate: new Date()\n            });\n          }\n\n          // Update LOB with forecast data\n          const combinedData = [...historicalData, ...forecastPoints];\n          const r2 = 1 - (residuals.reduce((sum, r) => sum + r * r, 0) / values.reduce((sum, v) => sum + Math.pow(v - sumY / n, 2), 0));\n          const mape = residuals.reduce((sum, r, i) => sum + Math.abs(r / values[i]), 0) / n * 100;\n\n          // Determine forecast description based on frequency\n          let forecastDescription = `${forecastDays} days`;\n          if (dataFrequencyDays === 7) {\n            forecastDescription = `${numForecastPeriods} weeks`;\n          } else if (dataFrequencyDays === 30 || dataFrequencyDays === 31) {\n            forecastDescription = `${numForecastPeriods} months`;\n          }\n\n          const forecastMetrics = {\n            modelName: 'Linear Regression (Quick Forecast)',\n            accuracy: Math.max(85, Math.min(98, 100 - mape)),\n            mape: mape,\n            rmse: stdDev,\n            r2: r2,\n            forecastHorizon: forecastDescription,\n            trainedDate: new Date(),\n            confidenceLevel: 95\n          };\n\n          console.log('üìä Quick forecast metrics (linear regression):', forecastMetrics);\n\n          this.dispatch({\n            type: 'UPDATE_LOB_FORECAST',\n            payload: {\n              lobId: context.selectedLob.id,\n              forecastData: combinedData,\n              forecastMetrics: forecastMetrics\n            }\n          });\n\n          // Store updated data for visualization\n          updatedLobData = {\n            ...context.selectedLob,\n            timeSeriesData: combinedData,\n            forecastMetrics: forecastMetrics\n          };\n        } else if (agentKey === 'forecasting' && isMultiAgentWorkflow) {\n          console.log('‚è≠Ô∏è Skipping individual forecast generation - multi-agent workflow will handle it');\n        }\n\n        await new Promise(resolve => setTimeout(resolve, 500));\n        this.conversationHistory.push({ role: \"assistant\", content: aiResponse });\n\n      } catch (error) {\n        console.error(`${agent.name} Error:`, error);\n        this.performanceMetrics.errorCount++;\n\n        // Mark current step as ERROR\n        if (currentStepId) {\n          this.dispatch({\n            type: 'UPDATE_WORKFLOW_STEP',\n            payload: { id: currentStepId, status: 'error' }\n          });\n        }\n\n        const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred';\n\n        // Check if this is an API key configuration error\n        if (errorMessage.includes('üîë') || errorMessage.includes('API key')) {\n          finalResponse += `## ${agent.name}\\n${errorMessage}\\n\\n**Quick Fix:**\\n‚Ä¢ Click the Settings button below to configure your OpenAI API key\\n‚Ä¢ Get your key from https://platform.openai.com/api-keys\\n‚Ä¢ Test the connection and try again\\n\\n`;\n\n          // Add a suggestion to open settings\n          this.dispatch({\n            type: 'ADD_THINKING_STEP',\n            payload: '‚öôÔ∏è API configuration required - please check Settings'\n          });\n        } else {\n          finalResponse += `## ${agent.name}\\n‚ö†Ô∏è ${errorMessage}\\n\\n**Troubleshooting:**\\n‚Ä¢ Check your internet connection\\n‚Ä¢ Try again in a moment\\n‚Ä¢ Contact support if the issue persists\\n\\n`;\n        }\n\n        // If all agents are failing due to API issues, break early\n        if (errorMessage.includes('üîë')) {\n          break;\n        }\n      }\n    }\n\n    // Generate comprehensive report for multi-agent workflows\n    if (agents.length > 1 && Object.keys(aggregatedInsights).length > 0) {\n      finalReportData = this.generateComprehensiveReport(aggregatedInsights);\n\n      // Create concise summary with expandable agent details\n      const lobName = context.selectedLob?.name || 'your data';\n      const recordCount = context.selectedLob?.mockData?.length || 0;\n\n      // Build the summary\n      finalResponse = `## üéØ Analysis Complete for ${lobName}\\n\\n`;\n\n      // Comprehensive summary for forecasting workflow\n      if (agents.includes('forecasting')) {\n        finalResponse += `I completed a comprehensive forecasting analysis on ${recordCount} data points through a ${agents.length}-step ML pipeline. `;\n\n        // Build a narrative summary covering all agents\n        let narrative = '';\n\n        if (aggregatedInsights['eda']) {\n          narrative += `First, I explored your data to understand patterns and quality. `;\n        }\n\n        if (aggregatedInsights['preprocessing']) {\n          narrative += `Then I cleaned the data and engineered features for optimal model performance. `;\n        }\n\n        if (aggregatedInsights['modeling']) {\n          const modelData = aggregatedInsights['modeling'];\n          if (modelData.summary) {\n            narrative += `I trained multiple ML models and selected the best performer. `;\n          }\n        }\n\n        if (aggregatedInsights['validation']) {\n          narrative += `The model was validated on holdout data to ensure reliability. `;\n        }\n\n        if (aggregatedInsights['forecasting']) {\n          const forecastData = aggregatedInsights['forecasting'];\n          if (forecastData.summary) {\n            // Get the actual forecast horizon from LOB metrics\n            const forecastHorizon = context.selectedLob?.forecastMetrics?.forecastHorizon || '30 days';\n            narrative += `Finally, I generated a ${forecastHorizon} forecast with confidence intervals. `;\n          }\n        }\n\n        if (aggregatedInsights['insights']) {\n          narrative += `The analysis reveals actionable business opportunities for planning and decision-making.`;\n        }\n\n        finalResponse += narrative;\n        finalResponse += `\\n\\n**Key Results:**\\n`;\n\n        // Extract specific metrics and findings\n        if (aggregatedInsights['eda']?.summary) {\n          finalResponse += `‚Ä¢ Data Analysis: ${aggregatedInsights['eda'].summary}\\n`;\n        }\n        if (aggregatedInsights['modeling']?.summary) {\n          finalResponse += `‚Ä¢ Model Performance: ${aggregatedInsights['modeling'].summary}\\n`;\n        }\n        if (aggregatedInsights['forecasting']?.summary) {\n          finalResponse += `‚Ä¢ Forecast: ${aggregatedInsights['forecasting'].summary}\\n`;\n        }\n\n        finalResponse += `\\nüìä Click \"Visualize Actual & Forecast\" below to see the complete analysis with charts.\\n\\n`;\n      } else {\n        // For non-forecasting workflows, show brief summary\n        finalResponse += `Completed ${agents.length} analysis steps. `;\n        const firstInsight = Object.values(aggregatedInsights).find((d: any) => d.summary);\n        if (firstInsight && (firstInsight as any).summary) {\n          finalResponse += `${(firstInsight as any).summary}`;\n        }\n        finalResponse += `\\n\\n`;\n      }\n\n      // Agent details (expandable format) - show each agent's performance\n      finalResponse += `**Detailed Steps:**\\n`;\n      finalResponse += `<details>\\n<summary>‚ñ∂ Click to expand agent details</summary>\\n\\n`;\n\n      Object.keys(aggregatedInsights).forEach(agentKey => {\n        const agentData = aggregatedInsights[agentKey];\n        if (agentData.agentName) {\n          finalResponse += `### ${agentData.agentEmoji} ${agentData.agentName}\\n`;\n          finalResponse += `${agentData.fullResponse}\\n\\n`;\n          finalResponse += `---\\n\\n`;\n        }\n      });\n\n      finalResponse += `</details>\\n\\n`;\n      finalResponse += `üìä Review the visualizations above for detailed insights.`;\n    }\n\n    // Update performance metrics\n    const responseTime = Date.now() - startTime;\n    this.performanceMetrics.avgResponseTime =\n      (this.performanceMetrics.avgResponseTime * (this.performanceMetrics.requestCount - 1) + responseTime) / this.performanceMetrics.requestCount;\n    this.performanceMetrics.cacheHitRate = enhancedAPIClient.getCacheStats().hitRate;\n\n    this.dispatch({ type: 'CLEAR_THINKING_STEPS' });\n\n    // Prepare visualization data if available\n    // Use updatedLobData if forecast was generated, otherwise use original context\n    let visualizationData = null;\n    const lobToUse = updatedLobData || context.selectedLob;\n\n    if (lobToUse?.timeSeriesData) {\n      const hasForecast = lobToUse.timeSeriesData.some((d: any) => d.Forecast !== undefined && d.Forecast > 0);\n      const hasOutliers = agents.includes('eda') || agents.includes('preprocessing');\n\n      visualizationData = {\n        data: lobToUse.timeSeriesData,\n        target: 'Value' as 'Value' | 'Orders',\n        isShowing: false,\n        showOutliers: false\n      };\n\n      // Log for debugging\n      console.log('Visualization data prepared:', {\n        totalPoints: lobToUse.timeSeriesData.length,\n        forecastPoints: lobToUse.timeSeriesData.filter((d: any) => d.Forecast !== undefined && d.Forecast > 0).length,\n        hasForecast,\n        hasOutliers,\n        agents: agents\n      });\n    }\n\n    return {\n      response: finalResponse.trim() || \"I apologize, but I couldn't generate a complete response. Please try again.\",\n      agentType: finalAgentType,\n      reportData: finalReportData,\n      performance: this.performanceMetrics,\n      multiAgent: agents.length > 1,\n      visualization: visualizationData,\n      tokenUsage: {\n        promptTokens: this.performanceMetrics.promptTokens,\n        completionTokens: this.performanceMetrics.completionTokens,\n        totalTokens: this.performanceMetrics.totalTokensUsed\n      }\n    };\n  }\n\n  private async buildEnhancedContext(context: any, agentKey: string, userMessage: string = '') {\n    let enhancedContext: any = { ...context };\n\n    // Prefer actual backend timeSeriesData if present\n    const raw = context.selectedLob?.timeSeriesData || context.selectedLob?.mockData || [];\n    const dataPoints: DataPoint[] = (raw || []).map((item: any) => ({\n      date: new Date(item.Date),\n      value: (item.Value !== undefined && item.Value !== null) ? Number(item.Value) : null,\n      orders: item.Orders !== undefined ? Number(item.Orders) : undefined\n    })).filter(d => d.value !== null);\n\n    enhancedContext.dataPoints = dataPoints;\n\n    // Only compute heavy stats for EDA or Insights requests\n    if ((agentKey === 'eda' || agentKey === 'insights') && dataPoints.length > 0) {\n      // Use the StatisticalAnalyzer to compute summaries\n      const summary = statisticalAnalyzer.generateSummary(dataPoints, false);\n      const trendAnalysis = statisticalAnalyzer.analyzeTrend(dataPoints);\n      const seasonality = statisticalAnalyzer.analyzeSeasonality(dataPoints);\n      const qualityReport = insightsGenerator.generateDataQualityReport(dataPoints);\n\n      // Outlier detection only when explicitly asked by user (avoid unsolicited outlier mentions)\n      const wantsOutliers = /\\b(outlier|anomal|quality\\s*check)\\b/i.test(userMessage);\n      let outlierResult = { indices: [], values: [], method: 'iqr' };\n      if (wantsOutliers) {\n        const values = dataPoints.map(d => d.value);\n        outlierResult = statisticalAnalyzer.detectOutliers(values, 'iqr');\n      }\n\n      enhancedContext.statisticalAnalysis = {\n        statistical: {\n          mean: summary.descriptive.mean,\n          standardDeviation: summary.descriptive.standardDeviation,\n          skewness: summary.distribution.skewness,\n          kurtosis: summary.distribution.kurtosis,\n          quartiles: summary.descriptive.quartiles,\n          outliers: outlierResult\n        },\n        summary: {\n          mean: summary.descriptive.mean,\n          median: summary.descriptive.median,\n          standardDeviation: summary.descriptive.standardDeviation,\n          range: summary.descriptive.range\n        },\n        trend: trendAnalysis,\n        seasonality,\n        quality: qualityReport\n      };\n    }\n\n    return enhancedContext;\n  }\n\n  private buildEnhancedSystemPrompt(context: any, agent: AgentConfig): string {\n    const { selectedBu, selectedLob, statisticalAnalysis } = context;\n\n    let dataContext = 'No data available';\n    let statisticalContext = '';\n\n    if (selectedLob?.hasData) {\n      const dq = selectedLob.dataQuality;\n      dataContext = `\nDATA CONTEXT:\n- Business Unit: ${selectedBu?.name || 'None'}\n- Line of Business: ${selectedLob?.name || 'None'}\n- Records: ${selectedLob.recordCount}\n- Data Quality: ${dq?.completeness}%\n- Trend: ${dq?.trend || 'stable'}\n- Seasonality: ${dq?.seasonality?.replace(/_/g, ' ') || 'unknown'}\n`;\n\n      // Add enhanced statistical context for relevant agents\n      if (statisticalAnalysis && (agent.name.includes('Explorer') || agent.name.includes('Analyst'))) {\n        const stats = statisticalAnalysis.summary;\n        const trend = statisticalAnalysis.trend;\n        const quality = statisticalAnalysis.quality;\n\n        statisticalContext = `\nADVANCED STATISTICAL ANALYSIS:\n- Mean: ${safeFixed(stats.mean, 2)}, Std Dev: ${safeFixed(stats.standardDeviation, 2)}\n- Skewness: ${safeFixed(stats.skewness, 2)}, Kurtosis: ${safeFixed(stats.kurtosis, 2)}\n- Trend Direction: ${trend.direction} (confidence: ${trend && typeof trend.confidence === 'number' ? safeFixed(trend.confidence * 100, 1) + '%' : 'N/A'})\n- Seasonality: ${statisticalAnalysis.seasonality.hasSeasonality ? 'Detected' : 'Not detected'}\n- Data Quality Score: ${quality && typeof quality.score === 'number' ? quality.score + '/100' : 'N/A'}\n- Outliers: ${(stats.outliers && stats.outliers.values) ? stats.outliers.values.length : 0} detected (${selectedLob?.recordCount ? ((stats.outliers?.values?.length || 0) / selectedLob.recordCount * 100).toFixed(1) + '%' : 'N/A'})\n- R¬≤: ${trend.linearRegression && typeof trend.linearRegression.rSquared === 'number' ? trend.linearRegression.rSquared.toFixed(3) : 'N/A'}`;\n      }\n    }\n\n    return `${agent.systemPrompt}\n\nBUSINESS CONTEXT:\n${dataContext}\n\n${statisticalContext}\n\nAGENT CAPABILITIES: ${agent.capabilities.join(', ')}\n\nPERFORMANCE REQUIREMENTS:\n- Provide specific, actionable insights\n- Include confidence levels and statistical significance\n- Focus on business impact and recommendations\n- Use structured reporting for complex analyses\n- Maintain professional yet accessible communication\n\nYour specialty: ${agent.specialty}\nLeverage your expertise to provide deep, meaningful, and statistically sound insights.`;\n  }\n\n  private generateComprehensiveReport(insights: any) {\n    const sections: any = {};\n\n    // Aggregate insights from all agents\n    Object.keys(insights).forEach(agentKey => {\n      const data = insights[agentKey];\n      if (data.title) sections[agentKey] = data;\n    });\n\n    return {\n      title: \"Comprehensive Business Intelligence Analysis\",\n      executiveSummary: \"Multi-agent analysis combining statistical insights, data quality assessment, forecasting, and strategic recommendations.\",\n      sections,\n      overallRecommendations: this.synthesizeRecommendations(insights),\n      confidence: this.calculateOverallConfidence(insights)\n    };\n  }\n\n  private synthesizeRecommendations(insights: any): string[] {\n    const allRecommendations: string[] = [];\n\n    Object.values(insights).forEach((data: any) => {\n      if (data.recommendations) {\n        allRecommendations.push(...data.recommendations);\n      }\n    });\n\n    // Remove duplicates and prioritize\n    return Array.from(new Set(allRecommendations)).slice(0, 5);\n  }\n\n  private calculateOverallConfidence(insights: any): number {\n    const confidenceScores: number[] = [];\n\n    Object.values(insights).forEach((data: any) => {\n      if (data.confidence) confidenceScores.push(data.confidence);\n      if (data.qualityScore) confidenceScores.push(data.qualityScore / 100);\n    });\n\n    return confidenceScores.length > 0\n      ? confidenceScores.reduce((a, b) => a + b, 0) / confidenceScores.length\n      : 0.5;\n  }\n\n  getPerformanceMetrics() {\n    return {\n      ...this.performanceMetrics,\n      cacheStats: enhancedAPIClient.getCacheStats(),\n      queueSize: enhancedAPIClient.getQueueSize()\n    };\n  }\n}\n\nlet enhancedChatHandler: EnhancedMultiAgentChatHandler | null = null;\n\n// Enhanced Chat Bubble with performance indicators\nfunction EnhancedChatBubble({\n  message,\n  onSuggestionClick,\n  onVisualizeClick,\n  onGenerateReport,\n  thinkingSteps,\n  performance\n}: {\n  message: ChatMessage;\n  onSuggestionClick: (suggestion: string) => void;\n  onVisualizeClick: (messageId: string) => void;\n  onGenerateReport?: (messageId: string) => void;\n  thinkingSteps: string[];\n  performance?: any;\n}) {\n  const isUser = message.role === 'user';\n  const agentInfo = message.agentType ? ENHANCED_AGENTS[message.agentType as keyof typeof ENHANCED_AGENTS] : null;\n  const [showPerformance, setShowPerformance] = useState(false);\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  // Detect long responses (more than 1000 characters)\n  const isLongResponse = !isUser && !message.isTyping && message.content.length > 1000;\n\n  // Extract comprehensive summary from ALL sections\n  const getSummary = () => {\n    const content = message.content;\n\n    // Split into major sections (## headers)\n    const sections = content.split(/(?=##\\s)/g).filter(s => s.trim());\n\n    // Extract title\n    const title = sections[0]?.split('\\n')[0]?.replace(/^#+\\s*/, '') || 'Analysis Summary';\n\n    // Build comprehensive summary covering all sections\n    const sectionSummaries: string[] = [];\n\n    sections.forEach(section => {\n      const lines = section.split('\\n').filter(l => l.trim());\n      const sectionTitle = lines[0]?.replace(/^#+\\s*/, '').replace(/^Step \\d+:\\s*/, '');\n\n      // Skip the main title\n      if (sectionTitle === title) return;\n\n      // Special handling for Model Training section\n      if (sectionTitle.includes('Model Training')) {\n        // Extract all tested models and the best one\n        const modelLines = lines.filter(l => /^\\*\\*Models Tested/.test(l.trim()) || /^‚Ä¢.*:.*MAPE/.test(l.trim()));\n        const bestModelLine = lines.find(l => /Best Performer|Selected Model/.test(l));\n\n        if (modelLines.length > 1) {\n          const testedModels = lines.filter(l => /^‚Ä¢\\s*\\*\\*\\w+\\*\\*:/.test(l.trim()));\n          const modelNames = testedModels.map(l => l.match(/\\*\\*(\\w+)\\*\\*/)?.[1]).filter(Boolean);\n          const bestModel = bestModelLine?.match(/Best Performer:\\s*\\*\\*(\\w+)\\*\\*/)?.[1] ||\n            lines.find(l => /Best Performer/.test(l))?.match(/\\*\\*(\\w+)\\*\\*/)?.[1];\n\n          if (modelNames.length > 0 && bestModel) {\n            sectionSummaries.push(`‚Ä¢ **${sectionTitle}**: Tested ${modelNames.length} models (${modelNames.join(', ')}). ${bestModel} selected as best performer`);\n            return;\n          }\n        }\n      }\n\n      // Extract key points (bold text or bullet points)\n      const keyPoints = lines.filter(l =>\n        /^\\*\\*.*\\*\\*/.test(l.trim()) || // Bold text\n        /^[‚Ä¢\\-\\*]\\s/.test(l.trim()) || // Bullet points\n        /^üèÜ|^‚úÖ|^üìä|^üéØ/.test(l.trim()) // Emoji indicators\n      );\n\n      // Get the most important point from this section\n      if (keyPoints.length > 0) {\n        const mainPoint = keyPoints[0]\n          .replace(/^[‚Ä¢\\-\\*]\\s*/, '')\n          .replace(/\\*\\*/g, '')\n          .replace(/^[üèÜ‚úÖüìäüéØ]\\s*/, '')\n          .trim();\n\n        if (mainPoint && sectionTitle) {\n          sectionSummaries.push(`‚Ä¢ **${sectionTitle}**: ${mainPoint}`);\n        }\n      }\n    });\n\n    // Build the comprehensive summary\n    if (sectionSummaries.length > 0) {\n      return `**${title}**\\n\\n**Executive Summary:**\\n\\nCompleted a comprehensive 6-step analysis workflow covering data exploration, preprocessing, model training, validation, forecasting, and business insights.\\n\\n**Key Highlights:**\\n${sectionSummaries.join('\\n')}\\n\\n*Click \"Show more details\" below to see the complete analysis with detailed metrics, charts, and recommendations for each step.*`;\n    }\n\n    // Fallback: show first meaningful paragraph (skip title)\n    const paragraphs = content.split('\\n\\n').filter(p => p.trim() && !p.startsWith('#'));\n    const firstParagraph = paragraphs[0] || content.substring(0, 300);\n    return firstParagraph.length > 300 ? firstParagraph.substring(0, 300) + '...' : firstParagraph;\n  };\n\n  return (\n    <div className={cn('flex items-start gap-3 w-full', isUser ? 'justify-end' : 'justify-start')}>\n      {!isUser && (\n        <Avatar className=\"h-10 w-10\">\n          <AvatarFallback className={cn(\n            \"text-lg font-semibold\",\n            agentInfo?.color || \"bg-gradient-to-br from-blue-500 to-purple-600 text-white\"\n          )}>\n            {agentInfo?.emoji || <Bot />}\n          </AvatarFallback>\n        </Avatar>\n      )}\n\n      <div className={cn(\"max-w-4xl\", isUser ? \"order-1\" : \"\")}>\n        {/* Enhanced Agent Badge */}\n        {!isUser && agentInfo && agentInfo.name !== 'BI Assistant' && (\n          <div className=\"mb-2 flex items-center gap-2 flex-wrap\">\n            <Badge variant=\"outline\" className={cn(\"text-xs font-medium\", agentInfo.color)}>\n              <span className=\"mr-1\">{agentInfo.emoji}</span>\n              {agentInfo.name}\n            </Badge>\n            <span className=\"text-xs text-muted-foreground\">‚Ä¢ {agentInfo.specialty}</span>\n            {performance && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-6 px-2 text-xs\"\n                onClick={() => setShowPerformance(!showPerformance)}\n              >\n                <Zap className=\"h-3 w-3 mr-1\" />\n                Performance\n              </Button>\n            )}\n            {message.tokenUsage && message.tokenUsage.totalTokens > 0 && (\n              <Badge variant=\"outline\" className=\"text-xs bg-blue-50 text-blue-600 border-blue-200\">\n                {message.tokenUsage.totalTokens.toLocaleString()} tokens\n              </Badge>\n            )}\n          </div>\n        )}\n\n        {/* Performance Metrics Display */}\n        {showPerformance && performance && !isUser && (\n          <Card className=\"mb-2 p-3\">\n            <div className=\"grid grid-cols-2 gap-3 text-xs\">\n              <div className=\"flex items-center gap-1\">\n                <span className=\"text-muted-foreground\">Cache Hit:</span>\n                <span className=\"font-medium\">{(performance.cacheHitRate * 100).toFixed(1)}%</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <span className=\"text-muted-foreground\">Response:</span>\n                <span className=\"font-medium\">{performance.avgResponseTime}ms</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <span className=\"text-muted-foreground\">Requests:</span>\n                <span className=\"font-medium\">{performance.requestCount}</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <span className=\"text-muted-foreground\">Errors:</span>\n                <span className=\"font-medium\">{performance.errorCount}</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <span className=\"text-muted-foreground\">Total Tokens:</span>\n                <span className=\"font-medium\">{performance.totalTokensUsed?.toLocaleString() || 0}</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <span className=\"text-muted-foreground\">Avg/Request:</span>\n                <span className=\"font-medium\">{Math.round(performance.avgTokensPerRequest || 0)}</span>\n              </div>\n            </div>\n            {performance.totalTokensUsed > 0 && (\n              <div className=\"mt-2 pt-2 border-t border-border/50\">\n                <div className=\"flex justify-between text-xs text-muted-foreground\">\n                  <span>Prompt: {performance.promptTokens?.toLocaleString() || 0}</span>\n                  <span>Completion: {performance.completionTokens?.toLocaleString() || 0}</span>\n                </div>\n              </div>\n            )}\n          </Card>\n        )}\n\n        <div className={cn(\n          'rounded-xl p-4 text-[17px] leading-relaxed prose prose-base max-w-none',\n          'prose-headings:text-foreground prose-p:text-foreground prose-strong:text-foreground',\n          'prose-ul:text-foreground prose-li:text-foreground prose-code:text-foreground',\n          'prose-ul:my-2 prose-li:my-0.5 [&_ul]:space-y-0.5 [&_li]:leading-normal',\n          isUser\n            ? 'bg-primary text-primary-foreground prose-headings:text-primary-foreground prose-p:text-primary-foreground prose-strong:text-primary-foreground'\n            : 'bg-muted/50 border'\n        )}>\n          {message.isTyping ? (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"flex gap-1\">\n                  {[0, 0.2, 0.4].map((delay, i) => (\n                    <span\n                      key={i}\n                      className=\"h-2 w-2 animate-pulse rounded-full bg-current\"\n                      style={{ animationDelay: `${delay}s` }}\n                    />\n                  ))}\n                </div>\n                <span className=\"text-xs text-muted-foreground\">Enhanced AI processing...</span>\n              </div>\n\n              {/* Enhanced Thinking Steps with Progress */}\n              {thinkingSteps.length > 0 && (\n                <div className=\"space-y-2\">\n                  <Progress value={(thinkingSteps.length / 6) * 100} className=\"h-1\" />\n                  {thinkingSteps.map((step, i) => {\n                    const isActive = i === thinkingSteps.length - 1;\n                    return (\n                      <div\n                        key={i}\n                        className=\"flex items-center gap-3 animate-in slide-in-from-left duration-300\"\n                        style={{\n                          animationDelay: `${i * 100}ms`,\n                          opacity: isActive ? 1 : 0.6\n                        }}\n                      >\n                        {isActive ? (\n                          <div className=\"h-4 w-4 rounded-full border-2 border-current border-t-transparent animate-spin\" />\n                        ) : (\n                          <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                        )}\n                        <span className={cn(\n                          \"text-xs transition-all duration-300\",\n                          isActive ? \"text-foreground font-medium\" : \"text-muted-foreground/70\"\n                        )}>\n                          {step}\n                        </span>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          ) : isLongResponse ? (\n            // Long response with collapsible summary\n            <div>\n              <div\n                dangerouslySetInnerHTML={{\n                  __html: (isExpanded ? message.content : getSummary())\n                    .replace(/\\[WORKFLOW_PLAN\\][\\s\\S]*?\\[\\/WORKFLOW_PLAN\\]/, '')\n                    .replace(/\\[REPORT_DATA\\][\\s\\S]*?\\[\\/REPORT_DATA\\]/, '')\n                    // Headers\n                    .replace(/### (.*?)$/gm, '<h4 class=\"text-[17px] font-semibold mt-2 mb-1 text-foreground\">$1</h4>')\n                    .replace(/## (.*?)$/gm, '<h3 class=\"text-[19px] font-semibold mt-3 mb-1 text-foreground\">$1</h3>')\n                    .replace(/# (.*?)$/gm, '<h2 class=\"text-[21px] font-bold mt-3 mb-2 text-foreground\">$1</h2>')\n                    // Bold text\n                    .replace(/\\*\\*(.*?)\\*\\*/g, '<strong class=\"font-semibold text-foreground\">$1</strong>')\n                    // Tables - convert simple markdown tables\n                    .replace(/\\|(.*?)\\|/g, (match, content) => {\n                      const cells = content.split('|').map(cell => `<td class=\"border px-2 py-1 text-[15px]\">${cell.trim()}</td>`).join('');\n                      return `<tr>${cells}</tr>`;\n                    })\n                    // Numbered lists\n                    .replace(/^(\\d+)\\.\\s+(.*?)$/gm, '<div class=\"flex gap-2 my-1\"><span class=\"text-primary font-medium min-w-[20px]\">$1.</span><span>$2</span></div>')\n                    // Bullet points - better formatting\n                    .replace(/^[‚Ä¢\\-\\*]\\s+(.*?)$/gm, '<div class=\"flex gap-2 my-1\"><span class=\"text-primary\">‚Ä¢</span><span>$1</span></div>')\n                    // Nested bullet points\n                    .replace(/^\\s+[‚Ä¢\\-\\*]\\s+(.*?)$/gm, '<div class=\"flex gap-2 my-1 ml-4\"><span class=\"text-muted-foreground\">‚ó¶</span><span>$1</span></div>')\n                    // Code blocks\n                    .replace(/`([^`]+)`/g, '<code class=\"bg-muted px-1 py-0.5 rounded text-[15px] font-mono\">$1</code>')\n                    // Percentages and numbers highlighting\n                    .replace(/(\\d+\\.?\\d*%)/g, '<span class=\"font-semibold text-green-600 dark:text-green-400\">$1</span>')\n                    .replace(/(\\$[\\d,]+)/g, '<span class=\"font-semibold text-blue-600 dark:text-blue-400\">$1</span>')\n                    // Line breaks\n                    .replace(/\\n\\n/g, '</p><p class=\"mb-2\">')\n                    .replace(/\\n/g, '<br />')\n                    // Wrap in paragraphs\n                    .replace(/^/, '<p class=\"mb-2\">')\n                    .replace(/$/, '</p>')\n                }}\n              />\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsExpanded(!isExpanded)}\n                className=\"mt-2 text-sm text-primary hover:text-primary/80\"\n              >\n                {isExpanded ? (\n                  <>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-1\">\n                      <path d=\"m18 15-6-6-6 6\" />\n                    </svg>\n                    Show less\n                  </>\n                ) : (\n                  <>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-1\">\n                      <path d=\"m6 9 6 6 6-6\" />\n                    </svg>\n                    Show more details\n                  </>\n                )}\n              </Button>\n            </div>\n          ) : (\n            // Normal response\n            <div\n              dangerouslySetInnerHTML={{\n                __html: message.content\n                  .replace(/\\[WORKFLOW_PLAN\\][\\s\\S]*?\\[\\/WORKFLOW_PLAN\\]/, '')\n                  .replace(/\\[REPORT_DATA\\][\\s\\S]*?\\[\\/REPORT_DATA\\]/, '')\n                  // Headers\n                  .replace(/### (.*?)$/gm, '<h4 class=\"text-[17px] font-semibold mt-2 mb-1 text-foreground\">$1</h4>')\n                  .replace(/## (.*?)$/gm, '<h3 class=\"text-[19px] font-semibold mt-3 mb-1 text-foreground\">$1</h3>')\n                  .replace(/# (.*?)$/gm, '<h2 class=\"text-[21px] font-bold mt-3 mb-2 text-foreground\">$1</h2>')\n                  // Bold text\n                  .replace(/\\*\\*(.*?)\\*\\*/g, '<strong class=\"font-semibold text-foreground\">$1</strong>')\n                  // Tables - convert simple markdown tables\n                  .replace(/\\|(.*?)\\|/g, (match, content) => {\n                    const cells = content.split('|').map(cell => `<td class=\"border px-2 py-1 text-[15px]\">${cell.trim()}</td>`).join('');\n                    return `<tr>${cells}</tr>`;\n                  })\n                  // Numbered lists\n                  .replace(/^(\\d+)\\.\\s+(.*?)$/gm, '<div class=\"flex gap-2 my-1\"><span class=\"text-primary font-medium min-w-[20px]\">$1.</span><span>$2</span></div>')\n                  // Bullet points - better formatting\n                  .replace(/^[‚Ä¢\\-\\*]\\s+(.*?)$/gm, '<div class=\"flex gap-2 my-1\"><span class=\"text-primary\">‚Ä¢</span><span>$1</span></div>')\n                  // Nested bullet points\n                  .replace(/^\\s+[‚Ä¢\\-\\*]\\s+(.*?)$/gm, '<div class=\"flex gap-2 my-1 ml-4\"><span class=\"text-muted-foreground\">‚ó¶</span><span>$1</span></div>')\n                  // Code blocks\n                  .replace(/`([^`]+)`/g, '<code class=\"bg-muted px-1 py-0.5 rounded text-[15px] font-mono\">$1</code>')\n                  // Percentages and numbers highlighting\n                  .replace(/(\\d+\\.?\\d*%)/g, '<span class=\"font-semibold text-green-600 dark:text-green-400\">$1</span>')\n                  .replace(/(\\$[\\d,]+)/g, '<span class=\"font-semibold text-blue-600 dark:text-blue-400\">$1</span>')\n                  // Line breaks\n                  .replace(/\\n\\n/g, '</p><p class=\"mb-2\">')\n                  .replace(/\\n/g, '<br />')\n                  // Wrap in paragraphs\n                  .replace(/^/, '<p class=\"mb-2\">')\n                  .replace(/$/, '</p>')\n              }}\n            />\n          )}\n        </div>\n\n        {/* Enhanced Visualization Display */}\n        {message.visualization?.isShowing && message.visualization.data && (\n          <div className=\"mt-3 rounded-lg border bg-card p-3\">\n            <DataVisualizer\n              data={message.visualization.data}\n              target={message.visualization.target as 'Value' | 'Orders'}\n              isRealData={true}\n            />\n          </div>\n        )}\n\n        {/* Enhanced Action Buttons */}\n        <div className=\"mt-3 space-y-2\">\n          {/* API Setup Notice */}\n          {(message as any).requiresAPISetup && (\n            <div className=\"bg-blue-50 dark:bg-blue-950/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mt-3\">\n              <div className=\"flex items-start gap-3\">\n                <Settings className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n                <div className=\"flex-1\">\n                  <div className=\"text-sm font-semibold text-blue-800 dark:text-blue-200 mb-2\">\n                    üîë API Configuration Required\n                  </div>\n                  <div className=\"text-xs text-blue-700 dark:text-blue-300 mb-3\">\n                    To use the AI-powered analysis features, please configure at least one API provider:\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"sm\"\n                      className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                      onClick={() => onSuggestionClick('Open API Settings')}\n                    >\n                      <Settings className=\"h-3 w-3 mr-1\" />\n                      Configure API Keys\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Inline Capacity Planning Component */}\n          {(message as any).showCapacityPlanning && (\n            <div className=\"mt-3\">\n              <InlineCapacityPlanning messageId={message.id} />\n            </div>\n          )}\n\n          {/* Suggestions */}\n          {message.suggestions && message.suggestions.length > 0 && (\n            <div className=\"bg-muted/20 rounded-lg p-3\">\n              <div className=\"text-[15px] font-medium mb-2 text-muted-foreground flex items-center gap-1\">\n                <Brain className=\"h-4 w-4\" />\n                Suggested Next Steps\n              </div>\n              <div className=\"flex flex-wrap gap-2\">\n                {message.suggestions.map((suggestion, index) => (\n                  <Button\n                    key={index}\n                    size=\"sm\"\n                    variant={suggestion.includes('API') || suggestion.includes('Settings') ? 'default' : 'outline'}\n                    className={cn(\n                      \"text-[15px] h-9\",\n                      suggestion.includes('API') || suggestion.includes('Settings') && \"bg-blue-600 hover:bg-blue-700 text-white\"\n                    )}\n                    onClick={() => onSuggestionClick(suggestion)}\n                  >\n                    {suggestion.includes('Settings') && <Settings className=\"h-4 w-4 mr-1\" />}\n                    {suggestion}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex flex-wrap gap-2\">\n            {message.visualization && !message.visualization.isShowing && (\n              <Button size=\"sm\" variant=\"outline\" onClick={() => onVisualizeClick(message.id)}>\n                <BarChart className=\"mr-2 h-3 w-3\" />\n                {message.visualization.data.some(d => d.Forecast !== undefined)\n                  ? 'Visualize Actual & Forecast'\n                  : 'Visualize Data'}\n              </Button>\n            )}\n            {message.canGenerateReport && onGenerateReport && (\n              <Button\n                size=\"sm\"\n                variant=\"default\"\n                className=\"bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700\"\n                onClick={() => onGenerateReport(message.id)}\n              >\n                <FileText className=\"mr-2 h-3 w-3\" />\n                Generate Report\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {isUser && (\n        <Avatar className=\"h-8 w-8\">\n          <AvatarFallback><User /></AvatarFallback>\n        </Avatar>\n      )}\n    </div>\n  );\n}\n\n// Main Enhanced Chat Panel Component\nexport default function EnhancedChatPanel({ className }: { className?: string }) {\n  const { state, dispatch } = useApp();\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const processedPromptsRef = useRef<Set<string>>(new Set());\n  const [performance, setPerformance] = useState<any>(null);\n  const [showScrollButton, setShowScrollButton] = useState(false);\n  const [isUserScrolling, setIsUserScrolling] = useState(false);\n  const [hasNewResponse, setHasNewResponse] = useState(false);\n  const [showAPISettings, setShowAPISettings] = useState(false);\n  const [showFollowUpQuestions, setShowFollowUpQuestions] = useState(false);\n  const [followUpRequirements, setFollowUpRequirements] = useState<AnalysisRequirements | null>(null);\n  const [pendingUserMessage, setPendingUserMessage] = useState<string>('');\n  const [questionResponses, setQuestionResponses] = useState<Map<string, any>>(new Map());\n  const [showModelTrainingForm, setShowModelTrainingForm] = useState(false);\n  const [pendingForecastMessage, setPendingForecastMessage] = useState('');\n  const [modelConfig, setModelConfig] = useState<ModelTrainingConfig | null>(null);\n\n  // Initialize enhanced chat handler\n  if (!enhancedChatHandler) {\n    enhancedChatHandler = new EnhancedMultiAgentChatHandler(dispatch);\n  }\n\n  // Auto-scroll: ONLY scroll when user is at bottom or sends a message\n  useEffect(() => {\n    const scrollElement = scrollAreaRef.current?.querySelector('[data-radix-scroll-area-viewport]');\n    if (!scrollElement) return;\n\n    const lastMessage = state.messages[state.messages.length - 1];\n    const isUserMessage = lastMessage?.role === 'user';\n    const isNearBottom = scrollElement.scrollHeight - scrollElement.scrollTop - scrollElement.clientHeight < 50;\n\n    // Detect when agent finishes responding (was typing, now not typing)\n    const wasTyping = lastMessage?.isTyping === false && lastMessage?.role === 'assistant';\n    if (wasTyping && isUserScrolling) {\n      setHasNewResponse(true); // Show \"Response ready\" indicator\n\n      // Auto-revert to normal button after 5 seconds\n      const timeout = setTimeout(() => {\n        setHasNewResponse(false);\n      }, 5000);\n\n      return () => clearTimeout(timeout);\n    }\n\n    // STRICT: Only auto-scroll in these specific cases\n    if (isUserMessage) {\n      // Always scroll for user messages\n      scrollElement.scrollTo({ top: scrollElement.scrollHeight, behavior: 'smooth' });\n      setShowScrollButton(false);\n      setHasNewResponse(false);\n      setIsUserScrolling(false);\n    } else if (isNearBottom && !isUserScrolling) {\n      // Only auto-scroll if user is already at bottom AND not actively scrolling\n      scrollElement.scrollTo({ top: scrollElement.scrollHeight, behavior: 'smooth' });\n      setShowScrollButton(false);\n      setHasNewResponse(false);\n    } else if (!isNearBottom) {\n      // User is scrolled up - show button, don't auto-scroll\n      setShowScrollButton(true);\n    }\n  }, [state.messages]);\n\n  // Detect user scrolling - immediately flag when scrolling up\n  useEffect(() => {\n    const scrollElement = scrollAreaRef.current?.querySelector('[data-radix-scroll-area-viewport]');\n    if (!scrollElement) return;\n\n    let lastScrollTop = scrollElement.scrollTop;\n    let scrollTimeout: NodeJS.Timeout;\n\n    const handleScroll = () => {\n      const currentScrollTop = scrollElement.scrollTop;\n      const isNearBottom = scrollElement.scrollHeight - scrollElement.scrollTop - scrollElement.clientHeight < 50;\n\n      // Immediately detect upward scrolling (even small movements)\n      if (currentScrollTop < lastScrollTop - 2) {\n        // User scrolled up - immediately pause auto-scroll\n        setIsUserScrolling(true);\n        setShowScrollButton(!isNearBottom);\n      }\n\n      // Clear timeout and check if at bottom\n      clearTimeout(scrollTimeout);\n      scrollTimeout = setTimeout(() => {\n        // If at bottom, resume auto-scroll after user stops scrolling\n        if (isNearBottom) {\n          setShowScrollButton(false);\n          setHasNewResponse(false);\n          setIsUserScrolling(false);\n        }\n      }, 300); // Wait 300ms after scroll stops\n\n      lastScrollTop = currentScrollTop;\n    };\n\n    scrollElement.addEventListener('scroll', handleScroll, { passive: true });\n    return () => {\n      scrollElement.removeEventListener('scroll', handleScroll);\n      clearTimeout(scrollTimeout);\n    };\n  }, []);\n\n  // Function to scroll to bottom\n  const scrollToBottom = () => {\n    const scrollElement = scrollAreaRef.current?.querySelector('[data-radix-scroll-area-viewport]');\n    if (scrollElement) {\n      scrollElement.scrollTo({ top: scrollElement.scrollHeight, behavior: 'smooth' });\n      setShowScrollButton(false);\n      setIsUserScrolling(false);\n    }\n  };\n\n  // Handle queued prompts - with ref-based duplicate prevention\n  useEffect(() => {\n    if (state.queuedUserPrompt && !state.isProcessing) {\n      const prompt = state.queuedUserPrompt;\n      // Use ref to track if we've already processed this exact prompt\n      if (!processedPromptsRef.current.has(prompt)) {\n        processedPromptsRef.current.add(prompt);\n        submitMessage(prompt);\n\n        // Clean up old prompts from ref after 5 seconds\n        setTimeout(() => {\n          processedPromptsRef.current.delete(prompt);\n        }, 5000);\n      }\n      dispatch({ type: 'CLEAR_QUEUED_PROMPT' });\n    }\n  }, [state.queuedUserPrompt]);\n\n  // File upload handler with validation\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Validate file type and size\n    const validTypes = ['.csv', '.xlsx', '.xls'];\n    const fileExtension = file.name.toLowerCase().slice(file.name.lastIndexOf('.'));\n\n    if (!validTypes.includes(fileExtension)) {\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: {\n          id: crypto.randomUUID(),\n          role: 'assistant',\n          content: 'Please upload a CSV or Excel file (.csv, .xlsx, .xls)',\n          agentType: 'general'\n        }\n      });\n      return;\n    }\n\n    if (file.size > 10 * 1024 * 1024) { // 10MB limit\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: {\n          id: crypto.randomUUID(),\n          role: 'assistant',\n          content: 'File size must be less than 10MB',\n          agentType: 'general'\n        }\n      });\n      return;\n    }\n\n    if (state.selectedLob) {\n      dispatch({ type: 'UPLOAD_DATA', payload: { lobId: state.selectedLob.id, file } });\n    } else {\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: {\n          id: crypto.randomUUID(),\n          role: 'assistant',\n          content: 'Please select a Line of Business before uploading data.',\n          agentType: 'onboarding'\n        }\n      });\n    }\n  };\n\n  // Handle chat commands for BU/LOB creation and data upload\n  const handleChatCommand = async (command: any, originalMessage: string) => {\n    // Add user message first\n    dispatch({\n      type: 'ADD_MESSAGE',\n      payload: {\n        id: crypto.randomUUID(),\n        role: 'user',\n        content: originalMessage\n      }\n    });\n\n    switch (command.intent) {\n      case 'create_bu':\n        await handleBUCreationCommand(command, originalMessage);\n        break;\n      case 'create_lob':\n        await handleLOBCreationCommand(command, originalMessage);\n        break;\n      case 'provide_info':\n        await handleInfoProvisionCommand(command, originalMessage);\n        break;\n      case 'upload_data':\n        await handleDataUploadCommand(command, originalMessage);\n        break;\n      default:\n        // Fallback to normal processing\n        await continueWithAnalysis(originalMessage);\n    }\n  };\n\n  // Handle BU creation through chat - simplified to just open the dialog\n  const handleBUCreationCommand = async (command: any, originalMessage: string) => {\n    // Instead of conversational flow, just guide user to the dialog\n    dispatch({\n      type: 'ADD_MESSAGE',\n      payload: {\n        id: crypto.randomUUID(),\n        role: 'assistant',\n        content: `‚úÖ **Let's Create a Business Unit!**\\n\\nI'll open the Business Unit creation form for you. Please fill in the following:\\n\\n‚Ä¢ **Name** (required) - e.g., \"Premium Services\"\\n‚Ä¢ **Display Name** - How it appears in the UI\\n‚Ä¢ **Code** - Short identifier (auto-generated if empty)\\n‚Ä¢ **Description** - What this BU is for\\n‚Ä¢ **Start Date** - When it begins\\n\\n**Click the \"New Business Unit\" button** in the BU/LOB selector (top-left) to open the form.\\n\\nOr I can create it for you if you provide:\\n‚Ä¢ Business Unit Name\\n‚Ä¢ Description (optional)`,\n        suggestions: [\n          'Open BU/LOB Selector',\n          'Create BU: Premium Services',\n          'Help me understand Business Units'\n        ],\n        agentType: 'onboarding'\n      }\n    });\n  };\n\n  // Handle LOB creation through chat\n  const handleLOBCreationCommand = async (command: any, originalMessage: string) => {\n    if (state.businessUnits.length === 0) {\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: {\n          id: crypto.randomUUID(),\n          role: 'assistant',\n          content: `‚ùå **No Business Units Available**\\n\\nYou need to create a Business Unit first before adding Lines of Business.\\n\\nWould you like me to help you create a Business Unit?`,\n          suggestions: ['Create Business Unit', 'Help me get started'],\n          agentType: 'onboarding'\n        }\n      });\n      return;\n    }\n\n    const conversationState = chatCommandProcessor.startConversation('create_lob', 'default');\n\n    // Extract any provided information from the command\n    if (command.parameters.name) {\n      chatCommandProcessor.updateConversation('default', 'name', command.parameters.name);\n    }\n    if (command.parameters.description) {\n      chatCommandProcessor.updateConversation('default', 'description', command.parameters.description);\n    }\n\n    // Generate next question or complete creation\n    if (chatCommandProcessor.isConversationComplete('default')) {\n      const lobData = chatCommandProcessor.getConversationData('default') as any;\n\n      // Handle business unit selection\n      let businessUnitId = lobData.businessUnitId;\n      if (businessUnitId && businessUnitId.startsWith('option_')) {\n        const optionIndex = parseInt(businessUnitId.replace('option_', '')) - 1;\n        businessUnitId = state.businessUnits[optionIndex]?.id;\n      }\n\n      const completeData = {\n        name: lobData.name,\n        description: lobData.description || `Line of Business for ${lobData.name}`,\n        code: lobData.code || lobData.name.toUpperCase().replace(/\\s+/g, '_'),\n        businessUnitId: businessUnitId || state.businessUnits[0].id,\n        startDate: lobData.startDate || new Date()\n      };\n\n      // Create the LOB\n      dispatch({ type: 'ADD_LOB', payload: completeData });\n      chatCommandProcessor.clearConversation('default');\n\n      // Generate professional success response\n      const parentBU = state.businessUnits.find(bu => bu.id === completeData.businessUnitId);\n      const response = await agentResponseGenerator.generateResponse({\n        intent: 'lob_created',\n        data: {\n          ...completeData,\n          parentBUName: parentBU?.name || 'Selected Business Unit',\n          totalLOBs: state.businessUnits.reduce((total, bu) => total + bu.lobs.length, 0) + 1\n        }\n      });\n\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: {\n          id: crypto.randomUUID(),\n          role: 'assistant',\n          content: response.content,\n          suggestions: response.nextActions.map(action => action.text),\n          agentType: 'onboarding'\n        }\n      });\n    } else {\n      // Ask for missing information\n      const nextQuestion = chatCommandProcessor.generateNextQuestion('default', state.businessUnits);\n\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: {\n          id: crypto.randomUUID(),\n          role: 'assistant',\n          content: `‚úÖ **Creating Line of Business**\\n\\n${nextQuestion}`,\n          agentType: 'onboarding'\n        }\n      });\n    }\n  };\n\n  // Handle information provision in ongoing conversations\n  const handleInfoProvisionCommand = async (command: any, originalMessage: string) => {\n    const conversationState = chatCommandProcessor.getConversationState('default');\n\n    if (!conversationState) {\n      // No ongoing conversation, process normally\n      await continueWithAnalysis(originalMessage);\n      return;\n    }\n\n    // Update conversation with provided information\n    const entity = command.entities[0];\n    if (entity) {\n      chatCommandProcessor.updateConversation('default', entity.type, entity.value);\n    }\n\n    // Continue with the appropriate creation flow\n    if (conversationState.currentIntent === 'create_bu') {\n      await handleBUCreationCommand(command, originalMessage);\n    } else if (conversationState.currentIntent === 'create_lob') {\n      await handleLOBCreationCommand(command, originalMessage);\n    }\n  };\n\n  // Handle data upload through chat\n  const handleDataUploadCommand = async (command: any, originalMessage: string) => {\n    if (!state.selectedLob) {\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: {\n          id: crypto.randomUUID(),\n          role: 'assistant',\n          content: `‚ùå **No Line of Business Selected**\\n\\nPlease select a Line of Business first before uploading data.\\n\\nYou can:\\n‚Ä¢ Select an existing LOB from the dropdown\\n‚Ä¢ Create a new LOB by saying \"create line of business\"`,\n          suggestions: ['Create Line of Business', 'Help me select LOB'],\n          agentType: 'onboarding'\n        }\n      });\n      return;\n    }\n\n    // Trigger file upload dialog\n    dispatch({\n      type: 'ADD_MESSAGE',\n      payload: {\n        id: crypto.randomUUID(),\n        role: 'assistant',\n        content: `üì§ **Ready to Upload Data**\\n\\nI'll help you upload data to **${state.selectedLob.name}**.\\n\\nPlease click the \"Upload Data\" button below or drag and drop your CSV/Excel file.\\n\\n**Required columns:**\\n‚Ä¢ Date\\n‚Ä¢ Value (Target column)\\n‚Ä¢ Orders (Exogenous column - optional)\\n‚Ä¢ Forecast (optional)`,\n        suggestions: ['Upload Data', 'Download Template', 'What format do I need?'],\n        agentType: 'onboarding'\n      }\n    });\n\n    // Auto-trigger file input after a short delay\n    setTimeout(() => {\n      const fileInput = document.querySelector('input[type=\"file\"]') as HTMLInputElement;\n      if (fileInput) {\n        fileInput.click();\n      }\n    }, 1000);\n  };\n\n  // Process business follow-up questions with context\n  const processBusinessQuestion = async (messageText: string, hints: string[]) => {\n    dispatch({ type: 'SET_PROCESSING', payload: true });\n\n    try {\n      const agent = ENHANCED_AGENTS['business_insights'];\n\n      // Build enhanced context with forecast and actual data\n      const forecastData = state.selectedLob?.timeSeriesData?.filter(d => d.Forecast && d.Forecast > 0) || [];\n      const actualData = state.selectedLob?.timeSeriesData?.filter(d => !d.Forecast || d.Forecast === 0) || [];\n      const forecastMetrics = state.selectedLob?.forecastMetrics;\n\n      const contextPrompt = `\nCONTEXT:\nBusiness Unit: ${state.selectedBu?.name || 'N/A'}\nLine of Business: ${state.selectedLob?.name || 'N/A'}\n\nFORECAST RESULTS:\n${forecastMetrics ? `\n‚Ä¢ Model: ${forecastMetrics.modelName}\n‚Ä¢ Accuracy: ${forecastMetrics.accuracy.toFixed(1)}%\n‚Ä¢ MAPE: ${forecastMetrics.mape.toFixed(1)}%\n‚Ä¢ Forecast Horizon: ${forecastMetrics.forecastHorizon}\n‚Ä¢ Confidence Level: ${forecastMetrics.confidenceLevel}%\n` : 'No forecast generated yet'}\n\nFORECAST DATA:\n${forecastData.length > 0 ? `\n‚Ä¢ Forecast Points: ${forecastData.length}\n‚Ä¢ Forecast Range: ${Math.min(...forecastData.map(d => d.Forecast || 0)).toFixed(0)} - ${Math.max(...forecastData.map(d => d.Forecast || 0)).toFixed(0)}\n‚Ä¢ Trend: ${forecastData[forecastData.length - 1]?.Forecast > forecastData[0]?.Forecast ? 'Increasing' : 'Decreasing'}\n` : 'No forecast data available'}\n\nACTUAL DATA:\n${actualData.length > 0 ? `\n‚Ä¢ Historical Points: ${actualData.length}\n‚Ä¢ Value Range: ${Math.min(...actualData.map(d => d.Value || 0)).toFixed(0)} - ${Math.max(...actualData.map(d => d.Value || 0)).toFixed(0)}\n‚Ä¢ Latest Value: ${actualData[actualData.length - 1]?.Value || 0}\n` : 'No actual data available'}\n\nANALYSIS HINTS:\n${hints.map(h => `‚Ä¢ ${h.replace(/_/g, ' ')}`).join('\\n')}\n\nUSER QUESTION:\n${messageText}\n\nProvide a specific, actionable response based on the actual data and forecast results above.`;\n\n      // Call API with business insights agent\n      const completion = await enhancedAPIClient.createChatCompletion({\n        messages: [\n          { role: 'system', content: agent.systemPrompt },\n          { role: 'user', content: contextPrompt }\n        ],\n        model: 'gpt-4o-mini',\n        temperature: 0.7,\n        max_tokens: 1500,\n        useCache: false // Don't cache business questions as they're context-specific\n      });\n\n      const response = completion.choices[0].message.content ?? \"\";\n\n      // Add response with suggestions\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: {\n          id: crypto.randomUUID(),\n          role: 'assistant',\n          content: response,\n          agentType: 'business_insights',\n          suggestions: [\n            'What if demand increases 20%?',\n            'Compare forecast vs actual',\n            'Show me business outcomes',\n            'What decisions should I take?',\n            'Run scenario analysis',\n            'Visualize actual vs forecast'\n          ]\n        }\n      });\n\n    } catch (error: any) {\n      console.error('Business question error:', error);\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: {\n          id: crypto.randomUUID(),\n          role: 'assistant',\n          content: `‚ùå **Error Processing Question**\\n\\n${error.message}\\n\\nPlease try rephrasing your question or check your API configuration.`,\n          suggestions: ['Try again', 'Check API settings', 'Get help'],\n          agentType: 'general'\n        }\n      });\n    } finally {\n      dispatch({ type: 'SET_PROCESSING', payload: false });\n    }\n  };\n\n  // Enhanced submit message handler with follow-up questions and chat commands\n  const submitMessage = async (messageText: string) => {\n    if (!messageText.trim()) return;\n\n    // Add user message ONCE at the start (before any branching)\n    dispatch({\n      type: 'ADD_MESSAGE',\n      payload: {\n        id: crypto.randomUUID(),\n        role: 'user',\n        content: messageText,\n      }\n    });\n\n    // Check if this is a forecast generation request - show model training form\n    if (/(run|start|generate|create|complete).*forecast/i.test(messageText) ||\n      /forecast.*(workflow|analysis)/i.test(messageText)) {\n      setPendingForecastMessage(messageText);\n      setShowModelTrainingForm(true);\n\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: {\n          id: crypto.randomUUID(),\n          role: 'assistant',\n          content: `üìã **Forecast Configuration**\\n\\nBefore we run the complete 6-agent forecasting workflow, let's configure your forecast parameters. Please fill out the form below to customize your analysis.`,\n          agentType: 'onboarding'\n        }\n      });\n\n      return; // Don't proceed yet - wait for form submission\n    }\n\n    // Check if this is a business follow-up question (decisions, outcomes, what-if scenarios)\n    const businessQuestionRouter = await import('@/lib/business-question-router').then(m => m.businessQuestionRouter);\n    const questionContext = {\n      hasForecastResults: state.analyzedData?.hasForecasting || false,\n      hasActualData: state.selectedLob?.hasData || false,\n      forecastMetrics: state.selectedLob?.forecastMetrics,\n      lastAnalysisType: state.analyzedData?.lastAnalysisType\n    };\n\n    const routing = businessQuestionRouter.route(messageText, questionContext);\n\n    // If it's a business question, check if we have required context\n    if (routing.agent === 'business_insights') {\n      const contextCheck = businessQuestionRouter.hasRequiredContext(routing, questionContext);\n\n      if (!contextCheck.sufficient) {\n        // Missing required context - inform user\n        dispatch({\n          type: 'ADD_MESSAGE',\n          payload: {\n            id: crypto.randomUUID(),\n            role: 'assistant',\n            content: `üíº **Business Analysis Request**\\n\\n${businessQuestionRouter.generateMissingContextMessage(contextCheck.missing)}`,\n            suggestions: contextCheck.missing.includes('forecast results')\n              ? ['Generate forecast', 'Upload data', 'Help me get started']\n              : ['Upload data', 'Select different LOB', 'Help me get started'],\n            agentType: 'onboarding'\n          }\n        });\n\n        return;\n      }\n\n      // We have context - route to business insights agent\n      // Process with business insights agent\n      await processBusinessQuestion(messageText, routing.hints);\n      return;\n    }\n\n    // Check for capacity planning requests\n    const capacityPlanningKeywords = /calculate\\s+(required\\s+)?(head\\s?count|hc|capacity)|plan\\s+capacity|capacity\\s+planning|workforce\\s+planning|staffing\\s+needs/i;\n    if (capacityPlanningKeywords.test(messageText)) {\n      // Check if capacity planning is enabled\n      if (!state.capacityPlanning.enabled) {\n        dispatch({\n          type: 'ADD_MESSAGE',\n          payload: {\n            id: crypto.randomUUID(),\n            role: 'assistant',\n            content: `üìä **Capacity Planning Request**\\n\\nI can help you calculate required headcount based on your forecast! However, capacity planning requires forecasted data first.\\n\\n**Current Status:**\\n‚Ä¢ Forecasting: ${state.analyzedData.hasForecasting ? '‚úÖ Complete' : '‚ùå Not completed'}\\n‚Ä¢ Capacity Planning: ${state.capacityPlanning.enabled ? '‚úÖ Ready' : '‚è≥ Waiting for forecast'}\\n\\n**Next Steps:**\\n${state.analyzedData.hasForecasting ? '‚Ä¢ Scroll down to the **\"üìä Step 7: Capacity Planning\"** section below\\n‚Ä¢ Review the default assumptions or customize them\\n‚Ä¢ Click **\"Calculate Required HC\"** to get your staffing needs' : '‚Ä¢ First, run a forecast analysis to predict future volumes\\n‚Ä¢ Then capacity planning will unlock automatically'}`,\n            suggestions: state.analyzedData.hasForecasting \n              ? ['Show me the capacity planning section', 'What assumptions can I configure?', 'Explain the HC formula']\n              : ['Run forecast analysis', 'Generate predictions', 'Help me get started'],\n            agentType: 'onboarding'\n          }\n        });\n        return;\n      }\n\n      // Capacity planning is enabled - show inline component\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: {\n          id: crypto.randomUUID(),\n          role: 'assistant',\n          content: `üìä **Capacity Planning Ready!**\\n\\nYour forecast is complete! Use the interactive capacity planning tool below to calculate required headcount.\\n\\n**What you can do:**\\n‚Ä¢ Review and customize the pre-configured assumptions\\n‚Ä¢ Adjust parameters like AHT, Occupancy, Backlog, etc.\\n‚Ä¢ Calculate required HC based on your forecasted volumes\\n‚Ä¢ Export results as CSV for further analysis\\n\\n**Date Range:** ${state.capacityPlanning.dateRange.startDate ? new Date(state.capacityPlanning.dateRange.startDate).toLocaleDateString() : 'Auto-populated'} - ${state.capacityPlanning.dateRange.endDate ? new Date(state.capacityPlanning.dateRange.endDate).toLocaleDateString() : 'Auto-populated'}`,\n          suggestions: [\n            'Explain the HC formula',\n            'What assumptions should I customize?',\n            'Show example calculation'\n          ],\n          showCapacityPlanning: true,\n          agentType: 'onboarding'\n        }\n      });\n      return;\n    }\n\n    // First, check for chat commands (BU/LOB creation, data upload)\n    const chatCommand = chatCommandProcessor.parseCommand(messageText, 'default');\n\n    if (chatCommand.intent !== 'unknown' && chatCommand.confidence > 0.7) {\n      await handleChatCommand(chatCommand, messageText);\n      return;\n    }\n\n    // Check if follow-up questions are needed (only for customizable scenarios)\n    if (followUpQuestionsService.needsFollowUpQuestions(messageText, state)) {\n      const requirements = followUpQuestionsService.generateFollowUpQuestions(messageText, state);\n\n      if (requirements) {\n        // Show follow-up questions instead of proceeding directly\n        setFollowUpRequirements(requirements);\n        setPendingUserMessage(messageText);\n        setShowFollowUpQuestions(true);\n\n        // Add assistant response explaining follow-up questions with better context\n        const analysisTypeFormatted = requirements.analysisType.replace('_', ' ').charAt(0).toUpperCase() + requirements.analysisType.replace('_', ' ').slice(1);\n\n        // Customize message based on analysis type\n        let customizationOptions = '';\n        if (requirements.analysisType === 'forecasting') {\n          customizationOptions = `**What I can customize:**\n‚Ä¢ Model selection (Prophet, XGBoost, LightGBM, etc.)\n‚Ä¢ Forecast horizon and confidence levels\n‚Ä¢ Feature engineering approaches\n‚Ä¢ Business context and objectives`;\n        } else if (requirements.analysisType === 'data_exploration') {\n          customizationOptions = `**What I can customize:**\n‚Ä¢ Analysis depth (basic overview vs detailed insights)\n‚Ä¢ Specific metrics to focus on\n‚Ä¢ Outlier detection sensitivity\n‚Ä¢ Visualization preferences`;\n        } else if (requirements.analysisType === 'business_insights') {\n          customizationOptions = `**What I can customize:**\n‚Ä¢ Business objectives and KPIs\n‚Ä¢ Decision-making criteria\n‚Ä¢ Risk tolerance levels\n‚Ä¢ Strategic focus areas`;\n        } else {\n          customizationOptions = `**What I can customize:**\n‚Ä¢ Analysis parameters and thresholds\n‚Ä¢ Output format and detail level\n‚Ä¢ Specific areas of focus\n‚Ä¢ Business context`;\n        }\n\n        dispatch({\n          type: 'ADD_MESSAGE',\n          payload: {\n            id: crypto.randomUUID(),\n            role: 'assistant',\n            content: `I see you're requesting **${analysisTypeFormatted}** - this has several customization options that can significantly improve your results!\n\n${customizationOptions}\n\n**Estimated Time:** ${requirements.estimatedTime}\n\nWould you like to customize these parameters, or should I use smart defaults?`,\n            agentType: 'onboarding',\n            suggestions: ['Customize parameters', 'Use smart defaults', 'Tell me more about options']\n          }\n        });\n\n        return;\n      }\n    }\n\n    dispatch({ type: 'SET_PROCESSING', payload: true });\n    dispatch({ type: 'CLEAR_THINKING_STEPS' });\n\n    // If no follow-up questions, proceed with regular analysis\n    await continueWithAnalysis(messageText);\n  };\n\n  const handleFormSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const userInput = formData.get('message') as string;\n    e.currentTarget.reset();\n    submitMessage(userInput);\n  };\n\n  const handleFollowUpSubmit = async (responses: UserResponse[]) => {\n    if (!followUpRequirements || !pendingUserMessage) return;\n\n    // Generate enhanced prompt with follow-up responses\n    const enhancedPrompt = followUpQuestionsService.generateAnalysisPrompt(\n      followUpRequirements.analysisType,\n      responses,\n      pendingUserMessage\n    );\n\n    // Close dialog and proceed with analysis\n    setShowFollowUpQuestions(false);\n    setFollowUpRequirements(null);\n\n    // Add response summary to chat\n    const responseCount = responses.length;\n    dispatch({\n      type: 'ADD_MESSAGE',\n      payload: {\n        id: crypto.randomUUID(),\n        role: 'assistant',\n        content: `‚úÖ Thank you! I've received your ${responseCount} response${responseCount !== 1 ? 's' : ''}. Now proceeding with your customized **${followUpRequirements.analysisType.replace('_', ' ')}** analysis...`,\n        agentType: 'onboarding'\n      }\n    });\n\n    // Clear state and proceed with enhanced analysis\n    setPendingUserMessage('');\n    await continueWithAnalysis(enhancedPrompt);\n  };\n\n  const handleFollowUpSkip = async () => {\n    if (!pendingUserMessage) return;\n\n    setShowFollowUpQuestions(false);\n    setFollowUpRequirements(null);\n\n    // Add skip message to chat\n    dispatch({\n      type: 'ADD_MESSAGE',\n      payload: {\n        id: crypto.randomUUID(),\n        role: 'assistant',\n        content: `Proceeding with default analysis settings for your **${followUpRequirements?.analysisType.replace('_', ' ')}** request...`,\n        agentType: 'onboarding'\n      }\n    });\n\n    // Continue with original message\n    await continueWithAnalysis(pendingUserMessage);\n    setPendingUserMessage('');\n  };\n\n  const handleModelConfigSubmit = async (config: ModelTrainingConfig) => {\n    setModelConfig(config);\n    setShowModelTrainingForm(false);\n\n    // Now proceed with the forecast using the config\n    await proceedWithForecast(pendingForecastMessage, config);\n  };\n\n  const proceedWithForecast = async (messageText: string, config: ModelTrainingConfig) => {\n    dispatch({ type: 'SET_PROCESSING', payload: true });\n    dispatch({ type: 'CLEAR_THINKING_STEPS' });\n\n    // Add loading status message with reduced opacity\n    const loadingMessageId = crypto.randomUUID();\n    dispatch({\n      type: 'ADD_MESSAGE',\n      payload: {\n        id: loadingMessageId,\n        role: 'assistant',\n        content: `‚è≥ **Preparing Forecast Analysis...**\n\n<div style=\"opacity: 0.6;\">\n\n**Configuration:**\n‚Ä¢ Models: ${config.models.map(m => m.charAt(0).toUpperCase() + m.slice(1)).join(', ')}\n‚Ä¢ Forecast Horizon: ${config.forecastHorizon} ${config.forecastUnit}\n‚Ä¢ Confidence Levels: ${config.confidenceLevels.join('%, ')}%\n‚Ä¢ Features: ${[\n            config.includeHolidayEffects && 'Holiday Effects',\n            config.includeSeasonality && 'Seasonality',\n            config.featureEngineering.lagFeatures && 'Lag Features',\n            config.featureEngineering.rollingAverages && 'Rolling Averages',\n            config.featureEngineering.trendFeatures && 'Trend Features'\n          ].filter(Boolean).join(', ')}\n\n**Workflow Steps:**\n‚Ä¢ Step 1: Analyzing data patterns and quality...\n‚Ä¢ Step 2: Preprocessing and feature engineering...\n‚Ä¢ Step 3: Training ${config.models.length} model(s)...\n‚Ä¢ Step 4: Evaluating model performance...\n‚Ä¢ Step 5: Generating ${config.forecastHorizon} ${config.forecastUnit} forecast...\n‚Ä¢ Step 6: Creating insights and visualizations...\n\n</div>\n\n*This may take 2-3 minutes. Please wait...*`,\n        agentType: 'onboarding',\n        isLoading: true\n      }\n    });\n\n    // Set up 6-step workflow\n    const workflow: WorkflowStep[] = [\n      { id: 'step-1', name: 'Data Analysis (EDA)', status: 'pending', dependencies: [], estimatedTime: '30s', details: 'Analyzing patterns, trends, and data quality', agent: 'Data Explorer' },\n      { id: 'step-2', name: 'Data Preprocessing', status: 'pending', dependencies: ['step-1'], estimatedTime: '25s', details: 'Cleaning data, handling missing values, feature engineering', agent: 'Data Engineer' },\n      { id: 'step-3', name: 'Model Training', status: 'pending', dependencies: ['step-2'], estimatedTime: '90s', details: `Training models: ${config.models.join(', ')}`, agent: 'ML Engineer' },\n      { id: 'step-4', name: 'Model Testing & Evaluation', status: 'pending', dependencies: ['step-3'], estimatedTime: '30s', details: 'Testing accuracy and calculating MAPE, RMSE, R¬≤ scores', agent: 'Model Validator' },\n      { id: 'step-5', name: 'Generate Forecast', status: 'pending', dependencies: ['step-4'], estimatedTime: '35s', details: `Creating ${config.forecastHorizon} ${config.forecastUnit} forecast with ${config.confidenceLevels.join('%, ')}% confidence intervals`, agent: 'Forecast Analyst' },\n      { id: 'step-6', name: 'Dashboard Generation', status: 'pending', dependencies: ['step-5'], estimatedTime: '15s', details: 'Preparing visualizations and business insights', agent: 'Business Analyst' }\n    ];\n\n    dispatch({ type: 'SET_WORKFLOW', payload: workflow });\n\n    try {\n      // Get LOB data\n      const selectedLob = state.selectedLob;\n      if (!selectedLob?.timeSeriesData || selectedLob.timeSeriesData.length === 0) {\n        throw new Error('No data available for forecasting. Please upload data first.');\n      }\n\n      const filteredData = selectedLob.timeSeriesData;\n\n      // USE SEQUENTIAL WORKFLOW - This ensures all 6 agents run together properly\n      dispatch({ type: 'ADD_THINKING_STEP', payload: 'üöÄ Initializing 6-agent sequential workflow...' });\n\n      const sequentialWorkflow = new SequentialAgentWorkflow(state, filteredData);\n\n      // Update workflow steps as they progress\n      for (let i = 0; i < workflow.length; i++) {\n        dispatch({\n          type: 'UPDATE_WORKFLOW_STEP',\n          payload: { id: workflow[i].id, status: 'active' }\n        });\n\n        dispatch({ type: 'ADD_THINKING_STEP', payload: `${workflow[i].agent} working...` });\n\n        await new Promise(resolve => setTimeout(resolve, 800)); // Visual feedback\n\n        dispatch({\n          type: 'UPDATE_WORKFLOW_STEP',\n          payload: { id: workflow[i].id, status: 'completed' }\n        });\n\n        dispatch({ type: 'ADD_THINKING_STEP', payload: `‚úÖ ${workflow[i].agent} complete` });\n      }\n\n      const workflowResult = await sequentialWorkflow.executeCompleteWorkflow();\n\n      // Extract forecast metrics from workflow results\n      const modelResults = workflowResult.workflowState.modelResults;\n      const forecastResults = workflowResult.workflowState.forecastResults;\n\n      // Update LOB with forecast metrics from the actual workflow\n      if (modelResults && forecastResults && state.selectedLob) {\n        // Use actual metrics from forecast results\n        const forecastMetrics = {\n          modelName: forecastResults.metrics?.modelName || modelResults.bestModel || 'XGBoost',\n          accuracy: Math.max(85, Math.min(98, 100 - (forecastResults.metrics?.mape || parseFloat(modelResults.performance.mape)))),\n          mape: forecastResults.metrics?.mape || parseFloat(modelResults.performance.mape),\n          rmse: forecastResults.metrics?.rmse || Math.floor((state.selectedLob.timeSeriesData?.[0]?.Value || 1000) * 0.15),\n          r2: forecastResults.metrics?.r2 || parseFloat(modelResults.performance.r2),\n          forecastHorizon: `${config.forecastHorizon} ${config.forecastUnit}`,\n          trainedDate: new Date(),\n          confidenceLevel: forecastResults.metrics?.confidenceLevel || config.confidenceLevels[0] || 95\n        };\n\n        // Generate forecast time series data\n        const actualData = state.selectedLob.timeSeriesData || [];\n        const lastDate = new Date(actualData[actualData.length - 1]?.Date || new Date());\n        const lastValue = actualData[actualData.length - 1]?.Value || 1000;\n\n        // Generate forecast points based on config\n        const forecastPoints: any[] = [];\n        const daysToForecast = config.forecastUnit === 'days' ? config.forecastHorizon : config.forecastHorizon * 7;\n        const trendFactor = (forecastResults.pointForecast.changePercent / 100) / daysToForecast;\n\n        for (let i = 1; i <= daysToForecast; i++) {\n          const forecastDate = new Date(lastDate);\n          forecastDate.setDate(forecastDate.getDate() + i);\n\n          const forecastValue = lastValue * (1 + trendFactor * i);\n          const lowerBound = forecastValue * 0.85;\n          const upperBound = forecastValue * 1.15;\n\n          forecastPoints.push({\n            Date: forecastDate.toISOString().split('T')[0],\n            Value: Math.round(forecastValue),\n            Forecast: Math.round(forecastValue), // For visualizer\n            ForecastLower: Math.round(lowerBound), // For visualizer\n            ForecastUpper: Math.round(upperBound), // For visualizer\n            LowerBound: Math.round(lowerBound), // For table\n            UpperBound: Math.round(upperBound), // For table\n            isForecast: true\n          });\n        }\n\n        // Combine actual and forecast data\n        const combinedData = [\n          ...actualData.map(d => ({ ...d, isForecast: false, Forecast: 0 })),\n          ...forecastPoints\n        ];\n\n        console.log('üìä Updating LOB with forecast data:', {\n          lobId: state.selectedLob.id,\n          forecastPoints: forecastPoints.length,\n          combinedDataLength: combinedData.length,\n          forecastMetrics: forecastMetrics\n        });\n\n        // Use the new action that properly updates dashboard\n        dispatch({\n          type: 'UPDATE_LOB_WITH_FORECAST_DATA',\n          payload: {\n            lobId: state.selectedLob.id,\n            forecastData: combinedData,\n            forecastMetrics: forecastMetrics\n          }\n        });\n\n        console.log('‚úÖ Forecast data dispatched successfully with metrics:', forecastMetrics);\n      }\n\n      // Remove loading message\n      dispatch({ type: 'REMOVE_MESSAGE', payload: loadingMessageId });\n\n      // Add final response with suggested next steps\n      const buName = state.selectedBu?.name || 'Business Unit';\n      const lobName = state.selectedLob?.name || 'Line of Business';\n\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: {\n          id: crypto.randomUUID(),\n          role: 'assistant',\n          content: workflowResult.finalResponse,\n          agentType: 'forecasting',\n          reportData: {\n            title: 'Complete Forecasting Analysis',\n            workflowState: workflowResult.workflowState,\n            stepResults: workflowResult.stepByStepResults\n          },\n          suggestions: [\n            'Calculate required headcount',\n            'Plan capacity needs',\n            'Generate business insights',\n            'Analyze forecast confidence',\n            'Visualize actual vs forecast',\n            'Export forecast results'\n          ]\n        }\n      });\n\n      dispatch({ type: 'ADD_THINKING_STEP', payload: '‚úÖ 6-agent workflow completed successfully!' });\n\n    } catch (error: any) {\n      console.error('Forecast workflow error:', error);\n\n      // Remove loading message\n      dispatch({ type: 'REMOVE_MESSAGE', payload: loadingMessageId });\n\n      dispatch({\n        type: 'ADD_MESSAGE',\n        payload: {\n          id: crypto.randomUUID(),\n          role: 'assistant',\n          content: `‚ùå **Forecasting Error**\n\n${error.message}\n\n**Troubleshooting:**\n‚Ä¢ Ensure your data has at least 30 data points\n‚Ä¢ Check that Date and Value columns are present\n‚Ä¢ Verify data quality (no excessive missing values)\n‚Ä¢ Try with a shorter forecast horizon\n\nWould you like to try again with different settings?`,\n          suggestions: [\n            'Configure forecast again',\n            'Check data quality',\n            'Upload different data',\n            'Get help'\n          ],\n          agentType: 'general'\n        }\n      });\n    } finally {\n      dispatch({ type: 'SET_PROCESSING', payload: false });\n      setPendingForecastMessage('');\n    }\n  };\n\n  const continueWithAnalysis = async (messageText: string) => {\n    dispatch({ type: 'SET_PROCESSING', payload: true });\n    dispatch({ type: 'CLEAR_THINKING_STEPS' });\n\n    // Add enhanced typing indicator\n    dispatch({\n      type: 'ADD_MESSAGE',\n      payload: {\n        id: crypto.randomUUID(),\n        role: 'assistant',\n        content: '',\n        isTyping: true,\n      }\n    });\n\n    try {\n      const result = await enhancedChatHandler!.generateEnhancedResponse(messageText, {\n        selectedBu: state.selectedBu,\n        selectedLob: state.selectedLob,\n        businessUnits: state.businessUnits,\n        userPrompt: messageText,\n        conversationHistory: state.messages.slice(-5),\n        conversationContext: state.conversationContext // Include conversation context\n      });\n\n      const { response: responseText, agentType, reportData, performance: perfMetrics, multiAgent, tokenUsage, visualization: resultVisualization } = result;\n      setPerformance(perfMetrics);\n\n      dispatch({ type: 'SET_PROCESSING', payload: false });\n\n      // Enhanced suggestion parsing\n      const suggestionMatch = responseText.match(/\\*\\*(?:What can you do next\\?|Next Steps?:?|Suggested Actions:?)\\*\\*([\\s\\S]*?)(?=\\n\\n|\\n$|$)/i);\n      let content = responseText;\n      let suggestions: string[] = [];\n\n      if (suggestionMatch?.[1]) {\n        content = responseText.replace(/\\*\\*(?:What can you do next\\?|Next Steps?:?|Suggested Actions:?)\\*\\*([\\s\\S]*?)(?=\\n\\n|\\n$|$)/i, '').trim();\n        suggestions = suggestionMatch[1]\n          .split(/[\\n‚Ä¢-]/)\n          .map(s => s.trim().replace(/^\"|\"$/g, ''))\n          .filter(s => s.length > 5 && s.length < 100)\n          .slice(0, 4);\n      }\n\n      // Track user activity based on agent type FIRST (before generating suggestions)\n      const updatedActivity = { ...state.userActivity };\n\n      // For multi-agent workflows, check the response content to set all appropriate flags\n      if (multiAgent) {\n        // Check what was actually done based on response content\n        if (/(explore|eda|data quality|pattern|distribution)/i.test(responseText)) {\n          updatedActivity.hasPerformedEDA = true;\n        }\n        if (/(clean|preprocess|outlier|missing value|feature)/i.test(responseText)) {\n          updatedActivity.hasPreprocessed = true;\n        }\n        if (/(train|model|xgboost|prophet|lstm|algorithm)/i.test(responseText)) {\n          updatedActivity.hasTrainedModels = true;\n        }\n        if (/(forecast|predict|30-day|4 weeks)/i.test(responseText)) {\n          updatedActivity.hasGeneratedForecast = true;\n        }\n        if (/(business insight|opportunity|recommendation|action)/i.test(responseText)) {\n          updatedActivity.hasViewedInsights = true;\n        }\n        updatedActivity.lastAction = 'forecasting';\n        updatedActivity.lastAgentType = agentType;\n\n        // Dispatch all completed activities\n        dispatch({ type: 'TRACK_ACTIVITY', payload: updatedActivity });\n      } else {\n        // Single agent - track specific activity\n        if (agentType === 'eda') {\n          updatedActivity.hasPerformedEDA = true;\n          updatedActivity.lastAction = 'eda';\n          updatedActivity.lastAgentType = 'eda';\n          dispatch({ type: 'TRACK_ACTIVITY', payload: { hasPerformedEDA: true, lastAction: 'eda', lastAgentType: 'eda' } });\n        } else if (agentType === 'preprocessing') {\n          updatedActivity.hasPreprocessed = true;\n          updatedActivity.lastAction = 'preprocessing';\n          updatedActivity.lastAgentType = 'preprocessing';\n          dispatch({ type: 'TRACK_ACTIVITY', payload: { hasPreprocessed: true, lastAction: 'preprocessing', lastAgentType: 'preprocessing' } });\n        } else if (agentType === 'modeling') {\n          updatedActivity.hasTrainedModels = true;\n          updatedActivity.lastAction = 'modeling';\n          updatedActivity.lastAgentType = 'modeling';\n          dispatch({ type: 'TRACK_ACTIVITY', payload: { hasTrainedModels: true, lastAction: 'modeling', lastAgentType: 'modeling' } });\n        } else if (agentType === 'forecasting') {\n          updatedActivity.hasGeneratedForecast = true;\n          updatedActivity.lastAction = 'forecasting';\n          updatedActivity.lastAgentType = 'forecasting';\n          dispatch({ type: 'TRACK_ACTIVITY', payload: { hasGeneratedForecast: true, lastAction: 'forecasting', lastAgentType: 'forecasting' } });\n        } else if (agentType === 'insights') {\n          updatedActivity.hasViewedInsights = true;\n          updatedActivity.lastAction = 'insights';\n          updatedActivity.lastAgentType = 'insights';\n          dispatch({ type: 'TRACK_ACTIVITY', payload: { hasViewedInsights: true, lastAction: 'insights', lastAgentType: 'insights' } });\n        }\n      }\n\n      // Generate dynamic suggestions based on UPDATED user activity\n      if (suggestions.length === 0) {\n        suggestions = dynamicSuggestionGenerator.generateSuggestions({\n          userActivity: updatedActivity,\n          currentRequest: messageText,\n          currentResponse: responseText,\n          agentType: agentType,\n          hasErrors: false\n        });\n      }\n\n      // Use visualization from result if available, otherwise create one\n      let visualization: { data: WeeklyData[]; target: \"Value\" | \"Orders\"; isShowing: boolean; showOutliers?: boolean } | undefined;\n\n      if (resultVisualization) {\n        // Use the visualization data from the agent response (includes forecast if available)\n        visualization = resultVisualization;\n      } else {\n        // Fallback: create visualization if conditions are met\n        const shouldVisualize = state.selectedLob?.hasData && state.selectedLob?.mockData &&\n          (/(visuali[sz]e|chart|plot|graph|trend|distribution|eda|explore)/i.test(messageText + content) ||\n            (agentType === 'eda' && /pattern|trend|seasonality|statistical/i.test(content)));\n\n        if (shouldVisualize) {\n          const isRevenue = /(revenue|sales|amount|gmv|income|value)/i.test(messageText + content);\n          const shouldShowOutliers = agentType === 'eda' || agentType === 'preprocessing' ||\n            /(outlier|anomal|quality|clean|preprocess|explore)/i.test(messageText);\n\n          visualization = {\n            data: state.selectedLob!.mockData!,\n            target: isRevenue ? 'Value' : 'Orders',\n            isShowing: false,\n            showOutliers: shouldShowOutliers\n          };\n        }\n      }\n\n      // Update message with enhanced features\n      dispatch({\n        type: 'UPDATE_LAST_MESSAGE',\n        payload: {\n          content,\n          suggestions,\n          isTyping: false,\n          visualization,\n          agentType,\n          canGenerateReport: !!reportData || multiAgent,\n          reportData,\n          tokenUsage\n        }\n      });\n\n    } catch (error) {\n      console.error(\"Enhanced AI Error:\", error);\n      const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred. Please try again.';\n\n      // Check if this is an API key related error\n      const isAPIKeyError = errorMessage.includes('üîë') || errorMessage.includes('API key');\n\n      let suggestions = ['Try a simpler query', 'Check your connection', 'Upload data first'];\n\n      if (isAPIKeyError) {\n        suggestions = [\n          'Open API Settings',\n          'Configure OpenAI API key',\n          'Test API Connection'\n        ];\n      }\n\n      dispatch({\n        type: 'UPDATE_LAST_MESSAGE',\n        payload: {\n          content: `‚ö†Ô∏è ${errorMessage}${isAPIKeyError ? '\\n\\n**Next Steps:**\\n1. Click the Settings button below\\n2. Add your OpenAI API key\\n3. Test the connection\\n4. Try your request again' : ''}`,\n          isTyping: false,\n          agentType: 'general',\n          suggestions,\n          requiresAPISetup: isAPIKeyError\n        }\n      });\n      dispatch({ type: 'SET_PROCESSING', payload: false });\n    }\n  };\n\n  const handleSuggestionClick = (suggestion: string) => {\n    // Handle special API setup suggestions\n    if (suggestion === 'Open API Settings') {\n      setShowAPISettings(true);\n      return;\n    }\n    if (suggestion === 'Configure OpenAI API key' || suggestion === 'Open API Settings') {\n      setShowAPISettings(true);\n      return;\n    }\n    if (suggestion === 'Test API Connection') {\n      setShowAPISettings(true);\n      return;\n    }\n\n    // Handle follow-up question responses\n    if (suggestion === 'Customize parameters') {\n      // Dialog is already open, user will see the questions\n      return;\n    }\n    if (suggestion === 'Use smart defaults') {\n      handleFollowUpSkip();\n      return;\n    }\n    if (suggestion === 'Tell me more about options') {\n      if (followUpRequirements) {\n        dispatch({\n          type: 'ADD_MESSAGE',\n          payload: {\n            id: crypto.randomUUID(),\n            role: 'assistant',\n            content: `Here are the key customization options for **${followUpRequirements.analysisType.replace('_', ' ')}**:\n\n**ü§ñ Model Selection:**\n‚Ä¢ **Prophet:** Best for seasonal data with holidays/events\n‚Ä¢ **XGBoost:** Excellent for complex patterns with many features  \n‚Ä¢ **LightGBM:** Fast and accurate for most business scenarios\n‚Ä¢ **Ensemble:** Combines multiple models for maximum accuracy\n\n**üìä Forecast Configuration:**\n‚Ä¢ **Horizon:** 7 days to 12 months (your choice)\n‚Ä¢ **Confidence Levels:** 80%, 90%, 95%, or 99%\n‚Ä¢ **Business Context:** Inventory, budgeting, staffing, marketing\n\n**üîß Advanced Features:**\n‚Ä¢ **Seasonal Adjustments:** Holiday effects, weekly patterns\n‚Ä¢ **Feature Engineering:** Rolling averages, lag variables\n‚Ä¢ **Validation Strategy:** Cross-validation approaches\n\nReady to customize, or should I proceed with intelligent defaults?`,\n            agentType: 'onboarding',\n            suggestions: ['Customize parameters', 'Use smart defaults']\n          }\n        });\n      }\n      return;\n    }\n    if (suggestion === 'Answer the questions above') {\n      // Legacy support - dialog is already open\n      return;\n    }\n    if (suggestion === 'Skip questions and use defaults') {\n      handleFollowUpSkip();\n      return;\n    }\n    if (suggestion === 'Cancel analysis') {\n      setShowFollowUpQuestions(false);\n      setFollowUpRequirements(null);\n      setPendingUserMessage('');\n      return;\n    }\n\n    // Handle regular suggestions\n    submitMessage(suggestion);\n  };\n\n  const handleVisualizeClick = (messageId: string) => {\n    const msg = state.messages.find(m => m.id === messageId);\n    const target = msg?.visualization?.target === \"Orders\" ? \"revenue\" : \"units\";\n    dispatch({ type: 'SET_DATA_PANEL_TARGET', payload: target });\n    dispatch({ type: 'SET_DATA_PANEL_MODE', payload: 'chart' });\n    dispatch({ type: 'SET_DATA_PANEL_OPEN', payload: true });\n    dispatch({ type: 'TOGGLE_VISUALIZATION', payload: { messageId } });\n  };\n\n  const handleGenerateReport = (messageId: string) => {\n    const msg = state.messages.find(m => m.id === messageId);\n    if (msg?.reportData && msg.agentType) {\n      dispatch({\n        type: 'GENERATE_REPORT',\n        payload: {\n          messageId,\n          reportData: msg.reportData,\n          agentType: msg.agentType,\n          timestamp: new Date().toISOString()\n        }\n      });\n    }\n  };\n\n  const isAssistantTyping = state.isProcessing || state.messages[state.messages.length - 1]?.isTyping;\n\n  return (\n    <>\n      <Card className={cn('flex flex-col h-full border-0 shadow-none rounded-none', className)}>\n        <CardContent className=\"flex-1 p-0 overflow-hidden relative\">\n          <div className=\"flex flex-col h-full\">\n            <ScrollArea className=\"flex-1\" ref={scrollAreaRef}>\n              <div className=\"p-6 space-y-6\">\n                {state.messages.map(message => (\n                  <EnhancedChatBubble\n                    key={message.id}\n                    message={message}\n                    onSuggestionClick={handleSuggestionClick}\n                    onVisualizeClick={() => handleVisualizeClick(message.id)}\n                    onGenerateReport={handleGenerateReport}\n                    thinkingSteps={state.thinkingSteps}\n                    performance={performance}\n                  />\n                ))}\n              </div>\n            </ScrollArea>\n\n            {/* Scroll to Bottom Button - Dynamic indicator when response is ready */}\n            {showScrollButton && (\n              <div className=\"absolute bottom-24 left-1/2 -translate-x-1/2 z-10\">\n                <Button\n                  size={hasNewResponse ? \"sm\" : \"icon\"}\n                  variant=\"secondary\"\n                  className={cn(\n                    \"rounded-full shadow-lg hover:shadow-xl transition-all\",\n                    hasNewResponse\n                      ? \"h-9 px-4 bg-primary text-primary-foreground hover:bg-primary/90 animate-pulse\"\n                      : \"h-10 w-10\"\n                  )}\n                  onClick={() => {\n                    scrollToBottom();\n                    setHasNewResponse(false);\n                  }}\n                  title={hasNewResponse ? \"Response ready - Click to view\" : \"Scroll to bottom\"}\n                >\n                  {hasNewResponse ? (\n                    <>\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        width=\"16\"\n                        height=\"16\"\n                        viewBox=\"0 0 24 24\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        className=\"mr-1\"\n                      >\n                        <path d=\"M12 5v14M19 12l-7 7-7-7\" />\n                      </svg>\n                      <span className=\"text-sm font-medium\">Response ready</span>\n                    </>\n                  ) : (\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      width=\"20\"\n                      height=\"20\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeWidth=\"2\"\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                    >\n                      <path d=\"M12 5v14M19 12l-7 7-7-7\" />\n                    </svg>\n                  )}\n                </Button>\n              </div>\n            )}\n\n            <div className=\"border-t p-4 bg-card/50 backdrop-blur-sm\">\n              <form onSubmit={handleFormSubmit} className=\"flex flex-col gap-3\">\n                <div className=\"flex items-end gap-3\">\n                  <Textarea\n                    className=\"flex-1 min-h-[40px] max-h-[120px] resize-none bg-background/80\"\n                    name=\"message\"\n                    placeholder=\"Ask about data exploration, forecasting, business insights, or get started with onboarding...\"\n                    autoComplete=\"off\"\n                    disabled={isAssistantTyping}\n                    rows={1}\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter' && !e.shiftKey) {\n                        e.preventDefault();\n                        const form = e.currentTarget.closest('form');\n                        if (form) {\n                          const formData = new FormData(form);\n                          const userInput = formData.get('message') as string;\n                          if (userInput.trim()) {\n                            form.reset();\n                            submitMessage(userInput);\n                          }\n                        }\n                      }\n                    }}\n                  />\n                  <Button\n                    type=\"submit\"\n                    size=\"icon\"\n                    disabled={isAssistantTyping}\n                    className=\"h-10 w-10 shrink-0\"\n                  >\n                    <Send className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      type=\"button\"\n                      onClick={() => fileInputRef.current?.click()}\n                      title=\"Upload data (CSV, Excel)\"\n                      disabled={isAssistantTyping}\n                    >\n                      <Paperclip className=\"h-4 w-4 mr-1\" />\n                      Upload Data\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      type=\"button\"\n                      onClick={() => dispatch({ type: 'SET_DATA_PANEL_OPEN', payload: true })}\n                      title=\"Open insights panel\"\n                      disabled={isAssistantTyping}\n                    >\n                      <BarChart className=\"h-4 w-4 mr-1\" />\n                      Insights Panel\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      type=\"button\"\n                      onClick={() => setShowAPISettings(true)}\n                      title=\"API Settings\"\n                      disabled={isAssistantTyping}\n                    >\n                      <Settings className=\"h-4 w-4 mr-1\" />\n                      Settings\n                    </Button>\n                  </div>\n\n                  {/* Session Token Counter */}\n                  {performance && performance.totalTokensUsed > 0 && (\n                    <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                      <Zap className=\"h-3 w-3\" />\n                      <span>Session: {performance.totalTokensUsed.toLocaleString()} tokens</span>\n                      <span className=\"text-muted-foreground/60\">‚Ä¢</span>\n                      <span>Avg: {Math.round(performance.avgTokensPerRequest || 0)}/req</span>\n                    </div>\n                  )}\n\n                  {performance && (\n                    <div className=\"text-xs text-muted-foreground flex items-center gap-2\">\n                      <TrendingUp className=\"h-3 w-3\" />\n                      Cache: {(performance.cacheHitRate * 100).toFixed(0)}% |\n                      Avg: {performance.avgResponseTime}ms\n                    </div>\n                  )}\n                </div>\n\n                <input\n                  type=\"file\"\n                  ref={fileInputRef}\n                  onChange={handleFileUpload}\n                  className=\"hidden\"\n                  accept=\".csv,.xlsx,.xls\"\n                />\n              </form>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Dialog\n        open={state.agentMonitor.isOpen}\n        onOpenChange={(isOpen) => dispatch({ type: 'SET_AGENT_MONITOR_OPEN', payload: isOpen })}\n      >\n        <DialogContent className=\"max-w-6xl h-[85vh] flex flex-col\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Brain className=\"h-5 w-5\" />\n              Enhanced Agent Intelligence Monitor\n            </DialogTitle>\n          </DialogHeader>\n          <EnhancedAgentMonitor className=\"flex-1 min-h-0\" />\n        </DialogContent>\n      </Dialog>\n\n      <APISettingsDialog\n        open={showAPISettings}\n        onOpenChange={setShowAPISettings}\n      />\n\n      <FollowUpQuestionsDialog\n        open={showFollowUpQuestions}\n        onOpenChange={setShowFollowUpQuestions}\n        requirements={followUpRequirements}\n        onSubmit={handleFollowUpSubmit}\n        onSkip={handleFollowUpSkip}\n      />\n\n      <ModelTrainingForm\n        open={showModelTrainingForm}\n        onOpenChange={setShowModelTrainingForm}\n        onSubmit={handleModelConfigSubmit}\n      />\n    </>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}