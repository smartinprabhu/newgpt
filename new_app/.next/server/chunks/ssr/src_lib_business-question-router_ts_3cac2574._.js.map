{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/martinprabhu/Downloads/support-operations-centre/new_app/src/lib/business-question-router.ts"],"sourcesContent":["/**\n * Business Question Router\n * Routes follow-up questions about forecasts to the appropriate agent\n */\n\nexport interface QuestionContext {\n  hasForecastResults: boolean;\n  hasActualData: boolean;\n  forecastMetrics?: any;\n  lastAnalysisType?: string;\n}\n\nexport interface RoutingResult {\n  agent: string;\n  hints: string[];\n  requiresContext: string[];\n}\n\nexport class BusinessQuestionRouter {\n  /**\n   * Route a user question to the appropriate agent\n   */\n  route(question: string, context: QuestionContext): RoutingResult {\n    const lowerQuestion = question.toLowerCase();\n\n    // Decision-making questions\n    if (this.isDecisionQuestion(lowerQuestion)) {\n      return {\n        agent: 'business_insights',\n        hints: ['provide_actionable_decisions', 'use_forecast_data', 'include_costs_and_timelines'],\n        requiresContext: ['forecast_results', 'actual_data', 'business_unit', 'lob']\n      };\n    }\n\n    // Forecast vs Actual comparison\n    if (this.isComparisonQuestion(lowerQuestion)) {\n      return {\n        agent: 'business_insights',\n        hints: ['compare_forecast_actual', 'analyze_accuracy', 'identify_gaps'],\n        requiresContext: ['forecast_results', 'actual_data']\n      };\n    }\n\n    // Business outcomes and impact\n    if (this.isOutcomeQuestion(lowerQuestion)) {\n      return {\n        agent: 'business_insights',\n        hints: ['analyze_business_impact', 'quantify_outcomes', 'assess_risks_opportunities'],\n        requiresContext: ['forecast_results', 'business_unit', 'lob']\n      };\n    }\n\n    // What-if scenarios\n    if (this.isScenarioQuestion(lowerQuestion)) {\n      return {\n        agent: 'business_insights',\n        hints: ['scenario_analysis', 'calculate_alternatives', 'provide_recommendations'],\n        requiresContext: ['forecast_results', 'actual_data']\n      };\n    }\n\n    // Forecast interpretation\n    if (this.isForecastInterpretation(lowerQuestion)) {\n      return {\n        agent: 'business_insights',\n        hints: ['interpret_forecast', 'explain_implications', 'suggest_actions'],\n        requiresContext: ['forecast_results']\n      };\n    }\n\n    // General insights\n    if (this.isInsightRequest(lowerQuestion)) {\n      return {\n        agent: 'insights',\n        hints: ['generate_insights', 'identify_opportunities'],\n        requiresContext: ['forecast_results', 'actual_data']\n      };\n    }\n\n    // Default to general agent\n    return {\n      agent: 'general',\n      hints: [],\n      requiresContext: []\n    };\n  }\n\n  /**\n   * Check if question is about decisions\n   */\n  private isDecisionQuestion(question: string): boolean {\n    const patterns = [\n      /what\\s+(decisions?|actions?|steps?)\\s+(can|should|do)\\s+i\\s+take/i,\n      /what\\s+should\\s+i\\s+do\\s+(with|about|based\\s+on)/i,\n      /how\\s+(can|should)\\s+i\\s+(use|leverage|act\\s+on)/i,\n      /recommend(ations?|ed)?\\s+(actions?|decisions?|steps?)/i,\n      /what\\s+(are\\s+)?my\\s+options/i,\n      /what\\s+actions?\\s+to\\s+take/i,\n    ];\n    return patterns.some(p => p.test(question));\n  }\n\n  /**\n   * Check if question is comparing forecast vs actual\n   */\n  private isComparisonQuestion(question: string): boolean {\n    const patterns = [\n      /forecast\\s+(vs|versus|compared\\s+to|against)\\s+actual/i,\n      /actual\\s+(vs|versus|compared\\s+to|against)\\s+forecast/i,\n      /how\\s+(accurate|reliable)\\s+is\\s+(the\\s+)?forecast/i,\n      /compare\\s+(forecast|prediction)\\s+(with|to|and)\\s+actual/i,\n      /difference\\s+between\\s+forecast\\s+and\\s+actual/i,\n      /forecast\\s+(accuracy|performance|reliability)/i,\n    ];\n    return patterns.some(p => p.test(question));\n  }\n\n  /**\n   * Check if question is about business outcomes\n   */\n  private isOutcomeQuestion(question: string): boolean {\n    const patterns = [\n      /business\\s+(outcome|impact|result|implication)/i,\n      /what\\s+(does|will)\\s+this\\s+mean\\s+for\\s+(my\\s+)?business/i,\n      /how\\s+(will|does)\\s+this\\s+(affect|impact)\\s+(my\\s+)?(business|revenue|profit)/i,\n      /expected\\s+(outcome|result|impact)/i,\n      /business\\s+implications?/i,\n      /what\\s+(is|are)\\s+the\\s+(business\\s+)?(impact|effect|consequence)/i,\n    ];\n    return patterns.some(p => p.test(question));\n  }\n\n  /**\n   * Check if question is a what-if scenario\n   */\n  private isScenarioQuestion(question: string): boolean {\n    const patterns = [\n      /what\\s+if/i,\n      /scenario\\s+(analysis|planning)/i,\n      /if\\s+.+\\s+(happens?|occurs?|increases?|decreases?)/i,\n      /suppose\\s+(that\\s+)?/i,\n      /assuming\\s+(that\\s+)?/i,\n      /in\\s+case\\s+(of\\s+)?/i,\n    ];\n    return patterns.some(p => p.test(question));\n  }\n\n  /**\n   * Check if question is asking for forecast interpretation\n   */\n  private isForecastInterpretation(question: string): boolean {\n    const patterns = [\n      /what\\s+does\\s+(the\\s+)?forecast\\s+(mean|show|tell|indicate)/i,\n      /explain\\s+(the\\s+)?forecast/i,\n      /interpret\\s+(the\\s+)?forecast/i,\n      /understand\\s+(the\\s+)?forecast/i,\n      /forecast\\s+(means?|shows?|tells?|indicates?)/i,\n    ];\n    return patterns.some(p => p.test(question));\n  }\n\n  /**\n   * Check if question is a general insight request\n   */\n  private isInsightRequest(question: string): boolean {\n    const patterns = [\n      /insights?/i,\n      /key\\s+(findings?|takeaways?|points?)/i,\n      /what\\s+(should|can)\\s+i\\s+know/i,\n      /tell\\s+me\\s+(about|more)/i,\n      /summary/i,\n    ];\n    return patterns.some(p => p.test(question));\n  }\n\n  /**\n   * Check if context is sufficient for the question\n   */\n  hasRequiredContext(routing: RoutingResult, context: QuestionContext): {\n    sufficient: boolean;\n    missing: string[];\n  } {\n    const missing: string[] = [];\n\n    for (const requirement of routing.requiresContext) {\n      switch (requirement) {\n        case 'forecast_results':\n          if (!context.hasForecastResults) {\n            missing.push('forecast results');\n          }\n          break;\n        case 'actual_data':\n          if (!context.hasActualData) {\n            missing.push('actual data');\n          }\n          break;\n      }\n    }\n\n    return {\n      sufficient: missing.length === 0,\n      missing\n    };\n  }\n\n  /**\n   * Generate a helpful message when context is missing\n   */\n  generateMissingContextMessage(missing: string[]): string {\n    return `To answer this question, I need ${missing.join(' and ')}. Please:\n\n${missing.includes('forecast results') ? '• Generate a forecast first by clicking \"Generate Forecast\"\\n' : ''}${missing.includes('actual data') ? '• Upload your data if you haven\\'t already\\n' : ''}\nThen ask your question again!`;\n  }\n}\n\n// Singleton instance\nexport const businessQuestionRouter = new BusinessQuestionRouter();\n"],"names":[],"mappings":"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","debugId":null}}]
}