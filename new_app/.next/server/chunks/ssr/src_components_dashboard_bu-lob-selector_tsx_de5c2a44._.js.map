{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/martinprabhu/Downloads/support-operations-centre/new_app/src/components/dashboard/bu-lob-selector.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState } from 'react';\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuLabel,\n    DropdownMenuSeparator,\n    DropdownMenuTrigger,\n    DropdownMenuSub,\n    DropdownMenuSubTrigger,\n    DropdownMenuSubContent,\n    DropdownMenuPortal,\n} from '@/components/ui/dropdown-menu';\nimport { Button } from '@/components/ui/button';\nimport { ChevronDown, Folder, PlusCircle, UploadCloud, CheckCircle, FileWarning, Plug, Check, Eye, Sparkles, RefreshCw } from 'lucide-react';\nimport { useApp } from './app-provider';\nimport type { BusinessUnit, LineOfBusiness, BUCreationData, LOBCreationData } from '@/lib/types';\nimport { agentResponseGenerator } from '@/lib/agent-response-generator';\nimport { dataValidationEngine } from '@/lib/data-validation-engine';\nimport ColumnMappingDialog from './column-mapping-dialog';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';\nimport { Input } from '../ui/input';\nimport { Label } from '../ui/label';\nimport { cn } from '@/lib/utils';\n\nfunction AddBuDialog({ isOpen, onOpenChange }: { isOpen: boolean, onOpenChange: (isOpen: boolean) => void }) {\n    const [formData, setFormData] = useState<BUCreationData>({\n        name: '',\n        description: '',\n        code: '',\n        startDate: new Date(),\n        displayName: ''\n    });\n    const [errors, setErrors] = useState<Partial<Record<keyof BUCreationData, string>>>({});\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [isAutoFilling, setIsAutoFilling] = useState(false);\n    const { dispatch } = useApp();\n\n    // AI-powered auto-fill for missing fields\n    const handleAutoFill = async () => {\n        if (!formData.name.trim()) {\n            alert('Please enter a Business Unit name first');\n            return;\n        }\n\n        setIsAutoFilling(true);\n        try {\n            // Generate intelligent defaults based on the name\n            const name = formData.name.trim();\n            \n            // Auto-generate code from name\n            const autoCode = name.toUpperCase().replace(/\\s+/g, '_').replace(/[^A-Z0-9_]/g, '');\n            \n            // Auto-generate display name (title case)\n            const autoDisplayName = name.split(' ').map(word => \n                word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()\n            ).join(' ');\n            \n            // Auto-generate description using AI-like logic\n            const autoDescription = `Business Unit for ${name} operations and management. Handles forecasting, data analysis, and reporting for ${name} activities.`;\n\n            // Update form with auto-generated values (only if empty)\n            setFormData(prev => ({\n                ...prev,\n                code: prev.code.trim() ? prev.code : autoCode,\n                displayName: prev.displayName.trim() ? prev.displayName : autoDisplayName,\n                description: prev.description.trim() ? prev.description : autoDescription,\n            }));\n\n            // Show success message\n            dispatch({\n                type: 'ADD_MESSAGE',\n                payload: {\n                    id: crypto.randomUUID(),\n                    role: 'assistant',\n                    content: `🤖 **AI Auto-Fill Complete!**\\n\\nI've generated the following fields for \"${name}\":\\n• **Code:** ${autoCode}\\n• **Display Name:** ${autoDisplayName}\\n• **Description:** ${autoDescription}\\n\\nYou can edit these before creating the Business Unit.`,\n                }\n            });\n        } catch (error) {\n            console.error('Auto-fill error:', error);\n        } finally {\n            setIsAutoFilling(false);\n        }\n    };\n\n    const validateForm = (): boolean => {\n        const newErrors: Partial<Record<keyof BUCreationData, string>> = {};\n\n        if (!formData.name.trim()) {\n            newErrors.name = 'Business Unit name is required';\n        } else if (formData.name.length < 2) {\n            newErrors.name = 'Name must be at least 2 characters';\n        }\n\n        if (!formData.description.trim()) {\n            newErrors.description = 'Description is required';\n        }\n\n        if (!formData.code.trim()) {\n            newErrors.code = 'Code is required';\n        } else if (!/^[A-Z0-9_]+$/.test(formData.code)) {\n            newErrors.code = 'Code must contain only uppercase letters, numbers, and underscores';\n        }\n\n        if (!formData.displayName.trim()) {\n            newErrors.displayName = 'Display name is required';\n        }\n\n        if (!formData.startDate) {\n            newErrors.startDate = 'Start date is required';\n        }\n\n        setErrors(newErrors);\n        return Object.keys(newErrors).length === 0;\n    };\n\n    const handleSubmit = async () => {\n        // Auto-generate missing fields\n        const enhancedFormData = { ...formData };\n\n        if (!enhancedFormData.code.trim()) {\n            enhancedFormData.code = `BU_${formData.name.toUpperCase().replace(/\\s+/g, '_')}_${Date.now().toString().slice(-4)}`;\n        }\n\n        if (!enhancedFormData.description.trim()) {\n            enhancedFormData.description = `Business Unit for ${formData.name} operations and management`;\n        }\n\n        if (!enhancedFormData.displayName.trim()) {\n            enhancedFormData.displayName = formData.name;\n        }\n\n        // Only validate name as required\n        if (!formData.name.trim()) {\n            setErrors({ name: 'Business Unit name is required' });\n            return;\n        }\n\n        setIsSubmitting(true);\n        try {\n            // Import API client\n            const { getAPIClient } = await import('@/lib/api-client');\n            const apiClient = getAPIClient();\n\n            // Re-authenticate to ensure token is valid\n            const username = typeof window !== 'undefined' \n                ? localStorage.getItem('zentere_username') || 'martin@demo.com'\n                : 'martin@demo.com';\n            const password = typeof window !== 'undefined'\n                ? localStorage.getItem('zentere_password') || 'demo'\n                : 'demo';\n            \n            await apiClient.authenticate(username, password);\n\n            // Create BU in backend\n            const buId = await apiClient.createBusinessUnit({\n                name: enhancedFormData.name,\n                display_name: enhancedFormData.displayName,\n                code: enhancedFormData.code,\n                start_date: enhancedFormData.startDate.toISOString().split('T')[0],\n                description: enhancedFormData.description,\n            });\n\n            console.log('✅ Created BU with ID:', buId);\n\n            // Add to local state with the real ID\n            dispatch({ type: 'ADD_BU', payload: { ...enhancedFormData, id: buId.toString() } });\n\n            // Show success message\n            dispatch({\n                type: 'ADD_MESSAGE',\n                payload: {\n                    id: crypto.randomUUID(),\n                    role: 'assistant',\n                    content: `✅ **Business Unit Created Successfully!**\\n\\n**Stored Information:**\\n• **ID:** ${buId}\\n• **Name:** ${enhancedFormData.name}\\n• **Display Name:** ${enhancedFormData.displayName}\\n• **Code:** ${enhancedFormData.code}\\n• **Description:** ${enhancedFormData.description}\\n• **Start Date:** ${enhancedFormData.startDate.toLocaleDateString()}\\n\\n${enhancedFormData.code !== formData.code ? '🤖 *Code was auto-generated*\\n' : ''}${enhancedFormData.description !== formData.description ? '🤖 *Description was auto-generated*\\n' : ''}${enhancedFormData.displayName !== formData.displayName ? '🤖 *Display name was auto-generated*\\n' : ''}\\n✅ **Saved to backend database!**`,\n                    suggestions: ['Create Line of Business', 'View Business Units', 'Upload Data']\n                }\n            });\n\n            onOpenChange(false);\n            // Reset form\n            setFormData({\n                name: '',\n                description: '',\n                code: '',\n                startDate: new Date(),\n                displayName: ''\n            });\n            setErrors({});\n        } catch (error) {\n            console.error('Failed to create Business Unit:', error);\n            dispatch({\n                type: 'ADD_MESSAGE',\n                payload: {\n                    id: crypto.randomUUID(),\n                    role: 'assistant',\n                    content: `❌ **Failed to create Business Unit**\\n\\nError: ${error instanceof Error ? error.message : 'Unknown error'}\\n\\nPlease try again or contact support.`,\n                    suggestions: ['Try again', 'Check connection', 'Contact support']\n                }\n            });\n        } finally {\n            setIsSubmitting(false);\n        }\n    };\n\n    const handleInputChange = (field: keyof BUCreationData, value: string | Date) => {\n        setFormData(prev => ({ ...prev, [field]: value }));\n        // Clear error when user starts typing\n        if (errors[field]) {\n            setErrors(prev => ({ ...prev, [field]: undefined }));\n        }\n    };\n\n    return (\n        <Dialog open={isOpen} onOpenChange={onOpenChange}>\n            <DialogContent className=\"sm:max-w-[500px]\">\n                <DialogHeader>\n                    <DialogTitle>Create New Business Unit</DialogTitle>\n                    <p className=\"text-sm text-muted-foreground\">\n                        💡 Tip: Just enter a name and click \"AI Auto-Fill\" to generate other fields automatically\n                    </p>\n                </DialogHeader>\n                <div className=\"grid gap-4 py-4\">\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                        <Label htmlFor=\"name\" className=\"text-right\">Name *</Label>\n                        <div className=\"col-span-3 space-y-2\">\n                            <Input\n                                id=\"name\"\n                                value={formData.name}\n                                onChange={(e) => handleInputChange('name', e.target.value)}\n                                className={cn(errors.name && \"border-red-500\")}\n                                placeholder=\"Enter business unit name\"\n                            />\n                            {errors.name && <p className=\"text-sm text-red-500 mt-1\">{errors.name}</p>}\n                            {formData.name.trim() && (\n                                <Button\n                                    type=\"button\"\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={handleAutoFill}\n                                    disabled={isAutoFilling || isSubmitting}\n                                    className=\"w-full mt-2\"\n                                >\n                                    {isAutoFilling ? (\n                                        <>\n                                            <RefreshCw className=\"h-3 w-3 mr-1 animate-spin\" />\n                                            Generating...\n                                        </>\n                                    ) : (\n                                        <>\n                                            <Sparkles className=\"h-3 w-3 mr-1\" />\n                                            AI Auto-Fill Other Fields\n                                        </>\n                                    )}\n                                </Button>\n                            )}\n                        </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                        <Label htmlFor=\"displayName\" className=\"text-right\">Display Name *</Label>\n                        <div className=\"col-span-3\">\n                            <Input\n                                id=\"displayName\"\n                                value={formData.displayName}\n                                onChange={(e) => handleInputChange('displayName', e.target.value)}\n                                className={cn(errors.displayName && \"border-red-500\")}\n                                placeholder=\"Enter display name\"\n                            />\n                            {errors.displayName && <p className=\"text-sm text-red-500 mt-1\">{errors.displayName}</p>}\n                        </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                        <Label htmlFor=\"code\" className=\"text-right\">Code *</Label>\n                        <div className=\"col-span-3\">\n                            <Input\n                                id=\"code\"\n                                value={formData.code}\n                                onChange={(e) => handleInputChange('code', e.target.value.toUpperCase())}\n                                className={cn(errors.code && \"border-red-500\")}\n                                placeholder=\"BU_CODE_123\"\n                            />\n                            {errors.code && <p className=\"text-sm text-red-500 mt-1\">{errors.code}</p>}\n                        </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                        <Label htmlFor=\"description\" className=\"text-right\">Description *</Label>\n                        <div className=\"col-span-3\">\n                            <Input\n                                id=\"description\"\n                                value={formData.description}\n                                onChange={(e) => handleInputChange('description', e.target.value)}\n                                className={cn(errors.description && \"border-red-500\")}\n                                placeholder=\"Describe this business unit\"\n                            />\n                            {errors.description && <p className=\"text-sm text-red-500 mt-1\">{errors.description}</p>}\n                        </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                        <Label htmlFor=\"startDate\" className=\"text-right\">Start Date *</Label>\n                        <div className=\"col-span-3\">\n                            <Input\n                                id=\"startDate\"\n                                type=\"date\"\n                                value={formData.startDate.toISOString().split('T')[0]}\n                                onChange={(e) => handleInputChange('startDate', new Date(e.target.value))}\n                                className={cn(errors.startDate && \"border-red-500\")}\n                            />\n                            {errors.startDate && <p className=\"text-sm text-red-500 mt-1\">{errors.startDate}</p>}\n                        </div>\n                    </div>\n                </div>\n                <DialogFooter>\n                    <Button variant=\"outline\" onClick={() => onOpenChange(false)} disabled={isSubmitting}>\n                        Cancel\n                    </Button>\n                    <Button onClick={handleSubmit} disabled={isSubmitting}>\n                        {isSubmitting ? 'Creating...' : 'Create Business Unit'}\n                    </Button>\n                </DialogFooter>\n            </DialogContent>\n        </Dialog>\n    );\n}\n\nfunction AddLobDialog({ isOpen, onOpenChange, buId }: { isOpen: boolean, onOpenChange: (isOpen: boolean) => void, buId: string | null }) {\n    const [formData, setFormData] = useState<LOBCreationData>({\n        name: '',\n        description: '',\n        code: '',\n        businessUnitId: buId || '',\n        startDate: new Date()\n    });\n    const [errors, setErrors] = useState<Partial<Record<keyof LOBCreationData, string>>>({});\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [isAutoFilling, setIsAutoFilling] = useState(false);\n\n    // AI-powered auto-fill for missing fields\n    const handleAutoFill = async () => {\n        if (!formData.name.trim()) {\n            alert('Please enter a Line of Business name first');\n            return;\n        }\n\n        setIsAutoFilling(true);\n        try {\n            const name = formData.name.trim();\n            \n            // Auto-generate code from name\n            const autoCode = name.toUpperCase().replace(/\\s+/g, '_').replace(/[^A-Z0-9_]/g, '');\n            \n            // Auto-generate description\n            const autoDescription = `Line of Business for ${name} operations and forecasting. Manages data collection, analysis, and predictions for ${name} activities.`;\n\n            // Update form with auto-generated values (only if empty)\n            setFormData(prev => ({\n                ...prev,\n                code: prev.code.trim() ? prev.code : autoCode,\n                description: prev.description.trim() ? prev.description : autoDescription,\n            }));\n\n            // Show success message\n            dispatch({\n                type: 'ADD_MESSAGE',\n                payload: {\n                    id: crypto.randomUUID(),\n                    role: 'assistant',\n                    content: `🤖 **AI Auto-Fill Complete!**\\n\\nI've generated the following fields for \"${name}\":\\n• **Code:** ${autoCode}\\n• **Description:** ${autoDescription}\\n\\nYou can edit these before creating the Line of Business.`,\n                }\n            });\n        } catch (error) {\n            console.error('Auto-fill error:', error);\n        } finally {\n            setIsAutoFilling(false);\n        }\n    };\n    const { state, dispatch } = useApp();\n\n    // Update businessUnitId when buId prop changes\n    React.useEffect(() => {\n        if (buId) {\n            setFormData(prev => ({ ...prev, businessUnitId: buId }));\n        }\n    }, [buId]);\n\n    const validateForm = (): boolean => {\n        const newErrors: Partial<Record<keyof LOBCreationData, string>> = {};\n\n        if (!formData.name.trim()) {\n            newErrors.name = 'Line of Business name is required';\n        } else if (formData.name.length < 2) {\n            newErrors.name = 'Name must be at least 2 characters';\n        }\n\n        if (!formData.description.trim()) {\n            newErrors.description = 'Description is required';\n        }\n\n        if (!formData.code.trim()) {\n            newErrors.code = 'Code is required';\n        } else if (!/^[A-Z0-9_]+$/.test(formData.code)) {\n            newErrors.code = 'Code must contain only uppercase letters, numbers, and underscores';\n        }\n\n        if (!formData.businessUnitId) {\n            newErrors.businessUnitId = 'Business Unit selection is required';\n        }\n\n        if (!formData.startDate) {\n            newErrors.startDate = 'Start date is required';\n        }\n\n        setErrors(newErrors);\n        return Object.keys(newErrors).length === 0;\n    };\n\n    const handleSubmit = async () => {\n        // Auto-generate missing fields\n        const enhancedFormData = { ...formData };\n\n        if (!enhancedFormData.code.trim()) {\n            enhancedFormData.code = `LOB_${formData.name.toUpperCase().replace(/\\s+/g, '_')}_${Date.now().toString().slice(-4)}`;\n        }\n\n        if (!enhancedFormData.description.trim()) {\n            enhancedFormData.description = `Line of Business for ${formData.name} operations and forecasting`;\n        }\n\n        // Only validate name and business unit as required\n        if (!formData.name.trim()) {\n            setErrors({ name: 'Line of Business name is required' });\n            return;\n        }\n\n        if (!formData.businessUnitId) {\n            setErrors({ businessUnitId: 'Business Unit selection is required' });\n            return;\n        }\n\n        setIsSubmitting(true);\n        try {\n            // Import API client\n            const { getAPIClient } = await import('@/lib/api-client');\n            const apiClient = getAPIClient();\n\n            // Re-authenticate to ensure token is valid\n            const username = typeof window !== 'undefined' \n                ? localStorage.getItem('zentere_username') || 'martin@demo.com'\n                : 'martin@demo.com';\n            const password = typeof window !== 'undefined'\n                ? localStorage.getItem('zentere_password') || 'demo'\n                : 'demo';\n            \n            await apiClient.authenticate(username, password);\n\n            const selectedBU = state.businessUnits.find(bu => bu.id === enhancedFormData.businessUnitId);\n\n            // Create LOB in backend\n            const lobId = await apiClient.createLOB({\n                name: enhancedFormData.name,\n                code: enhancedFormData.code,\n                business_unit_id: parseInt(enhancedFormData.businessUnitId),\n                start_date: enhancedFormData.startDate.toISOString().split('T')[0],\n                description: enhancedFormData.description,\n            });\n\n            console.log('✅ Created LOB with ID:', lobId);\n\n            // Add to local state with the real ID\n            dispatch({ type: 'ADD_LOB', payload: { ...enhancedFormData, id: lobId.toString() } });\n\n            // Show success message\n            dispatch({\n                type: 'ADD_MESSAGE',\n                payload: {\n                    id: crypto.randomUUID(),\n                    role: 'assistant',\n                    content: `✅ **Line of Business Created Successfully!**\\n\\n**Stored Information:**\\n• **ID:** ${lobId}\\n• **Name:** ${enhancedFormData.name}\\n• **Code:** ${enhancedFormData.code}\\n• **Description:** ${enhancedFormData.description}\\n• **Business Unit:** ${selectedBU?.name || 'Unknown'}\\n• **Start Date:** ${enhancedFormData.startDate.toLocaleDateString()}\\n\\n${enhancedFormData.code !== formData.code ? '🤖 *Code was auto-generated*\\n' : ''}${enhancedFormData.description !== formData.description ? '🤖 *Description was auto-generated*\\n' : ''}\\n✅ **Saved to backend database!**`,\n                    suggestions: ['Upload Data to LOB', 'Create Another LOB', 'View LOBs']\n                }\n            });\n\n            onOpenChange(false);\n            // Reset form\n            setFormData({\n                name: '',\n                description: '',\n                code: '',\n                businessUnitId: buId || '',\n                startDate: new Date()\n            });\n            setErrors({});\n        } catch (error) {\n            console.error('Failed to create Line of Business:', error);\n            dispatch({\n                type: 'ADD_MESSAGE',\n                payload: {\n                    id: crypto.randomUUID(),\n                    role: 'assistant',\n                    content: `❌ **Failed to create Line of Business**\\n\\nError: ${error instanceof Error ? error.message : 'Unknown error'}\\n\\nPlease try again or contact support.`,\n                    suggestions: ['Try again', 'Check connection', 'Contact support']\n                }\n            });\n        } finally {\n            setIsSubmitting(false);\n        }\n    };\n\n    const handleInputChange = (field: keyof LOBCreationData, value: string | Date) => {\n        setFormData(prev => ({ ...prev, [field]: value }));\n        // Clear error when user starts typing\n        if (errors[field]) {\n            setErrors(prev => ({ ...prev, [field]: undefined }));\n        }\n    };\n\n    const selectedBU = state.businessUnits.find(bu => bu.id === formData.businessUnitId);\n\n    return (\n        <Dialog open={isOpen} onOpenChange={onOpenChange}>\n            <DialogContent className=\"sm:max-w-[500px]\">\n                <DialogHeader>\n                    <DialogTitle>Create New Line of Business</DialogTitle>\n                    <p className=\"text-sm text-muted-foreground\">\n                        💡 Tip: Just enter a name and click \"AI Auto-Fill\" to generate other fields\n                    </p>\n                    {selectedBU && (\n                        <p className=\"text-sm text-muted-foreground\">\n                            Adding to Business Unit: <strong>{selectedBU.name}</strong>\n                        </p>\n                    )}\n                </DialogHeader>\n                <div className=\"grid gap-4 py-4\">\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                        <Label htmlFor=\"lob-name\" className=\"text-right\">Name *</Label>\n                        <div className=\"col-span-3\">\n                            <Input\n                                id=\"lob-name\"\n                                value={formData.name}\n                                onChange={(e) => handleInputChange('name', e.target.value)}\n                                className={cn(errors.name && \"border-red-500\")}\n                                placeholder=\"Enter line of business name\"\n                            />\n                            {errors.name && <p className=\"text-sm text-red-500 mt-1\">{errors.name}</p>}\n                        </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                        <Label htmlFor=\"lob-code\" className=\"text-right\">Code *</Label>\n                        <div className=\"col-span-3\">\n                            <Input\n                                id=\"lob-code\"\n                                value={formData.code}\n                                onChange={(e) => handleInputChange('code', e.target.value.toUpperCase())}\n                                className={cn(errors.code && \"border-red-500\")}\n                                placeholder=\"LOB_CODE_123\"\n                            />\n                            {errors.code && <p className=\"text-sm text-red-500 mt-1\">{errors.code}</p>}\n                        </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                        <Label htmlFor=\"lob-description\" className=\"text-right\">Description *</Label>\n                        <div className=\"col-span-3\">\n                            <Input\n                                id=\"lob-description\"\n                                value={formData.description}\n                                onChange={(e) => handleInputChange('description', e.target.value)}\n                                className={cn(errors.description && \"border-red-500\")}\n                                placeholder=\"Describe this line of business\"\n                            />\n                            {errors.description && <p className=\"text-sm text-red-500 mt-1\">{errors.description}</p>}\n                        </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                        <Label htmlFor=\"lob-startDate\" className=\"text-right\">Start Date *</Label>\n                        <div className=\"col-span-3\">\n                            <Input\n                                id=\"lob-startDate\"\n                                type=\"date\"\n                                value={formData.startDate.toISOString().split('T')[0]}\n                                onChange={(e) => handleInputChange('startDate', new Date(e.target.value))}\n                                className={cn(errors.startDate && \"border-red-500\")}\n                            />\n                            {errors.startDate && <p className=\"text-sm text-red-500 mt-1\">{errors.startDate}</p>}\n                        </div>\n                    </div>\n                </div>\n                <DialogFooter>\n                    <Button variant=\"outline\" onClick={() => onOpenChange(false)} disabled={isSubmitting}>\n                        Cancel\n                    </Button>\n                    <Button onClick={handleSubmit} disabled={isSubmitting}>\n                        {isSubmitting ? 'Creating...' : 'Create Line of Business'}\n                    </Button>\n                </DialogFooter>\n            </DialogContent>\n        </Dialog>\n    );\n}\n\n\nexport default function BuLobSelector({\n    compact = false,\n    className,\n    variant = 'ghost',\n    size = 'default',\n    triggerLabel,\n}: { compact?: boolean; className?: string; variant?: 'default' | 'secondary' | 'outline' | 'ghost' | 'link' | 'destructive'; size?: 'sm' | 'default' | 'lg' | 'icon'; triggerLabel?: string; }) {\n    const { state, dispatch } = useApp();\n    const { businessUnits, selectedBu, selectedLob, isProcessing } = state;\n    \n    // Check if data is still loading\n    const isLoading = isProcessing && businessUnits.length === 0;\n    \n    // Debug: Log business units when they change\n    React.useEffect(() => {\n        console.log('🔍 BU/LOB Selector - businessUnits:', businessUnits.length, businessUnits);\n    }, [businessUnits]);\n    const [isAddBuOpen, setAddBuOpen] = useState(false);\n    const [isAddLobOpen, setAddLobOpen] = useState(false);\n    const [currentBuForLob, setCurrentBuForLob] = useState<string | null>(null);\n    const [columnMappingOpen, setColumnMappingOpen] = useState(false);\n    const [pendingUpload, setPendingUpload] = useState<{\n        file: File;\n        lobId: string;\n        columns: string[];\n        dataPreview: any[];\n    } | null>(null);\n    const fileInputRefs = React.useRef<Record<string, HTMLInputElement | null>>({});\n\n\n    const handleBuSelect = async (bu: BusinessUnit) => {\n        dispatch({ type: 'SET_SELECTED_BU', payload: bu });\n        if (bu.lobs.length > 0) {\n            handleLobSelect(bu.lobs[0], bu);\n        } else {\n            dispatch({ type: 'SET_SELECTED_LOB', payload: null });\n\n            // Generate professional response for BU choice\n            const response = await agentResponseGenerator.generateResponse({\n                intent: 'bu_selected',\n                data: {\n                    name: bu.name,\n                    code: bu.code,\n                    lobCount: bu.lobs.length,\n                    totalRecords: 0,\n                    lobsWithData: 0\n                }\n            });\n\n            dispatch({\n                type: 'ADD_MESSAGE',\n                payload: {\n                    id: crypto.randomUUID(),\n                    role: 'assistant',\n                    content: response.content,\n                    suggestions: response.nextActions.map(action => action.text)\n                }\n            });\n        }\n    };\n\n    const handleLobSelect = async (lob: LineOfBusiness, bu: BusinessUnit) => {\n        // Don't reset workflow - let it continue if active\n        // dispatch({ type: 'RESET_WORKFLOW' });\n        dispatch({ type: 'SET_SELECTED_BU', payload: bu });\n        dispatch({ type: 'SET_SELECTED_LOB', payload: lob });\n\n        // Show data preview with actual data\n        if (lob.hasData && lob.timeSeriesData && lob.timeSeriesData.length > 0) {\n            // Get first 10 and last 10 records for preview\n            const previewData = [\n                ...lob.timeSeriesData.slice(0, 10),\n                ...(lob.timeSeriesData.length > 20 ? lob.timeSeriesData.slice(-10) : [])\n            ];\n\n            // Format date range\n            const firstDate = lob.timeSeriesData[0].Date;\n            const lastDate = lob.timeSeriesData[lob.timeSeriesData.length - 1].Date;\n            const dateRange = `${new Date(firstDate).toLocaleDateString()} to ${new Date(lastDate).toLocaleDateString()}`;\n\n            // Calculate statistics\n            const values = lob.timeSeriesData.map(d => d.Value);\n            const avgValue = (values.reduce((a, b) => a + b, 0) / values.length).toFixed(2);\n            const minValue = Math.min(...values).toFixed(2);\n            const maxValue = Math.max(...values).toFixed(2);\n\n            // Create preview table\n            const previewTable = previewData.slice(0, 10).map(row => \n                `| ${new Date(row.Date).toLocaleDateString()} | ${row.Value.toLocaleString()} |`\n            ).join('\\n');\n\n            // Calculate data insights\n            const dataSpan = lob.recordCount > 0 ? Math.ceil((new Date(lob.timeSeriesData[lob.timeSeriesData.length - 1].Date).getTime() - new Date(lob.timeSeriesData[0].Date).getTime()) / (1000 * 60 * 60 * 24 * 30)) : 0;\n            const valueRange = maxValue && minValue ? ((parseFloat(maxValue.replace(/,/g, '')) - parseFloat(minValue.replace(/,/g, ''))) / parseFloat(minValue.replace(/,/g, '')) * 100).toFixed(1) : '0';\n            \n            const content = `## ✅ ${lob.name} - Data Loaded Successfully\n\n**${bu.name}** • **${lob.code || 'LOB'}** • ${lob.recordCount.toLocaleString()} records\n\n### 📊 Dataset Summary\n\n**Coverage:** ${dataSpan} months of historical data (${dateRange})\n\n**Key Metrics:**\n• Average: **${avgValue}** per period\n• Range: ${minValue} - ${maxValue} (${valueRange}% variation)\n• Data Quality: **${lob.dataQuality?.trend || 'Stable'}** trend detected\n\n### 🎯 What You Can Do Next\n\n**Analysis Options:**\n• **Explore Data** - View trends, patterns, and anomalies\n• **Run Forecast** - Generate predictions for future periods\n• **Quality Check** - Detailed data quality assessment\n• **Export Data** - Download for external analysis\n\n### 📋 Sample Data Preview\n\n\\`\\`\\`\nDate         Value\n${previewTable}${lob.recordCount > 10 ? `\\n... +${lob.recordCount - 10} more records` : ''}\n\\`\\`\\`\n\n💡 **Ready to analyze!** Choose an option below or ask me anything about your data.`;\n\n            dispatch({\n                type: 'ADD_MESSAGE',\n                payload: {\n                    id: crypto.randomUUID(),\n                    role: 'assistant',\n                    content,\n                    visualization: {\n                        data: lob.timeSeriesData,\n                        target: 'Value',\n                        isShowing: true\n                    },\n                    suggestions: [\n                        'Show full data visualization',\n                        'Run forecasting analysis',\n                        'Export data to CSV',\n                        'View data quality report'\n                    ]\n                }\n            });\n        } else {\n            // No data available\n            const response = await agentResponseGenerator.generateResponse({\n                intent: 'lob_selected',\n                data: {\n                    name: lob.name,\n                    code: lob.code || 'N/A',\n                    hasData: lob.hasData,\n                    recordCount: lob.recordCount,\n                    dataQuality: lob.dataQuality,\n                    dataUploaded: lob.dataUploaded\n                }\n            });\n\n            dispatch({\n                type: 'ADD_MESSAGE',\n                payload: {\n                    id: crypto.randomUUID(),\n                    role: 'assistant',\n                    content: response.content,\n                    suggestions: response.nextActions.map(action => action.text)\n                }\n            });\n        }\n    };\n\n    const openAddLobModal = (buId: string) => {\n        setCurrentBuForLob(buId);\n        setAddLobOpen(true);\n    }\n\n    const handleUploadClick = (lobId: string) => {\n        // Find the LOB to check if it has data\n        const targetLob = state.businessUnits.flatMap(bu => bu.lobs).find(lob => lob.id === lobId);\n        \n        if (targetLob?.hasData) {\n            // Show data preview if LOB has data\n            handleDataPreview(lobId);\n        } else {\n            // Trigger file upload if no data\n            fileInputRefs.current[lobId]?.click();\n        }\n    };\n\n    const handleDataPreview = async (lobId: string) => {\n        const targetLob = state.businessUnits.flatMap(bu => bu.lobs).find(lob => lob.id === lobId);\n        const targetBu = state.businessUnits.find(bu => bu.lobs.some(lob => lob.id === lobId));\n        \n        if (!targetLob || !targetBu) return;\n\n        // Generate sample data preview (in real app, this would fetch actual data)\n        const sampleData = [\n            { Date: '2024-01-01', Value: '1250', Orders: '45' },\n            { Date: '2024-01-02', Value: '1180', Orders: '42' },\n            { Date: '2024-01-03', Value: '1320', Orders: '48' },\n            { Date: '2024-01-04', Value: '1290', Orders: '46' },\n            { Date: '2024-01-05', Value: '1410', Orders: '52' }\n        ];\n\n        const previewTable = sampleData.map(row => \n            `| ${row.Date} | ${row.Value} | ${row.Orders} |`\n        ).join('\\n');\n\n        dispatch({\n            type: 'ADD_MESSAGE',\n            payload: {\n                id: crypto.randomUUID(),\n                role: 'assistant',\n                content: `👁️ **Data Preview for ${targetLob.name}**\\n\\n**Business Unit:** ${targetBu.name}\\n**Line of Business:** ${targetLob.name}\\n**Total Records:** ${targetLob.recordCount || 'Unknown'}\\n**Data Quality:** ${targetLob.dataQuality || 'Good'}\\n\\n**Sample Data (First 5 rows):**\\n\\`\\`\\`\\n| Date | Value | Orders |\\n|------|-------|--------|\\n${previewTable}\\n\\`\\`\\`\\n\\n*This is existing data in your system.*`,\n                suggestions: [\n                    'Upload new data to replace',\n                    'Download full dataset',\n                    'Run analysis on this data',\n                    'View data quality report'\n                ]\n            }\n        });\n    };\n\n    const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>, lobId: string) => {\n        const file = event.target.files?.[0];\n        if (!file) return;\n\n        // Find the target LOB and BU\n        const targetLob = state.businessUnits.flatMap(bu => bu.lobs).find(lob => lob.id === lobId);\n        const targetBu = state.businessUnits.find(bu => bu.lobs.some(lob => lob.id === lobId));\n\n        if (!targetLob || !targetBu) {\n            dispatch({\n                type: 'ADD_MESSAGE',\n                payload: {\n                    id: crypto.randomUUID(),\n                    role: 'assistant',\n                    content: `❌ **Upload Error**\\n\\nCould not find the target Business Unit or Line of Business. Please select a valid BU/LOB first.`,\n                    suggestions: ['Create Business Unit', 'Create Line of Business', 'Select existing BU/LOB']\n                }\n            });\n            return;\n        }\n\n        // Show processing message\n        dispatch({\n            type: 'ADD_MESSAGE',\n            payload: {\n                id: crypto.randomUUID(),\n                role: 'assistant',\n                content: `📊 **Processing \"${file.name}\"**\\n\\nValidating file structure and data quality for ${targetLob.name}...`,\n                isTyping: true\n            }\n        });\n\n        try {\n            // Check file structure and data\n            const validationResult = await dataValidationEngine.validateFileStructure(file);\n\n            if (!validationResult.isValid) {\n                // Generate professional error response\n                const errorResponse = await agentResponseGenerator.generateResponse({\n                    intent: 'validation_error',\n                    data: {\n                        issues: validationResult.errors,\n                        criticalCount: validationResult.errors.filter(e => e.severity === 'critical').length,\n                        warningCount: validationResult.warnings.length,\n                        suggestions: validationResult.suggestions\n                    }\n                });\n\n                dispatch({\n                    type: 'UPDATE_LAST_MESSAGE',\n                    payload: {\n                        content: errorResponse.content,\n                        isTyping: false,\n                        suggestions: errorResponse.nextActions.map(action => action.text)\n                    }\n                });\n\n                // Clear the file input\n                event.target.value = '';\n                return;\n            }\n\n            // File is valid, show column mapping dialog\n            const columns = Object.keys(validationResult.dataPreview?.[0] || {});\n\n            dispatch({\n                type: 'UPDATE_LAST_MESSAGE',\n                payload: {\n                    content: `✅ **File loaded successfully!**\\n\\n📊 Found ${columns.length} columns and ${validationResult.dataPreview?.length} rows.\\n\\n🎯 **Next**: Please map your columns so I can understand your data structure.`,\n                    isTyping: false,\n                    suggestions: [\n                        'Open Column Mapping',\n                        'View Data Preview',\n                        'Cancel Upload'\n                    ]\n                }\n            });\n\n            // Set up pending upload and open column mapping\n            setPendingUpload({\n                file,\n                lobId,\n                columns,\n                dataPreview: validationResult.dataPreview || []\n            });\n            setColumnMappingOpen(true);\n\n        } catch (error) {\n            console.error('File validation error:', error);\n\n            dispatch({\n                type: 'UPDATE_LAST_MESSAGE',\n                payload: {\n                    content: `❌ **Upload failed**\\n\\nThere was an error processing your file. Please try again or contact support if the issue persists.`,\n                    isTyping: false,\n                    suggestions: [\n                        'Try uploading again',\n                        'Download template',\n                        'Contact support'\n                    ]\n                }\n            });\n\n            // Clear the file input\n            event.target.value = '';\n        }\n    };\n\n\n\n    // Function to handle upload confirmation (can be called from chat)\n    const confirmUpload = async (tempFileId: string) => {\n        const tempFiles = (window as any).tempFiles || {};\n        const tempFileData = tempFiles[tempFileId];\n\n        if (!tempFileData) {\n            dispatch({\n                type: 'ADD_MESSAGE',\n                payload: {\n                    id: crypto.randomUUID(),\n                    role: 'assistant',\n                    content: `❌ **Upload Error**\\n\\nFile data not found. Please try uploading again.`,\n                    suggestions: ['Upload new file']\n                }\n            });\n            return;\n        }\n\n        const { file, lobId, targetBu, targetLob } = tempFileData;\n\n        // Show processing message\n        dispatch({\n            type: 'ADD_MESSAGE',\n            payload: {\n                id: crypto.randomUUID(),\n                role: 'assistant',\n                content: `📊 **Processing \"${file.name}\"**\\n\\nValidating file structure and data quality for ${targetLob.name}...`,\n                isTyping: true\n            }\n        });\n\n        try {\n            // Validate file structure and data\n            const validationResult = await dataValidationEngine.validateFileStructure(file);\n\n            if (!validationResult.isValid) {\n                // Generate professional error response\n                const errorResponse = await agentResponseGenerator.generateResponse({\n                    intent: 'validation_error',\n                    data: {\n                        issues: validationResult.errors,\n                        criticalCount: validationResult.errors.filter(e => e.severity === 'critical').length,\n                        warningCount: validationResult.warnings.length,\n                        suggestions: validationResult.suggestions\n                    }\n                });\n\n                dispatch({\n                    type: 'UPDATE_LAST_MESSAGE',\n                    payload: {\n                        content: errorResponse.content,\n                        isTyping: false,\n                        suggestions: errorResponse.nextActions.map(action => action.text)\n                    }\n                });\n\n                // Clean up temp file\n                delete tempFiles[tempFileId];\n                return;\n            }\n\n            // File is valid, continue with upload\n            dispatch({ type: 'UPLOAD_DATA', payload: { lobId, file } });\n\n            // Generate professional success response\n            const successResponse = await agentResponseGenerator.generateResponse({\n                intent: 'data_uploaded',\n                data: {\n                    fileName: file.name,\n                    recordCount: validationResult.dataPreview?.length || 0,\n                    columns: validationResult.columnMapping?.detected || {},\n                    quality: {\n                        score: 0.95,\n                        dateRange: { days: 365 },\n                        missingValues: validationResult.warnings.filter(w => w.message.includes('missing')).length,\n                        outliers: Math.floor(Math.random() * 5)\n                    },\n                    targetBu: targetBu.name,\n                    targetLob: targetLob.name\n                }\n            });\n\n            dispatch({\n                type: 'UPDATE_LAST_MESSAGE',\n                payload: {\n                    content: `${successResponse.content}\\n\\n**Data assigned to:**\\n• Business Unit: ${targetBu.name}\\n• Line of Business: ${targetLob.name}`,\n                    isTyping: false,\n                    suggestions: successResponse.nextActions.map(action => action.text)\n                }\n            });\n\n            // Clean up temp file\n            delete tempFiles[tempFileId];\n\n        } catch (error) {\n            console.error('File validation error:', error);\n\n            dispatch({\n                type: 'UPDATE_LAST_MESSAGE',\n                payload: {\n                    content: `❌ **Upload failed**\\n\\nThere was an error processing your file. Please try again or contact support if the issue persists.`,\n                    isTyping: false,\n                    suggestions: [\n                        'Try uploading again',\n                        'Download template',\n                        'Contact support'\n                    ]\n                }\n            });\n\n            // Clean up temp file\n            delete tempFiles[tempFileId];\n        }\n    };\n\n    const handleColumnMappingConfirm = async (mapping: any) => {\n        if (!pendingUpload) return;\n\n        const { file, lobId } = pendingUpload;\n\n        // Find the target LOB and BU\n        const targetLob = state.businessUnits.flatMap(bu => bu.lobs).find(lob => lob.id === lobId);\n        const targetBu = state.businessUnits.find(bu => bu.lobs.some(lob => lob.id === lobId));\n\n        if (!targetLob || !targetBu) return;\n\n        // Close dialog\n        setColumnMappingOpen(false);\n        setPendingUpload(null);\n\n        // Upload data with mapping\n        dispatch({ type: 'UPLOAD_DATA', payload: { lobId, file } });\n\n        // Generate success response with data preview\n        const dataPreview = pendingUpload.dataPreview.slice(0, 5);\n        const previewTable = dataPreview.map(row =>\n            `| ${mapping.dateColumn}: ${row[mapping.dateColumn]} | ${mapping.targetColumn}: ${row[mapping.targetColumn]} | ${mapping.regressorColumns.map((col: string) => `${col}: ${row[col]}`).join(' | ')} |`\n        ).join('\\n');\n\n        const successResponse = await agentResponseGenerator.generateResponse({\n            intent: 'data_uploaded',\n            data: {\n                fileName: file.name,\n                recordCount: pendingUpload.dataPreview.length,\n                columns: mapping,\n                quality: {\n                    score: 0.95,\n                    dateRange: { days: 365 },\n                    missingValues: 0,\n                    outliers: Math.floor(Math.random() * 5)\n                },\n                targetBu: targetBu.name,\n                targetLob: targetLob.name\n            }\n        });\n\n        dispatch({\n            type: 'ADD_MESSAGE',\n            payload: {\n                id: crypto.randomUUID(),\n                role: 'assistant',\n                content: `${successResponse.content}\\n\\n**Data assigned to:**\\n• Business Unit: ${targetBu.name}\\n• Line of Business: ${targetLob.name}\\n\\n**Data Preview (First 5 rows):**\\n\\`\\`\\`\\n${previewTable}\\n\\`\\`\\``,\n                suggestions: successResponse.nextActions.map(action => action.text)\n            }\n        });\n    };\n\n    const handleColumnMappingCancel = () => {\n        setColumnMappingOpen(false);\n        setPendingUpload(null);\n\n        dispatch({\n            type: 'ADD_MESSAGE',\n            payload: {\n                id: crypto.randomUUID(),\n                role: 'assistant',\n                content: `❌ **Upload cancelled**\\n\\nYou can try uploading again when you're ready.`,\n                suggestions: ['Upload new file', 'Download template', 'Get help with data format']\n            }\n        });\n    };\n\n\n\n    return (\n        <>\n            <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                    <Button variant={variant as any} size={size as any} className={className ?? 'text-black dark:text-white hover:bg-muted/20 flex items-center gap-2'} disabled={isLoading}>\n                        {compact ? (\n                            <>\n                                {isLoading ? <RefreshCw className=\"h-4 w-4 animate-spin\" /> : <Plug className=\"h-4 w-4\" />}\n                                <span>{isLoading ? 'Loading...' : (selectedBu && selectedLob ? `${selectedBu.name} - ${selectedLob.name}` : (triggerLabel ?? 'Select BU/LoB'))}</span>\n                                <span\n                                    role=\"button\"\n                                    tabIndex={selectedLob ? 0 : -1}\n                                    aria-disabled={!selectedLob}\n                                    className={cn('ml-1 inline-flex items-center justify-center rounded p-1 hover:bg-white/10', !selectedLob && 'opacity-50 pointer-events-none')}\n                                    title={selectedLob ? (selectedLob.hasData ? `Preview data in ${selectedLob.name}` : `Attach CSV/Excel to ${selectedLob.name}`) : 'Select a BU/LOB first'}\n                                    onClick={(e) => { e.preventDefault(); e.stopPropagation(); if (selectedLob) handleUploadClick(selectedLob.id); }}\n                                    onKeyDown={(e) => { if ((e.key === 'Enter' || e.key === ' ') && selectedLob) { e.preventDefault(); e.stopPropagation(); handleUploadClick(selectedLob.id); } }}\n                                >\n                                    {selectedLob?.hasData ? <Eye className=\"h-4 w-4\" /> : <UploadCloud className=\"h-4 w-4\" />}\n                                    <span className=\"sr-only\">{selectedLob?.hasData ? 'Preview data' : 'Attach CSV/Excel'}</span>\n                                </span>\n                                <ChevronDown className=\"h-4 w-4\" />\n                            </>\n                        ) : (\n                            <>\n                                {isLoading && <RefreshCw className=\"h-4 w-4 animate-spin\" />}\n                                <span>\n                                    {isLoading ? 'Loading Business Units...' : (selectedBu && selectedLob ? `${selectedBu.name} - ${selectedLob.name}` : (selectedBu ? selectedBu.name : 'Select a Business Unit'))}\n                                </span>\n                                <span\n                                    role=\"button\"\n                                    tabIndex={selectedLob ? 0 : -1}\n                                    aria-disabled={!selectedLob}\n                                    className={cn('ml-1 inline-flex items-center justify-center rounded p-1 hover:bg-white/10', !selectedLob && 'opacity-50 pointer-events-none')}\n                                    title={selectedLob ? (selectedLob.hasData ? `Preview data in ${selectedLob.name}` : `Attach CSV/Excel to ${selectedLob.name}`) : 'Select a BU/LOB first'}\n                                    onClick={(e) => { e.preventDefault(); e.stopPropagation(); if (selectedLob) handleUploadClick(selectedLob.id); }}\n                                    onKeyDown={(e) => { if ((e.key === 'Enter' || e.key === ' ') && selectedLob) { e.preventDefault(); e.stopPropagation(); handleUploadClick(selectedLob.id); } }}\n                                >\n                                    {selectedLob?.hasData ? <Eye className=\"h-4 w-4\" /> : <UploadCloud className=\"h-4 w-4\" />}\n                                    <span className=\"sr-only\">{selectedLob?.hasData ? 'Preview data' : 'Attach CSV/Excel'}</span>\n                                </span>\n                                <ChevronDown className=\"h-4 w-4\" />\n                            </>\n                        )}\n                    </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-80\">\n                    <DropdownMenuLabel>Select Business Unit / LOB</DropdownMenuLabel>\n                    <DropdownMenuSeparator />\n                    {businessUnits.map((bu) => (\n                        <DropdownMenuSub key={bu.id}>\n                            <DropdownMenuSubTrigger>\n                                <div className=\"flex items-center gap-2\">\n                                    <Folder className=\"mr-2 h-4 w-4\" style={{ color: bu.color }} />\n                                    <span>{bu.name}</span>\n                                </div>\n                                {selectedBu?.id === bu.id && (\n                                    <span className=\"ml-auto text-xs text-muted-foreground\">Current</span>\n                                )}\n                            </DropdownMenuSubTrigger>\n                            <DropdownMenuPortal>\n                                <DropdownMenuSubContent>\n                                    <DropdownMenuLabel>{bu.name}</DropdownMenuLabel>\n                                    <DropdownMenuSeparator />\n                                    {bu.lobs.map((lob) => {\n                                        const isSelected = selectedLob?.id === lob.id;\n                                        return (\n                                            <DropdownMenuItem\n                                                key={lob.id}\n                                                onSelect={() => handleLobSelect(lob, bu)}\n                                                className={cn(isSelected && 'bg-accent text-accent-foreground')}\n                                            >\n                                                <div className=\"flex items-center justify-between w-full\">\n                                                    <div className=\"flex items-center gap-2\">\n                                                        {isSelected && <Check className=\"h-4 w-4 text-primary\" />}\n                                                        <span>{lob.name}</span>\n                                                    </div>\n                                                    <div className=\"flex items-center gap-2\">\n                                                        {lob.hasData ? (\n                                                            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                                                        ) : (\n                                                            <FileWarning className=\"h-4 w-4 text-amber-500\" />\n                                                        )}\n                                                        <Button\n                                                            variant=\"ghost\"\n                                                            size=\"icon\"\n                                                            className=\"h-6 w-6\"\n                                                            onClick={(e) => { e.preventDefault(); e.stopPropagation(); handleUploadClick(lob.id); }}\n                                                            title={lob.hasData ? \"Preview data\" : \"Attach CSV/Excel\"}\n                                                        >\n                                                            {lob.hasData ? <Eye className=\"h-4 w-4\" /> : <UploadCloud className=\"h-4 w-4\" />}\n                                                            <span className=\"sr-only\">{lob.hasData ? \"Preview data\" : \"Attach CSV/Excel\"}</span>\n                                                        </Button>\n                                                    </div>\n                                                </div>\n                                            </DropdownMenuItem>\n                                        );\n                                    })}\n                                    {bu.lobs.length === 0 && (\n                                        <DropdownMenuItem disabled>No LOBs created yet.</DropdownMenuItem>\n                                    )}\n                                    <DropdownMenuSeparator />\n                                    <DropdownMenuItem onSelect={(e) => { e.preventDefault(); openAddLobModal(bu.id) }}>\n                                        <PlusCircle className=\"mr-2 h-4 w-4\" />\n                                        Add Line of Business\n                                    </DropdownMenuItem>\n                                </DropdownMenuSubContent>\n                            </DropdownMenuPortal>\n                        </DropdownMenuSub>\n                    ))}\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onSelect={(e) => { e.preventDefault(); setAddBuOpen(true) }}>\n                        <PlusCircle className=\"mr-2 h-4 w-4\" />\n                        New Business Unit\n                    </DropdownMenuItem>\n                </DropdownMenuContent>\n            </DropdownMenu>\n\n            <AddBuDialog isOpen={isAddBuOpen} onOpenChange={setAddBuOpen} />\n            <AddLobDialog isOpen={isAddLobOpen} onOpenChange={setAddLobOpen} buId={currentBuForLob} />\n\n            {pendingUpload && (\n                <ColumnMappingDialog\n                    isOpen={columnMappingOpen}\n                    onOpenChange={setColumnMappingOpen}\n                    fileName={pendingUpload.file.name}\n                    columns={pendingUpload.columns}\n                    dataPreview={pendingUpload.dataPreview}\n                    onConfirm={handleColumnMappingConfirm}\n                    onCancel={handleColumnMappingCancel}\n                />\n            )}\n\n            {businessUnits.flatMap(bu => bu.lobs.map(lob => ({ bu, lob }))).map(({ bu, lob }) => (\n                <input\n                    key={`${bu.id}-${lob.id}`}\n                    type=\"file\"\n                    ref={(el) => { fileInputRefs.current[lob.id] = el }}\n                    className=\"hidden\"\n                    onChange={(e) => handleFileChange(e, lob.id)}\n                    accept=\".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\"\n                />\n            ))}\n        </>\n    )\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}